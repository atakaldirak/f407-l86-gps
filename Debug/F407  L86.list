
F407  L86.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08006e70  08006e70  00007e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f8  080072f8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080072f8  080072f8  000082f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007300  08007300  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007300  08007300  00008300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007304  08007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007308  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000380  200001d8  200001d8  000091d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000558  20000558  000091d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d0f  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b51  00000000  00000000  00012f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  00014a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060e  00000000  00000000  00015260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216ea  00000000  00000000  0001586e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a768  00000000  00000000  00036f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c60d8  00000000  00000000  000416c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107798  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000304c  00000000  00000000  001077dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0010a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e58 	.word	0x08006e58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006e58 	.word	0x08006e58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <prv_parse_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static int32_t
prv_parse_number(lwgps_t* ghandle, const char* text) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
    uint8_t minus = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	72fb      	strb	r3, [r7, #11]

    if (text == NULL) {
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d106      	bne.n	8000ebe <prv_parse_number+0x26>
        text = ghandle->p.term_str;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3379      	adds	r3, #121	@ 0x79
 8000eb4:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8000eb6:	e002      	b.n	8000ebe <prv_parse_number+0x26>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <prv_parse_number+0x34>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b20      	cmp	r3, #32
 8000eca:	d0f5      	beq.n	8000eb8 <prv_parse_number+0x20>

    minus = (*text == '-' ? (++text, 1) : 0);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b2d      	cmp	r3, #45	@ 0x2d
 8000ed2:	d104      	bne.n	8000ede <prv_parse_number+0x46>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <prv_parse_number+0x48>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	72fb      	strb	r3, [r7, #11]
    for (; text != NULL && CIN(*text); ++text) {
 8000ee2:	e00d      	b.n	8000f00 <prv_parse_number+0x68>
        res = 10L * res + CTN(*text);
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	461a      	mov	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3b30      	subs	r3, #48	@ 0x30
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
    for (; text != NULL && CIN(*text); ++text) {
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <prv_parse_number+0x7e>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f0c:	d903      	bls.n	8000f16 <prv_parse_number+0x7e>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b39      	cmp	r3, #57	@ 0x39
 8000f14:	d9e6      	bls.n	8000ee4 <prv_parse_number+0x4c>
    }
    return minus ? -res : res;
 8000f16:	7afb      	ldrb	r3, [r7, #11]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <prv_parse_number+0x8a>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	425b      	negs	r3, r3
 8000f20:	e000      	b.n	8000f24 <prv_parse_number+0x8c>
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <prv_parse_float_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* ghandle, const char* text) {
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1, sign = (lwgps_float_t)1;
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8001088 <prv_parse_float_number+0x158>)
 8000f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b4c      	ldr	r3, [pc, #304]	@ (8001088 <prv_parse_float_number+0x158>)
 8000f56:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (text == NULL) {
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d106      	bne.n	8000f6e <prv_parse_float_number+0x3e>
        text = ghandle->p.term_str;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3379      	adds	r3, #121	@ 0x79
 8000f64:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8000f66:	e002      	b.n	8000f6e <prv_parse_float_number+0x3e>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <prv_parse_float_number+0x4c>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d0f5      	beq.n	8000f68 <prv_parse_float_number+0x38>

    if (*text == '-') { /* Check sign */
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f82:	d126      	bne.n	8000fd2 <prv_parse_float_number+0xa2>
        sign = -1;
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b40      	ldr	r3, [pc, #256]	@ (800108c <prv_parse_float_number+0x15c>)
 8000f8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ++text;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Convert main part */
 8000f94:	e01d      	b.n	8000fd2 <prv_parse_float_number+0xa2>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001090 <prv_parse_float_number+0x160>)
 8000f9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fa0:	f7ff fb2a 	bl	80005f8 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4614      	mov	r4, r2
 8000faa:	461d      	mov	r5, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	3b30      	subs	r3, #48	@ 0x30
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fab6 	bl	8000524 <__aeabi_i2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f7ff f964 	bl	800028c <__adddf3>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++text;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Convert main part */
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b2f      	cmp	r3, #47	@ 0x2f
 8000fd8:	d903      	bls.n	8000fe2 <prv_parse_float_number+0xb2>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b39      	cmp	r3, #57	@ 0x39
 8000fe0:	d9d9      	bls.n	8000f96 <prv_parse_float_number+0x66>
    }
    if (*text == '.') { /* Skip the dot character */
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fe8:	d12c      	bne.n	8001044 <prv_parse_float_number+0x114>
        ++text;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Get the power */
 8000ff0:	e028      	b.n	8001044 <prv_parse_float_number+0x114>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <prv_parse_float_number+0x160>)
 8000ff8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ffc:	f7ff fafc 	bl	80005f8 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4614      	mov	r4, r2
 8001006:	461d      	mov	r5, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b30      	subs	r3, #48	@ 0x30
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa88 	bl	8000524 <__aeabi_i2d>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4620      	mov	r0, r4
 800101a:	4629      	mov	r1, r5
 800101c:	f7ff f936 	bl	800028c <__adddf3>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10;
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <prv_parse_float_number+0x160>)
 800102e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++text;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Get the power */
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b2f      	cmp	r3, #47	@ 0x2f
 800104a:	d903      	bls.n	8001054 <prv_parse_float_number+0x124>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b39      	cmp	r3, #57	@ 0x39
 8001052:	d9ce      	bls.n	8000ff2 <prv_parse_float_number+0xc2>
    }
    return sign * value / power;
 8001054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105c:	f7ff facc 	bl	80005f8 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800106c:	f7ff fbee 	bl	800084c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	ec43 2b17 	vmov	d7, r2, r3
}
 8001078:	eeb0 0a47 	vmov.f32	s0, s14
 800107c:	eef0 0a67 	vmov.f32	s1, s15
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bdb0      	pop	{r4, r5, r7, pc}
 8001086:	bf00      	nop
 8001088:	3ff00000 	.word	0x3ff00000
 800108c:	bff00000 	.word	0xbff00000
 8001090:	40240000 	.word	0x40240000

08001094 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       ghandle: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* ghandle) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    lwgps_float_t llong, deg, min;

    llong = prv_parse_float_number(ghandle, NULL); /* Parse value as double */
 800109c:	2100      	movs	r1, #0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff46 	bl	8000f30 <prv_parse_float_number>
 80010a4:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)llong / 100));            /* Get absolute degrees value, interested in integer part only */
 80010a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ac:	f7ff fd54 	bl	8000b58 <__aeabi_d2iz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <prv_parse_lat_long+0x94>)
 80010b4:	fb82 1203 	smull	r1, r2, r2, r3
 80010b8:	1152      	asrs	r2, r2, #5
 80010ba:	17db      	asrs	r3, r3, #31
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa30 	bl	8000524 <__aeabi_i2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = llong - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <prv_parse_lat_long+0x98>)
 80010d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010d6:	f7ff fa8f 	bl	80005f8 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e2:	f7ff f8d1 	bl	8000288 <__aeabi_dsub>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    llong = deg + (min / FLT(60));                 /* Calculate latitude/longitude */
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <prv_parse_lat_long+0x9c>)
 80010f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010f8:	f7ff fba8 	bl	800084c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001104:	f7ff f8c2 	bl	800028c <__adddf3>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return llong;
 8001110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001114:	ec43 2b17 	vmov	d7, r2, r3
}
 8001118:	eeb0 0a47 	vmov.f32	s0, s14
 800111c:	eef0 0a67 	vmov.f32	s1, s15
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	51eb851f 	.word	0x51eb851f
 800112c:	40590000 	.word	0x40590000
 8001130:	404e0000 	.word	0x404e0000

08001134 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* ghandle) {
 8001134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
    if (ghandle->p.term_num == 0) { /* Check string type */
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f891 1087 	ldrb.w	r1, [r1, #135]	@ 0x87
 8001144:	2900      	cmp	r1, #0
 8001146:	d169      	bne.n	800121c <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(ghandle->p.term_str, "$GPGGA", 6) || !strncmp(ghandle->p.term_str, "$GNGGA", 6)) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3379      	adds	r3, #121	@ 0x79
 800114c:	2206      	movs	r2, #6
 800114e:	49ad      	ldr	r1, [pc, #692]	@ (8001404 <prv_parse_term+0x2d0>)
 8001150:	4618      	mov	r0, r3
 8001152:	f003 ffe7 	bl	8005124 <strncmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d009      	beq.n	8001170 <prv_parse_term+0x3c>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3379      	adds	r3, #121	@ 0x79
 8001160:	2206      	movs	r2, #6
 8001162:	49a9      	ldr	r1, [pc, #676]	@ (8001408 <prv_parse_term+0x2d4>)
 8001164:	4618      	mov	r0, r3
 8001166:	f003 ffdd 	bl	8005124 <strncmp>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d104      	bne.n	800117a <prv_parse_term+0x46>
            ghandle->p.stat = STAT_GGA;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8001178:	e04e      	b.n	8001218 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(ghandle->p.term_str, "$GPGSA", 6) || !strncmp(ghandle->p.term_str, "$GNGSA", 6)) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3379      	adds	r3, #121	@ 0x79
 800117e:	2206      	movs	r2, #6
 8001180:	49a2      	ldr	r1, [pc, #648]	@ (800140c <prv_parse_term+0x2d8>)
 8001182:	4618      	mov	r0, r3
 8001184:	f003 ffce 	bl	8005124 <strncmp>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d009      	beq.n	80011a2 <prv_parse_term+0x6e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3379      	adds	r3, #121	@ 0x79
 8001192:	2206      	movs	r2, #6
 8001194:	499e      	ldr	r1, [pc, #632]	@ (8001410 <prv_parse_term+0x2dc>)
 8001196:	4618      	mov	r0, r3
 8001198:	f003 ffc4 	bl	8005124 <strncmp>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <prv_parse_term+0x78>
            ghandle->p.stat = STAT_GSA;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2202      	movs	r2, #2
 80011a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80011aa:	e035      	b.n	8001218 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(ghandle->p.term_str, "$GPGSV", 6) || !strncmp(ghandle->p.term_str, "$GNGSV", 6)) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3379      	adds	r3, #121	@ 0x79
 80011b0:	2206      	movs	r2, #6
 80011b2:	4998      	ldr	r1, [pc, #608]	@ (8001414 <prv_parse_term+0x2e0>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 ffb5 	bl	8005124 <strncmp>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d009      	beq.n	80011d4 <prv_parse_term+0xa0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3379      	adds	r3, #121	@ 0x79
 80011c4:	2206      	movs	r2, #6
 80011c6:	4994      	ldr	r1, [pc, #592]	@ (8001418 <prv_parse_term+0x2e4>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 ffab 	bl	8005124 <strncmp>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <prv_parse_term+0xaa>
            ghandle->p.stat = STAT_GSV;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80011dc:	e01c      	b.n	8001218 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(ghandle->p.term_str, "$GPRMC", 6) || !strncmp(ghandle->p.term_str, "$GNRMC", 6)) {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3379      	adds	r3, #121	@ 0x79
 80011e2:	2206      	movs	r2, #6
 80011e4:	498d      	ldr	r1, [pc, #564]	@ (800141c <prv_parse_term+0x2e8>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 ff9c 	bl	8005124 <strncmp>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <prv_parse_term+0xd2>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3379      	adds	r3, #121	@ 0x79
 80011f6:	2206      	movs	r2, #6
 80011f8:	4989      	ldr	r1, [pc, #548]	@ (8001420 <prv_parse_term+0x2ec>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 ff92 	bl	8005124 <strncmp>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d104      	bne.n	8001210 <prv_parse_term+0xdc>
            ghandle->p.stat = STAT_RMC;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2204      	movs	r2, #4
 800120a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800120e:	e003      	b.n	8001218 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(ghandle->p.term_str, "$PUBX", 5)) {
            ghandle->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            ghandle->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        }
        return 1;
 8001218:	2301      	movs	r3, #1
 800121a:	e25d      	b.n	80016d8 <prv_parse_term+0x5a4>
    }

    /* Start parsing terms */
    if (ghandle->p.stat == STAT_UNKNOWN) {
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 8001222:	2900      	cmp	r1, #0
 8001224:	f000 8257 	beq.w	80016d6 <prv_parse_term+0x5a2>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) { /* Process GPGGA statement */
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 800122e:	2901      	cmp	r1, #1
 8001230:	f040 80f8 	bne.w	8001424 <prv_parse_term+0x2f0>
        switch (ghandle->p.term_num) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800123a:	3b01      	subs	r3, #1
 800123c:	2b0c      	cmp	r3, #12
 800123e:	f200 823f 	bhi.w	80016c0 <prv_parse_term+0x58c>
 8001242:	a201      	add	r2, pc, #4	@ (adr r2, 8001248 <prv_parse_term+0x114>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	0800127d 	.word	0x0800127d
 800124c:	08001313 	.word	0x08001313
 8001250:	08001329 	.word	0x08001329
 8001254:	08001353 	.word	0x08001353
 8001258:	08001369 	.word	0x08001369
 800125c:	08001393 	.word	0x08001393
 8001260:	080013a7 	.word	0x080013a7
 8001264:	080016c1 	.word	0x080016c1
 8001268:	080013bb 	.word	0x080013bb
 800126c:	080016c1 	.word	0x080016c1
 8001270:	080013d3 	.word	0x080013d3
 8001274:	080016c1 	.word	0x080016c1
 8001278:	080013eb 	.word	0x080013eb
            case 1: /* Process UTC time */
                if (ghandle->p.term_pos >= 6) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001282:	2b05      	cmp	r3, #5
 8001284:	d940      	bls.n	8001308 <prv_parse_term+0x1d4>
                    ghandle->p.data.gga.hours = 10 * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800128c:	3b30      	subs	r3, #48	@ 0x30
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4413      	add	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80012a0:	4413      	add	r3, r2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3b30      	subs	r3, #48	@ 0x30
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
                    ghandle->p.data.gga.minutes = 10 * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80012b4:	3b30      	subs	r3, #48	@ 0x30
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80012c8:	4413      	add	r3, r2
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	3b30      	subs	r3, #48	@ 0x30
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
                    ghandle->p.data.gga.seconds = 10 * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80012dc:	3b30      	subs	r3, #48	@ 0x30
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80012f0:	4413      	add	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3b30      	subs	r3, #48	@ 0x30
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                    ghandle->p.data.gga.time_valid = 1;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
                } else {
                    ghandle->p.data.gga.time_valid = 0;
                }
                break;
 8001306:	e1e6      	b.n	80016d6 <prv_parse_term+0x5a2>
                    ghandle->p.data.gga.time_valid = 0;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
                break;
 8001310:	e1e1      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 2:                                                         /* Latitude */
                ghandle->p.data.gga.latitude = prv_parse_lat_long(ghandle); /* Parse latitude */
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff febe 	bl	8001094 <prv_parse_lat_long>
 8001318:	eeb0 7a40 	vmov.f32	s14, s0
 800131c:	eef0 7a60 	vmov.f32	s15, s1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001326:	e1d6      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 3: /* Latitude north/south information */
                if (ghandle->p.term_str[0] == 'S' || ghandle->p.term_str[0] == 's') {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800132e:	2b53      	cmp	r3, #83	@ 0x53
 8001330:	d005      	beq.n	800133e <prv_parse_term+0x20a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001338:	2b73      	cmp	r3, #115	@ 0x73
 800133a:	f040 81c3 	bne.w	80016c4 <prv_parse_term+0x590>
                    ghandle->p.data.gga.latitude = -ghandle->p.data.gga.latitude;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001344:	4690      	mov	r8, r2
 8001346:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	e9c3 8924 	strd	r8, r9, [r3, #144]	@ 0x90
                }
                break;
 8001350:	e1b8      	b.n	80016c4 <prv_parse_term+0x590>
            case 4:                                                          /* Longitude */
                ghandle->p.data.gga.longitude = prv_parse_lat_long(ghandle); /* Parse longitude */
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fe9e 	bl	8001094 <prv_parse_lat_long>
 8001358:	eeb0 7a40 	vmov.f32	s14, s0
 800135c:	eef0 7a60 	vmov.f32	s15, s1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001366:	e1b6      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 5: /* Longitude east/west information */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800136e:	2b57      	cmp	r3, #87	@ 0x57
 8001370:	d005      	beq.n	800137e <prv_parse_term+0x24a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001378:	2b77      	cmp	r3, #119	@ 0x77
 800137a:	f040 81a5 	bne.w	80016c8 <prv_parse_term+0x594>
                    ghandle->p.data.gga.longitude = -ghandle->p.data.gga.longitude;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001384:	4614      	mov	r4, r2
 8001386:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e9c3 4526 	strd	r4, r5, [r3, #152]	@ 0x98
                }
                break;
 8001390:	e19a      	b.n	80016c8 <prv_parse_term+0x594>
            case 6: /* Fix status */ ghandle->p.data.gga.fix = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001392:	2100      	movs	r1, #0
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fd7f 	bl	8000e98 <prv_parse_number>
 800139a:	4603      	mov	r3, r0
 800139c:	b2da      	uxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
 80013a4:	e197      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 7: /* Satellites in use */
                ghandle->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(ghandle, NULL);
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fd75 	bl	8000e98 <prv_parse_number>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
                break;
 80013b8:	e18d      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 9: /* Altitude */ ghandle->p.data.gga.altitude = prv_parse_float_number(ghandle, NULL); break;
 80013ba:	2100      	movs	r1, #0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fdb7 	bl	8000f30 <prv_parse_float_number>
 80013c2:	eeb0 7a40 	vmov.f32	s14, s0
 80013c6:	eef0 7a60 	vmov.f32	s15, s1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
 80013d0:	e181      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 11: /* Altitude above ellipsoid */
                ghandle->p.data.gga.geo_sep = prv_parse_float_number(ghandle, NULL);
 80013d2:	2100      	movs	r1, #0
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fdab 	bl	8000f30 <prv_parse_float_number>
 80013da:	eeb0 7a40 	vmov.f32	s14, s0
 80013de:	eef0 7a60 	vmov.f32	s15, s1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
                break;
 80013e8:	e175      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 13: /* Age of differential GPS correction data */
                ghandle->p.data.gga.dgps_age = prv_parse_float_number(ghandle, NULL);
 80013ea:	2100      	movs	r1, #0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fd9f 	bl	8000f30 <prv_parse_float_number>
 80013f2:	eeb0 7a40 	vmov.f32	s14, s0
 80013f6:	eef0 7a60 	vmov.f32	s15, s1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	ed83 7b2e 	vstr	d7, [r3, #184]	@ 0xb8
                break;
 8001400:	e169      	b.n	80016d6 <prv_parse_term+0x5a2>
 8001402:	bf00      	nop
 8001404:	08006e70 	.word	0x08006e70
 8001408:	08006e78 	.word	0x08006e78
 800140c:	08006e80 	.word	0x08006e80
 8001410:	08006e88 	.word	0x08006e88
 8001414:	08006e90 	.word	0x08006e90
 8001418:	08006e98 	.word	0x08006e98
 800141c:	08006ea0 	.word	0x08006ea0
 8001420:	08006ea8 	.word	0x08006ea8
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) { /* Process GPGSA statement */
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 800142a:	2902      	cmp	r1, #2
 800142c:	d172      	bne.n	8001514 <prv_parse_term+0x3e0>
        switch (ghandle->p.term_num) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001434:	3b02      	subs	r3, #2
 8001436:	2b0f      	cmp	r3, #15
 8001438:	d850      	bhi.n	80014dc <prv_parse_term+0x3a8>
 800143a:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <prv_parse_term+0x30c>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001481 	.word	0x08001481
 8001444:	080014dd 	.word	0x080014dd
 8001448:	080014dd 	.word	0x080014dd
 800144c:	080014dd 	.word	0x080014dd
 8001450:	080014dd 	.word	0x080014dd
 8001454:	080014dd 	.word	0x080014dd
 8001458:	080014dd 	.word	0x080014dd
 800145c:	080014dd 	.word	0x080014dd
 8001460:	080014dd 	.word	0x080014dd
 8001464:	080014dd 	.word	0x080014dd
 8001468:	080014dd 	.word	0x080014dd
 800146c:	080014dd 	.word	0x080014dd
 8001470:	080014dd 	.word	0x080014dd
 8001474:	08001495 	.word	0x08001495
 8001478:	080014ad 	.word	0x080014ad
 800147c:	080014c5 	.word	0x080014c5
            case 2: ghandle->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fd08 	bl	8000e98 <prv_parse_number>
 8001488:	4603      	mov	r3, r0
 800148a:	b2da      	uxtb	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 8001492:	e120      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 15: ghandle->p.data.gsa.dop_p = prv_parse_float_number(ghandle, NULL); break;
 8001494:	2100      	movs	r1, #0
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fd4a 	bl	8000f30 <prv_parse_float_number>
 800149c:	eeb0 7a40 	vmov.f32	s14, s0
 80014a0:	eef0 7a60 	vmov.f32	s15, s1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
 80014aa:	e114      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 16: ghandle->p.data.gsa.dop_h = prv_parse_float_number(ghandle, NULL); break;
 80014ac:	2100      	movs	r1, #0
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fd3e 	bl	8000f30 <prv_parse_float_number>
 80014b4:	eeb0 7a40 	vmov.f32	s14, s0
 80014b8:	eef0 7a60 	vmov.f32	s15, s1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
 80014c2:	e108      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 17: ghandle->p.data.gsa.dop_v = prv_parse_float_number(ghandle, NULL); break;
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fd32 	bl	8000f30 <prv_parse_float_number>
 80014cc:	eeb0 7a40 	vmov.f32	s14, s0
 80014d0:	eef0 7a60 	vmov.f32	s15, s1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 80014da:	e0fc      	b.n	80016d6 <prv_parse_term+0x5a2>
            default:
                /* Parse satellite IDs */
                if (ghandle->p.term_num >= 3 && ghandle->p.term_num <= 14) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	f240 80f2 	bls.w	80016cc <prv_parse_term+0x598>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80014ee:	2b0e      	cmp	r3, #14
 80014f0:	f200 80ec 	bhi.w	80016cc <prv_parse_term+0x598>
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
                        (uint8_t)prv_parse_number(ghandle, NULL);
 80014f4:	2100      	movs	r1, #0
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fcce 	bl	8000e98 <prv_parse_number>
 80014fc:	4602      	mov	r2, r0
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001504:	3b03      	subs	r3, #3
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8001506:	b2d1      	uxtb	r1, r2
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	460a      	mov	r2, r1
 800150e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                }
                break;
 8001512:	e0db      	b.n	80016cc <prv_parse_term+0x598>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) { /* Process GPGSV statement */
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 800151a:	2903      	cmp	r1, #3
 800151c:	d11b      	bne.n	8001556 <prv_parse_term+0x422>
        switch (ghandle->p.term_num) {
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001524:	2b02      	cmp	r3, #2
 8001526:	d002      	beq.n	800152e <prv_parse_term+0x3fa>
 8001528:	2b03      	cmp	r3, #3
 800152a:	d00a      	beq.n	8001542 <prv_parse_term+0x40e>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 800152c:	e0d3      	b.n	80016d6 <prv_parse_term+0x5a2>
                ghandle->p.data.gsv.stat_num = (uint8_t)prv_parse_number(ghandle, NULL);
 800152e:	2100      	movs	r1, #0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fcb1 	bl	8000e98 <prv_parse_number>
 8001536:	4603      	mov	r3, r0
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                break;
 8001540:	e0c9      	b.n	80016d6 <prv_parse_term+0x5a2>
                ghandle->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(ghandle, NULL);
 8001542:	2100      	movs	r1, #0
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fca7 	bl	8000e98 <prv_parse_number>
 800154a:	4603      	mov	r3, r0
 800154c:	b2da      	uxtb	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
                break;
 8001554:	e0bf      	b.n	80016d6 <prv_parse_term+0x5a2>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) { /* Process GPRMC statement */
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 800155c:	2904      	cmp	r1, #4
 800155e:	f040 80ba 	bne.w	80016d6 <prv_parse_term+0x5a2>
        switch (ghandle->p.term_num) {
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f891 1087 	ldrb.w	r1, [r1, #135]	@ 0x87
 8001568:	3902      	subs	r1, #2
 800156a:	2909      	cmp	r1, #9
 800156c:	f200 80b0 	bhi.w	80016d0 <prv_parse_term+0x59c>
 8001570:	a001      	add	r0, pc, #4	@ (adr r0, 8001578 <prv_parse_term+0x444>)
 8001572:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001576:	bf00      	nop
 8001578:	080015a1 	.word	0x080015a1
 800157c:	080016d1 	.word	0x080016d1
 8001580:	080016d1 	.word	0x080016d1
 8001584:	080016d1 	.word	0x080016d1
 8001588:	080016d1 	.word	0x080016d1
 800158c:	080015bb 	.word	0x080015bb
 8001590:	080015d3 	.word	0x080015d3
 8001594:	080015eb 	.word	0x080015eb
 8001598:	08001681 	.word	0x08001681
 800159c:	08001699 	.word	0x08001699
            case 2: /* Process valid status */ ghandle->p.data.rmc.is_valid = (ghandle->p.term_str[0] == 'A'); break;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80015a6:	2b41      	cmp	r3, #65	@ 0x41
 80015a8:	bf0c      	ite	eq
 80015aa:	2301      	moveq	r3, #1
 80015ac:	2300      	movne	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 80015b8:	e08d      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 7: /* Process ground speed in knots */
                ghandle->p.data.rmc.speed = prv_parse_float_number(ghandle, NULL);
 80015ba:	2100      	movs	r1, #0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fcb7 	bl	8000f30 <prv_parse_float_number>
 80015c2:	eeb0 7a40 	vmov.f32	s14, s0
 80015c6:	eef0 7a60 	vmov.f32	s15, s1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80015d0:	e081      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 8: /* Process true ground coarse */
                ghandle->p.data.rmc.course = prv_parse_float_number(ghandle, NULL);
 80015d2:	2100      	movs	r1, #0
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fcab 	bl	8000f30 <prv_parse_float_number>
 80015da:	eeb0 7a40 	vmov.f32	s14, s0
 80015de:	eef0 7a60 	vmov.f32	s15, s1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80015e8:	e075      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 9: /* Process date */
                if (ghandle->p.term_pos >= 6) {
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	d940      	bls.n	8001676 <prv_parse_term+0x542>
                    ghandle->p.data.rmc.date =
                        (uint8_t)(10U * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80015fa:	3b30      	subs	r3, #48	@ 0x30
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800160e:	4413      	add	r3, r2
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3b30      	subs	r3, #48	@ 0x30
 8001614:	b2da      	uxtb	r2, r3
                    ghandle->p.data.rmc.date =
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                    ghandle->p.data.rmc.month =
                        (uint8_t)(10U * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001622:	3b30      	subs	r3, #48	@ 0x30
 8001624:	b2db      	uxtb	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001636:	4413      	add	r3, r2
 8001638:	b2db      	uxtb	r3, r3
 800163a:	3b30      	subs	r3, #48	@ 0x30
 800163c:	b2da      	uxtb	r2, r3
                    ghandle->p.data.rmc.month =
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
                    ghandle->p.data.rmc.year =
                        (uint8_t)(10U * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800164a:	3b30      	subs	r3, #48	@ 0x30
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b2da      	uxtb	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800165e:	4413      	add	r3, r2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	3b30      	subs	r3, #48	@ 0x30
 8001664:	b2da      	uxtb	r2, r3
                    ghandle->p.data.rmc.year =
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
                    ghandle->p.data.rmc.date_valid = 1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
                } else {
                    ghandle->p.data.rmc.date_valid = 0;
                }
                break;
 8001674:	e02f      	b.n	80016d6 <prv_parse_term+0x5a2>
                    ghandle->p.data.rmc.date_valid = 0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
                break;
 800167e:	e02a      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 10: /* Process magnetic variation */
                ghandle->p.data.rmc.variation = prv_parse_float_number(ghandle, NULL);
 8001680:	2100      	movs	r1, #0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fc54 	bl	8000f30 <prv_parse_float_number>
 8001688:	eeb0 7a40 	vmov.f32	s14, s0
 800168c:	eef0 7a60 	vmov.f32	s15, s1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
                break;
 8001696:	e01e      	b.n	80016d6 <prv_parse_term+0x5a2>
            case 11: /* Process magnetic variation east/west */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	f891 1079 	ldrb.w	r1, [r1, #121]	@ 0x79
 800169e:	2957      	cmp	r1, #87	@ 0x57
 80016a0:	d004      	beq.n	80016ac <prv_parse_term+0x578>
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f891 1079 	ldrb.w	r1, [r1, #121]	@ 0x79
 80016a8:	2977      	cmp	r1, #119	@ 0x77
 80016aa:	d113      	bne.n	80016d4 <prv_parse_term+0x5a0>
                    ghandle->p.data.rmc.variation = -ghandle->p.data.rmc.variation;
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	e9d1 012a 	ldrd	r0, r1, [r1, #168]	@ 0xa8
 80016b2:	4602      	mov	r2, r0
 80016b4:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
                }
                break;
 80016be:	e009      	b.n	80016d4 <prv_parse_term+0x5a0>
            default: break;
 80016c0:	bf00      	nop
 80016c2:	e008      	b.n	80016d6 <prv_parse_term+0x5a2>
                break;
 80016c4:	bf00      	nop
 80016c6:	e006      	b.n	80016d6 <prv_parse_term+0x5a2>
                break;
 80016c8:	bf00      	nop
 80016ca:	e004      	b.n	80016d6 <prv_parse_term+0x5a2>
                break;
 80016cc:	bf00      	nop
 80016ce:	e002      	b.n	80016d6 <prv_parse_term+0x5a2>
            default: break;
 80016d0:	bf00      	nop
 80016d2:	e000      	b.n	80016d6 <prv_parse_term+0x5a2>
                break;
 80016d4:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016e2:	bf00      	nop

080016e4 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* ghandle) {
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 80016f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80016f4:	d90a      	bls.n	800170c <prv_check_crc+0x28>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80016fc:	2b39      	cmp	r3, #57	@ 0x39
 80016fe:	d805      	bhi.n	800170c <prv_check_crc+0x28>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	b2da      	uxtb	r2, r3
 800170a:	e024      	b.n	8001756 <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001712:	2b60      	cmp	r3, #96	@ 0x60
 8001714:	d90c      	bls.n	8001730 <prv_check_crc+0x4c>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800171c:	2b7a      	cmp	r3, #122	@ 0x7a
 800171e:	d807      	bhi.n	8001730 <prv_check_crc+0x4c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001726:	3b57      	subs	r3, #87	@ 0x57
 8001728:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	b2da      	uxtb	r2, r3
 800172e:	e012      	b.n	8001756 <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001736:	2b40      	cmp	r3, #64	@ 0x40
 8001738:	d90c      	bls.n	8001754 <prv_check_crc+0x70>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001740:	2b5a      	cmp	r3, #90	@ 0x5a
 8001742:	d807      	bhi.n	8001754 <prv_check_crc+0x70>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800174a:	3b37      	subs	r3, #55	@ 0x37
 800174c:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	b2da      	uxtb	r2, r3
 8001752:	e000      	b.n	8001756 <prv_check_crc+0x72>
 8001754:	2200      	movs	r2, #0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800175c:	2b2f      	cmp	r3, #47	@ 0x2f
 800175e:	d90b      	bls.n	8001778 <prv_check_crc+0x94>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001766:	2b39      	cmp	r3, #57	@ 0x39
 8001768:	d806      	bhi.n	8001778 <prv_check_crc+0x94>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e026      	b.n	80017c6 <prv_check_crc+0xe2>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800177e:	2b60      	cmp	r3, #96	@ 0x60
 8001780:	d90d      	bls.n	800179e <prv_check_crc+0xba>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001788:	2b7a      	cmp	r3, #122	@ 0x7a
 800178a:	d808      	bhi.n	800179e <prv_check_crc+0xba>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001792:	3b57      	subs	r3, #87	@ 0x57
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	b2db      	uxtb	r3, r3
 800179c:	e013      	b.n	80017c6 <prv_check_crc+0xe2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80017a4:	2b40      	cmp	r3, #64	@ 0x40
 80017a6:	d90d      	bls.n	80017c4 <prv_check_crc+0xe0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80017ae:	2b5a      	cmp	r3, #90	@ 0x5a
 80017b0:	d808      	bhi.n	80017c4 <prv_check_crc+0xe0>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80017b8:	3b37      	subs	r3, #55	@ 0x37
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	e000      	b.n	80017c6 <prv_check_crc+0xe2>
 80017c4:	2300      	movs	r3, #0
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	73fb      	strb	r3, [r7, #15]
    return ghandle->p.crc_calc == crc;              /* They must match! */
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	bf0c      	ite	eq
 80017d6:	2301      	moveq	r3, #1
 80017d8:	2300      	movne	r3, #0
 80017da:	b2db      	uxtb	r3, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* ghandle) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d142      	bne.n	8001880 <prv_copy_from_tmp_memory+0x98>
        ghandle->latitude = ghandle->p.data.gga.latitude;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	e9c1 2300 	strd	r2, r3, [r1]
        ghandle->longitude = ghandle->p.data.gga.longitude;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        ghandle->altitude = ghandle->p.data.gga.altitude;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ghandle->geo_sep = ghandle->p.data.gga.geo_sep;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ghandle->sats_in_use = ghandle->p.data.gga.sats_in_use;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f883 2020 	strb.w	r2, [r3, #32]
        ghandle->fix = ghandle->p.data.gga.fix;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        ghandle->hours = ghandle->p.data.gga.hours;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        ghandle->minutes = ghandle->p.data.gga.minutes;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 20b3 	ldrb.w	r2, [r3, #179]	@ 0xb3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        ghandle->seconds = ghandle->p.data.gga.seconds;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        ghandle->time_valid = ghandle->p.data.gga.time_valid;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 20b5 	ldrb.w	r2, [r3, #181]	@ 0xb5
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ghandle->dgps_age = ghandle->p.data.gga.dgps_age;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800187e:	e067      	b.n	8001950 <prv_copy_from_tmp_memory+0x168>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001886:	2b02      	cmp	r3, #2
 8001888:	d121      	bne.n	80018ce <prv_copy_from_tmp_memory+0xe6>
        ghandle->dop_h = ghandle->p.data.gsa.dop_h;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ghandle->dop_p = ghandle->p.data.gsa.dop_p;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ghandle->dop_v = ghandle->p.data.gsa.dop_v;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ghandle->fix_mode = ghandle->p.data.gsa.fix_mode;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        LWGPS_MEMCPY(ghandle->satellites_ids, ghandle->p.data.gsa.satellites_ids, sizeof(ghandle->satellites_ids));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f103 0049 	add.w	r0, r3, #73	@ 0x49
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	33a9      	adds	r3, #169	@ 0xa9
 80018c4:	220c      	movs	r2, #12
 80018c6:	4619      	mov	r1, r3
 80018c8:	f003 fcb5 	bl	8005236 <memcpy>
 80018cc:	e040      	b.n	8001950 <prv_copy_from_tmp_memory+0x168>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d106      	bne.n	80018e6 <prv_copy_from_tmp_memory+0xfe>
        ghandle->sats_in_view = ghandle->p.data.gsv.sats_in_view;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 80018e4:	e034      	b.n	8001950 <prv_copy_from_tmp_memory+0x168>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d12f      	bne.n	8001950 <prv_copy_from_tmp_memory+0x168>
        ghandle->course = ghandle->p.data.rmc.course;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        ghandle->is_valid = ghandle->p.data.rmc.is_valid;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        ghandle->speed = ghandle->p.data.rmc.speed;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        ghandle->variation = ghandle->p.data.rmc.variation;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
        ghandle->date = ghandle->p.data.rmc.date;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        ghandle->month = ghandle->p.data.rmc.month;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        ghandle->year = ghandle->p.data.rmc.year;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        ghandle->date_valid = ghandle->p.data.rmc.date_valid;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 2094 	ldrb.w	r2, [r3, #148]	@ 0x94
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        ghandle->clk_bias = ghandle->p.data.time.clk_bias;
        ghandle->clk_drift = ghandle->p.data.time.clk_drift;
        ghandle->tp_gran = ghandle->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       ghandle: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* ghandle) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    LWGPS_MEMSET(ghandle, 0x00, sizeof(*ghandle)); /* Reset structure */
 8001962:	22c0      	movs	r2, #192	@ 0xc0
 8001964:	2100      	movs	r1, #0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f003 fbd4 	bl	8005114 <memset>
    return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* ghandle, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* ghandle, const void* data, size_t len) {
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001986:	e0ad      	b.n	8001ae4 <lwgps_process+0x16e>
        if (*d == '$') {                                         /* Check for beginning of NMEA line */
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b24      	cmp	r3, #36	@ 0x24
 800198e:	d128      	bne.n	80019e2 <lwgps_process+0x6c>
            LWGPS_MEMSET(&ghandle->p, 0x00, sizeof(ghandle->p)); /* Reset private memory */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3378      	adds	r3, #120	@ 0x78
 8001994:	2248      	movs	r2, #72	@ 0x48
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fbbb 	bl	8005114 <memset>
            TERM_ADD(ghandle, *d);                               /* Add character to term */
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019a4:	2b0b      	cmp	r3, #11
 80019a6:	f200 8097 	bhi.w	8001ad8 <lwgps_process+0x162>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019b0:	4619      	mov	r1, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	440b      	add	r3, r1
 80019ba:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019d4:	461a      	mov	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 80019e0:	e07a      	b.n	8001ad8 <lwgps_process+0x162>
        } else if (*d == ',') {                                  /* Term separator character */
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b2c      	cmp	r3, #44	@ 0x2c
 80019e8:	d11d      	bne.n	8001a26 <lwgps_process+0xb0>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fba2 	bl	8001134 <prv_parse_term>
            CRC_ADD(ghandle, *d);                                /* Add character to CRC computation */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4053      	eors	r3, r2
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8001a24:	e058      	b.n	8001ad8 <lwgps_process+0x162>
        } else if (*d == '*') {                                  /* Start indicates end of data for CRC computation */
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a2c:	d117      	bne.n	8001a5e <lwgps_process+0xe8>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7ff fb80 	bl	8001134 <prv_parse_term>
            ghandle->p.star = 1;                                 /* STAR detected */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001a52:	3301      	adds	r3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8001a5c:	e03c      	b.n	8001ad8 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b0d      	cmp	r3, #13
 8001a64:	d109      	bne.n	8001a7a <lwgps_process+0x104>
            if (prv_check_crc(ghandle)) { /* Check for CRC result */
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff fe3c 	bl	80016e4 <prv_check_crc>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d032      	beq.n	8001ad8 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(ghandle); /* Copy memory from temporary to user memory */
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff feb8 	bl	80017e8 <prv_copy_from_tmp_memory>
 8001a78:	e02e      	b.n	8001ad8 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!ghandle->p.star) {   /* Add to CRC only if star not yet detected */
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <lwgps_process+0x122>
                CRC_ADD(ghandle, *d); /* Add to CRC */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	4053      	eors	r3, r2
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            }
            TERM_ADD(ghandle, *d); /* Add character to term */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001a9e:	2b0b      	cmp	r3, #11
 8001aa0:	d81a      	bhi.n	8001ad8 <lwgps_process+0x162>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001acc:	461a      	mov	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f47f af4e 	bne.w	8001988 <lwgps_process+0x12>
        }
    }
    return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <lwgps_to_speed>:
 * \param[in]       sik: Speed in knots, received from GPS NMEA statement
 * \param[in]       ts: Target speed to convert to from knots
 * \return          Speed calculated from knots
 */
lwgps_float_t
lwgps_to_speed(lwgps_float_t sik, lwgps_speed_t ts) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
    switch (ts) {
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b0e      	cmp	r3, #14
 8001b0a:	f200 80b0 	bhi.w	8001c6e <lwgps_to_speed+0x176>
 8001b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b14 <lwgps_to_speed+0x1c>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b51 	.word	0x08001b51
 8001b18:	08001b65 	.word	0x08001b65
 8001b1c:	08001b79 	.word	0x08001b79
 8001b20:	08001b8d 	.word	0x08001b8d
 8001b24:	08001ba1 	.word	0x08001ba1
 8001b28:	08001bb5 	.word	0x08001bb5
 8001b2c:	08001bc9 	.word	0x08001bc9
 8001b30:	08001bdd 	.word	0x08001bdd
 8001b34:	08001bf1 	.word	0x08001bf1
 8001b38:	08001c05 	.word	0x08001c05
 8001b3c:	08001c19 	.word	0x08001c19
 8001b40:	08001c2d 	.word	0x08001c2d
 8001b44:	08001c41 	.word	0x08001c41
 8001b48:	08001c55 	.word	0x08001c55
 8001b4c:	08001c69 	.word	0x08001c69
        case LWGPS_SPEED_KPS: return FLT(sik * FLT(0.000514));
 8001b50:	a356      	add	r3, pc, #344	@ (adr r3, 8001cac <lwgps_to_speed+0x1b4>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b5a:	f7fe fd4d 	bl	80005f8 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	e088      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_KPH: return FLT(sik * FLT(1.852));
 8001b64:	a353      	add	r3, pc, #332	@ (adr r3, 8001cb4 <lwgps_to_speed+0x1bc>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b6e:	f7fe fd43 	bl	80005f8 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e07e      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_MPS: return FLT(sik * FLT(0.5144));
 8001b78:	a350      	add	r3, pc, #320	@ (adr r3, 8001cbc <lwgps_to_speed+0x1c4>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b82:	f7fe fd39 	bl	80005f8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	e074      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_MPM: return FLT(sik * FLT(30.87));
 8001b8c:	a34d      	add	r3, pc, #308	@ (adr r3, 8001cc4 <lwgps_to_speed+0x1cc>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b96:	f7fe fd2f 	bl	80005f8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e06a      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_MIPS: return FLT(sik * FLT(0.0003197));
 8001ba0:	a34a      	add	r3, pc, #296	@ (adr r3, 8001ccc <lwgps_to_speed+0x1d4>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001baa:	f7fe fd25 	bl	80005f8 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	e060      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_MPH: return FLT(sik * FLT(1.151));
 8001bb4:	a347      	add	r3, pc, #284	@ (adr r3, 8001cd4 <lwgps_to_speed+0x1dc>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bbe:	f7fe fd1b 	bl	80005f8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	e056      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_FPS: return FLT(sik * FLT(1.688));
 8001bc8:	a344      	add	r3, pc, #272	@ (adr r3, 8001cdc <lwgps_to_speed+0x1e4>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bd2:	f7fe fd11 	bl	80005f8 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	e04c      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_FPM: return FLT(sik * FLT(101.3));
 8001bdc:	a341      	add	r3, pc, #260	@ (adr r3, 8001ce4 <lwgps_to_speed+0x1ec>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001be6:	f7fe fd07 	bl	80005f8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e042      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_MPK: return FLT(sik * FLT(32.4));
 8001bf0:	a33e      	add	r3, pc, #248	@ (adr r3, 8001cec <lwgps_to_speed+0x1f4>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bfa:	f7fe fcfd 	bl	80005f8 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	e038      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_SPK: return FLT(sik * FLT(1944.0));
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <lwgps_to_speed+0x1b0>)
 8001c0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c0e:	f7fe fcf3 	bl	80005f8 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	e02e      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_SP100M: return FLT(sik * FLT(194.4));
 8001c18:	a31b      	add	r3, pc, #108	@ (adr r3, 8001c88 <lwgps_to_speed+0x190>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c22:	f7fe fce9 	bl	80005f8 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	e024      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_MIPM: return FLT(sik * FLT(52.14));
 8001c2c:	a318      	add	r3, pc, #96	@ (adr r3, 8001c90 <lwgps_to_speed+0x198>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c36:	f7fe fcdf 	bl	80005f8 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e01a      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_SPM: return FLT(sik * FLT(3128.0));
 8001c40:	a315      	add	r3, pc, #84	@ (adr r3, 8001c98 <lwgps_to_speed+0x1a0>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c4a:	f7fe fcd5 	bl	80005f8 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e010      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_SP100Y: return FLT(sik * FLT(177.7));
 8001c54:	a312      	add	r3, pc, #72	@ (adr r3, 8001ca0 <lwgps_to_speed+0x1a8>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c5e:	f7fe fccb 	bl	80005f8 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	e006      	b.n	8001c76 <lwgps_to_speed+0x17e>
        case LWGPS_SPEED_SMPH: return FLT(sik * FLT(1.0));
 8001c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c6c:	e003      	b.n	8001c76 <lwgps_to_speed+0x17e>
        default: return 0;
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
    }
}
 8001c76:	ec43 2b17 	vmov	d7, r2, r3
 8001c7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7e:	eef0 0a67 	vmov.f32	s1, s15
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	cccccccd 	.word	0xcccccccd
 8001c8c:	40684ccc 	.word	0x40684ccc
 8001c90:	851eb852 	.word	0x851eb852
 8001c94:	404a11eb 	.word	0x404a11eb
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	40a87000 	.word	0x40a87000
 8001ca0:	66666666 	.word	0x66666666
 8001ca4:	40663666 	.word	0x40663666
 8001ca8:	409e6000 	.word	0x409e6000
 8001cac:	9856a37b 	.word	0x9856a37b
 8001cb0:	3f40d7be 	.word	0x3f40d7be
 8001cb4:	c083126f 	.word	0xc083126f
 8001cb8:	3ffda1ca 	.word	0x3ffda1ca
 8001cbc:	fd21ff2e 	.word	0xfd21ff2e
 8001cc0:	3fe075f6 	.word	0x3fe075f6
 8001cc4:	51eb851f 	.word	0x51eb851f
 8001cc8:	403edeb8 	.word	0x403edeb8
 8001ccc:	0b666590 	.word	0x0b666590
 8001cd0:	3f34f3ad 	.word	0x3f34f3ad
 8001cd4:	f9db22d1 	.word	0xf9db22d1
 8001cd8:	3ff26a7e 	.word	0x3ff26a7e
 8001cdc:	49ba5e35 	.word	0x49ba5e35
 8001ce0:	3ffb020c 	.word	0x3ffb020c
 8001ce4:	33333333 	.word	0x33333333
 8001ce8:	40595333 	.word	0x40595333
 8001cec:	33333333 	.word	0x33333333
 8001cf0:	40403333 	.word	0x40403333

08001cf4 <HAL_UART_RxCpltCallback>:
  * @brief UART Receive Complete Callback.
  * @param huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    // GPS verisinin geldiği UART'ın huart3 olduğundan emin olun
    if (huart == &huart3) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_UART_RxCpltCallback+0x6c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d129      	bne.n	8001d58 <HAL_UART_RxCpltCallback+0x64>
        // Gelen baytı geçici buffera ekle
        if (gps_rx_buffer_idx < (GPS_RX_BUFFER_SIZE - 1)) { // Buffer taşmasını engelle, null sonlandırıcı için yer bırak
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_UART_RxCpltCallback+0x70>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_UART_RxCpltCallback+0x2e>
            gps_rx_buffer[gps_rx_buffer_idx++] = gps_single_byte_rx;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <HAL_UART_RxCpltCallback+0x70>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	b291      	uxth	r1, r2
 8001d14:	4a13      	ldr	r2, [pc, #76]	@ (8001d64 <HAL_UART_RxCpltCallback+0x70>)
 8001d16:	8011      	strh	r1, [r2, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_UART_RxCpltCallback+0x74>)
 8001d1c:	7819      	ldrb	r1, [r3, #0]
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_UART_RxCpltCallback+0x78>)
 8001d20:	5499      	strb	r1, [r3, r2]
        }

        // Eğer gelen karakter '\n' ise (NMEA cümle sonu) veya buffer dolduysa, cümleyi işle
        if (gps_single_byte_rx == '\n') {
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_UART_RxCpltCallback+0x74>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b0a      	cmp	r3, #10
 8001d28:	d10a      	bne.n	8001d40 <HAL_UART_RxCpltCallback+0x4c>
            // lwgps'e veriyi işlemesi için gönder
            // NMEA cümleleri CR-LF (\r\n) ile biter, lwgps kütüphanesi bunu içeride ayrıştırır.
            // Bu yüzden buffer'ın tamamını gönderiyoruz.
            lwgps_process(&gps, gps_rx_buffer, gps_rx_buffer_idx);
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <HAL_UART_RxCpltCallback+0x70>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	490e      	ldr	r1, [pc, #56]	@ (8001d6c <HAL_UART_RxCpltCallback+0x78>)
 8001d32:	480f      	ldr	r0, [pc, #60]	@ (8001d70 <HAL_UART_RxCpltCallback+0x7c>)
 8001d34:	f7ff fe1f 	bl	8001976 <lwgps_process>

            // Buffer'ı ve index'i sıfırla, bir sonraki cümle için hazırla
            gps_rx_buffer_idx = 0;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_UART_RxCpltCallback+0x70>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	e006      	b.n	8001d4e <HAL_UART_RxCpltCallback+0x5a>
        } else if (gps_rx_buffer_idx == (GPS_RX_BUFFER_SIZE - 1)) { // Buffer dolarsa ve '\n' gelmezse
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_UART_RxCpltCallback+0x70>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2bff      	cmp	r3, #255	@ 0xff
 8001d46:	d102      	bne.n	8001d4e <HAL_UART_RxCpltCallback+0x5a>
            // Buffer doldu, ancak NMEA cümlesi bitmedi. Bu durumda buffer'ı sıfırla ve yeni cümleye başla.
            // Bu durum genellikle bir hata göstergesidir (örneğin çok uzun NMEA cümlesi veya veri akışında sorun).
            gps_rx_buffer_idx = 0;
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_UART_RxCpltCallback+0x70>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
        }

        // Sonraki bayt için kesmeyi tekrar başlat
        HAL_UART_Receive_IT(&huart3, &gps_single_byte_rx, 1);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4905      	ldr	r1, [pc, #20]	@ (8001d68 <HAL_UART_RxCpltCallback+0x74>)
 8001d52:	4803      	ldr	r0, [pc, #12]	@ (8001d60 <HAL_UART_RxCpltCallback+0x6c>)
 8001d54:	f001 fb90 	bl	8003478 <HAL_UART_Receive_IT>
    }
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200001f4 	.word	0x200001f4
 8001d64:	20000400 	.word	0x20000400
 8001d68:	20000402 	.word	0x20000402
 8001d6c:	20000300 	.word	0x20000300
 8001d70:	20000240 	.word	0x20000240

08001d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d78:	f000 fb00 	bl	800237c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7c:	f000 f894 	bl	8001ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d80:	f000 f91a 	bl	8001fb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d84:	f000 f8ee 	bl	8001f64 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // lwgps kütüphanesini başlat
  lwgps_init(&gps);
 8001d88:	483b      	ldr	r0, [pc, #236]	@ (8001e78 <main+0x104>)
 8001d8a:	f7ff fde6 	bl	800195a <lwgps_init>

  // UART kesmesini başlatarak ilk baytı al
  HAL_UART_Receive_IT(&huart3, &gps_single_byte_rx, 1);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	493a      	ldr	r1, [pc, #232]	@ (8001e7c <main+0x108>)
 8001d92:	483b      	ldr	r0, [pc, #236]	@ (8001e80 <main+0x10c>)
 8001d94:	f001 fb70 	bl	8003478 <HAL_UART_Receive_IT>
  // SWV (Serial Wire Viewer) veya başka bir UART üzerinden printf çıktısı için
  // Eğer henüz yapılandırılmadıysa, STM32CubeIDE'de "System Core -> SYS -> Debug -> Serial Wire"
  // seçeneğini etkinleştirip, "SWV ITM Console"ı kullanmak üzere ayarlamanız gerekebilir.
  // Ya da başka bir UART (örneğin USART2) üzerinden printf yönlendirmesi yapmalısınız.
  // Bu kod printf'in nasıl çalıştığına dair bir örnek sağlar.
  setvbuf(stdout, NULL, _IONBF, 0); // printf buffer'ını kapat (isteğe bağlı, anlık çıktı için)
 8001d98:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <main+0x110>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6898      	ldr	r0, [r3, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2202      	movs	r2, #2
 8001da2:	2100      	movs	r1, #0
 8001da4:	f003 f82a 	bl	8004dfc <setvbuf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // GPS verisinin geçerli olup olmadığını kontrol et (GPRMC cümlesine göre)
    if (lwgps_is_valid(&gps)) {
 8001da8:	4b33      	ldr	r3, [pc, #204]	@ (8001e78 <main+0x104>)
 8001daa:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d05a      	beq.n	8001e68 <main+0xf4>
        // Geçerli konum bilgisi varsa yazdır
        // gps.latitude ve gps.longitude doğrudan lwgps_t yapısı içinde bulunur
        printf("Latitude: %.6f\r\n", gps.latitude);
 8001db2:	4b31      	ldr	r3, [pc, #196]	@ (8001e78 <main+0x104>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	4833      	ldr	r0, [pc, #204]	@ (8001e88 <main+0x114>)
 8001dba:	f002 ffaf 	bl	8004d1c <iprintf>
        printf("Longitude: %.6f\r\n", gps.longitude);
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001e78 <main+0x104>)
 8001dc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001dc4:	4831      	ldr	r0, [pc, #196]	@ (8001e8c <main+0x118>)
 8001dc6:	f002 ffa9 	bl	8004d1c <iprintf>

        // Yükseklik bilgisi varsa yazdır
        // lwgps_t yapısındaki altitude alanı
        printf("Altitude: %.2f m\r\n", gps.altitude);
 8001dca:	4b2b      	ldr	r3, [pc, #172]	@ (8001e78 <main+0x104>)
 8001dcc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001dd0:	482f      	ldr	r0, [pc, #188]	@ (8001e90 <main+0x11c>)
 8001dd2:	f002 ffa3 	bl	8004d1c <iprintf>

        // Kullanımdaki uydu sayısı varsa yazdır
        // lwgps_t yapısındaki sats_in_use alanı
        printf("Satellites in use: %d\r\n", gps.sats_in_use);
 8001dd6:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <main+0x104>)
 8001dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	482d      	ldr	r0, [pc, #180]	@ (8001e94 <main+0x120>)
 8001de0:	f002 ff9c 	bl	8004d1c <iprintf>

        // Hız bilgisi varsa (GPRMC'den gelir)
        // gps.speed'i kullanarak hız verisini lwgps_to_speed ile farklı birime çevirebilirsiniz
        printf("Speed: %.2f km/h\r\n", lwgps_to_speed(gps.speed, LWGPS_SPEED_KPH));
 8001de4:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <main+0x104>)
 8001de6:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 8001dea:	2001      	movs	r0, #1
 8001dec:	eeb0 0a47 	vmov.f32	s0, s14
 8001df0:	eef0 0a67 	vmov.f32	s1, s15
 8001df4:	f7ff fe80 	bl	8001af8 <lwgps_to_speed>
 8001df8:	ec53 2b10 	vmov	r2, r3, d0
 8001dfc:	4826      	ldr	r0, [pc, #152]	@ (8001e98 <main+0x124>)
 8001dfe:	f002 ff8d 	bl	8004d1c <iprintf>

        // Tarih bilgisi varsa (GPRMC'den gelir)
        // gps.date, gps.month, gps.year alanları
        if (gps.date != 0 && gps.month != 0 && gps.year != 0) { // Basit bir kontrol
 8001e02:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <main+0x104>)
 8001e04:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d019      	beq.n	8001e40 <main+0xcc>
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e78 <main+0x104>)
 8001e0e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d014      	beq.n	8001e40 <main+0xcc>
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <main+0x104>)
 8001e18:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00f      	beq.n	8001e40 <main+0xcc>
            printf("Date: %02d/%02d/%04d\r\n", (int)gps.date, (int)gps.month, (int)gps.year + 2000); // Yılı 20XX olarak varsayalım
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <main+0x104>)
 8001e22:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001e26:	4619      	mov	r1, r3
 8001e28:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <main+0x104>)
 8001e2a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <main+0x104>)
 8001e32:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001e36:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001e3a:	4818      	ldr	r0, [pc, #96]	@ (8001e9c <main+0x128>)
 8001e3c:	f002 ff6e 	bl	8004d1c <iprintf>
        }

        // Zaman bilgisi varsa (GPGGA'dan gelir)
        // gps.hours, gps.minutes, gps.seconds alanları
        if (gps.time_valid) { // time_valid bayrağı GPGGA'dan gelir
 8001e40:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <main+0x104>)
 8001e42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d011      	beq.n	8001e6e <main+0xfa>
            printf("Time: %02d:%02d:%02d\r\n", (int)gps.hours, (int)gps.minutes, (int)gps.seconds);
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <main+0x104>)
 8001e4c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001e50:	4619      	mov	r1, r3
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <main+0x104>)
 8001e54:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <main+0x104>)
 8001e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e60:	480f      	ldr	r0, [pc, #60]	@ (8001ea0 <main+0x12c>)
 8001e62:	f002 ff5b 	bl	8004d1c <iprintf>
 8001e66:	e002      	b.n	8001e6e <main+0xfa>
        }
    } else {
        printf("Waiting for GPS fix or valid data...\r\n");
 8001e68:	480e      	ldr	r0, [pc, #56]	@ (8001ea4 <main+0x130>)
 8001e6a:	f002 ffbf 	bl	8004dec <puts>
    }

    // Her 1 saniyede bir GPS verilerini kontrol et ve yazdır
    HAL_Delay(1000);
 8001e6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e72:	f000 faf5 	bl	8002460 <HAL_Delay>
    if (lwgps_is_valid(&gps)) {
 8001e76:	e797      	b.n	8001da8 <main+0x34>
 8001e78:	20000240 	.word	0x20000240
 8001e7c:	20000402 	.word	0x20000402
 8001e80:	200001f4 	.word	0x200001f4
 8001e84:	20000018 	.word	0x20000018
 8001e88:	08006eb0 	.word	0x08006eb0
 8001e8c:	08006ec4 	.word	0x08006ec4
 8001e90:	08006ed8 	.word	0x08006ed8
 8001e94:	08006eec 	.word	0x08006eec
 8001e98:	08006f04 	.word	0x08006f04
 8001e9c:	08006f18 	.word	0x08006f18
 8001ea0:	08006f30 	.word	0x08006f30
 8001ea4:	08006f48 	.word	0x08006f48

08001ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b094      	sub	sp, #80	@ 0x50
 8001eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	f107 0320 	add.w	r3, r7, #32
 8001eb2:	2230      	movs	r2, #48	@ 0x30
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 f92c 	bl	8005114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <SystemClock_Config+0xb4>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <SystemClock_Config+0xb4>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001edc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f5c <SystemClock_Config+0xb4>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <SystemClock_Config+0xb8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f60 <SystemClock_Config+0xb8>)
 8001ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <SystemClock_Config+0xb8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f04:	2302      	movs	r3, #2
 8001f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f14:	f107 0320 	add.w	r3, r7, #32
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fe05 	bl	8002b28 <HAL_RCC_OscConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001f24:	f000 f870 	bl	8002008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f28:	230f      	movs	r3, #15
 8001f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 f868 	bl	8003018 <HAL_RCC_ClockConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001f4e:	f000 f85b 	bl	8002008 <Error_Handler>
  }
}
 8001f52:	bf00      	nop
 8001f54:	3750      	adds	r7, #80	@ 0x50
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000

08001f64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <MX_USART3_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600; // L86 varsayılanı
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX; // Hem TX hem RX kullanılacak
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_USART3_UART_Init+0x4c>)
 8001f9c:	f001 fa1c 	bl	80033d8 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f000 f82f 	bl	8002008 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
  // UART3 için kesme etkinleştirildiğinden emin olun (CubeMX'te NVIC kısmından).
  // Eğer değilse, burada HAL_NVIC_EnableIRQ(USART3_IRQn); eklemeniz gerekebilir.
  /* USER CODE END USART3_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200001f4 	.word	0x200001f4
 8001fb4:	40004800 	.word	0x40004800

08001fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <MX_GPIO_Init+0x4c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002004 <MX_GPIO_Init+0x4c>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <MX_GPIO_Init+0x4c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_GPIO_Init+0x4c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <MX_GPIO_Init+0x4c>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <MX_GPIO_Init+0x4c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <Error_Handler+0x8>

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	4a0f      	ldr	r2, [pc, #60]	@ (8002060 <HAL_MspInit+0x4c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002028:	6453      	str	r3, [r2, #68]	@ 0x44
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <HAL_MspInit+0x4c>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	@ 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1d      	ldr	r2, [pc, #116]	@ (80020f8 <HAL_UART_MspInit+0x94>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d134      	bne.n	80020f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <HAL_UART_MspInit+0x98>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <HAL_UART_MspInit+0x98>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <HAL_UART_MspInit+0x98>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_UART_MspInit+0x98>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <HAL_UART_MspInit+0x98>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b2:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <HAL_UART_MspInit+0x98>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020d0:	2307      	movs	r3, #7
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	4809      	ldr	r0, [pc, #36]	@ (8002100 <HAL_UART_MspInit+0x9c>)
 80020dc:	f000 fb88 	bl	80027f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2027      	movs	r0, #39	@ 0x27
 80020e6:	f000 faba 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020ea:	2027      	movs	r0, #39	@ 0x27
 80020ec:	f000 fad3 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	@ 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40004800 	.word	0x40004800
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <NMI_Handler+0x4>

0800210c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <MemManage_Handler+0x4>

0800211c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <UsageFault_Handler+0x4>

0800212c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215a:	f000 f961 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <USART3_IRQHandler+0x10>)
 800216a:	f001 f9ab 	bl	80034c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200001f4 	.word	0x200001f4

08002178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return 1;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_kill>:

int _kill(int pid, int sig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002192:	f003 f823 	bl	80051dc <__errno>
 8002196:	4603      	mov	r3, r0
 8002198:	2216      	movs	r2, #22
 800219a:	601a      	str	r2, [r3, #0]
  return -1;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_exit>:

void _exit (int status)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffe7 	bl	8002188 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ba:	bf00      	nop
 80021bc:	e7fd      	b.n	80021ba <_exit+0x12>

080021be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e00a      	b.n	80021e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021d0:	f3af 8000 	nop.w
 80021d4:	4601      	mov	r1, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	b2ca      	uxtb	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbf0      	blt.n	80021d0 <_read+0x12>
  }

  return len;
 80021ee:	687b      	ldr	r3, [r7, #4]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e009      	b.n	800221e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	60ba      	str	r2, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbf1      	blt.n	800220a <_write+0x12>
  }
  return len;
 8002226:	687b      	ldr	r3, [r7, #4]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_close>:

int _close(int file)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002258:	605a      	str	r2, [r3, #4]
  return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_isatty>:

int _isatty(int file)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f002 ff88 	bl	80051dc <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20020000 	.word	0x20020000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	20000404 	.word	0x20000404
 8002300:	20000558 	.word	0x20000558

08002304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <SystemInit+0x20>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <SystemInit+0x20>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002360 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800232c:	f7ff ffea 	bl	8002304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002330:	480c      	ldr	r0, [pc, #48]	@ (8002364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002332:	490d      	ldr	r1, [pc, #52]	@ (8002368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002338:	e002      	b.n	8002340 <LoopCopyDataInit>

0800233a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800233c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233e:	3304      	adds	r3, #4

08002340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002344:	d3f9      	bcc.n	800233a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002348:	4c0a      	ldr	r4, [pc, #40]	@ (8002374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800234c:	e001      	b.n	8002352 <LoopFillZerobss>

0800234e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002350:	3204      	adds	r2, #4

08002352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002354:	d3fb      	bcc.n	800234e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002356:	f002 ff47 	bl	80051e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235a:	f7ff fd0b 	bl	8001d74 <main>
  bx  lr    
 800235e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800236c:	08007308 	.word	0x08007308
  ldr r2, =_sbss
 8002370:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002374:	20000558 	.word	0x20000558

08002378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <HAL_Init+0x40>)
 8002386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800238a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <HAL_Init+0x40>)
 8002392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002398:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a07      	ldr	r2, [pc, #28]	@ (80023bc <HAL_Init+0x40>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f000 f94f 	bl	8002648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023aa:	200f      	movs	r0, #15
 80023ac:	f000 f808 	bl	80023c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b0:	f7ff fe30 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_InitTick+0x54>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_InitTick+0x58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f967 	bl	80026b2 <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00e      	b.n	800240c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d80a      	bhi.n	800240a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f000 f92f 	bl	800265e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4a06      	ldr	r2, [pc, #24]	@ (800241c <HAL_InitTick+0x5c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000000 	.word	0x20000000
 8002418:	20000008 	.word	0x20000008
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000008 	.word	0x20000008
 8002444:	20000408 	.word	0x20000408

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000408 	.word	0x20000408

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_Delay+0x44>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000008 	.word	0x20000008

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	@ (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	@ (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	@ (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	@ 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	@ 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002614:	d301      	bcc.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e00f      	b.n	800263a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <SysTick_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	210f      	movs	r1, #15
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f7ff ff8e 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262c:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <SysTick_Config+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002632:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <SysTick_Config+0x40>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff29 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002670:	f7ff ff3e 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 8002674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f7ff ff8e 	bl	800259c <NVIC_EncodePriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5d 	bl	8002548 <__NVIC_SetPriority>
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff31 	bl	800250c <__NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffa2 	bl	8002604 <SysTick_Config>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff feb6 	bl	8002448 <HAL_GetTick>
 80026dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d008      	beq.n	80026fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2280      	movs	r2, #128	@ 0x80
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e052      	b.n	80027a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0216 	bic.w	r2, r2, #22
 800270a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800271a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <HAL_DMA_Abort+0x62>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0208 	bic.w	r2, r2, #8
 800273a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274c:	e013      	b.n	8002776 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800274e:	f7ff fe7b 	bl	8002448 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b05      	cmp	r3, #5
 800275a:	d90c      	bls.n	8002776 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2203      	movs	r2, #3
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e015      	b.n	80027a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e4      	bne.n	800274e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002788:	223f      	movs	r2, #63	@ 0x3f
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d004      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2280      	movs	r2, #128	@ 0x80
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e00c      	b.n	80027e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2205      	movs	r2, #5
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	@ 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e16b      	b.n	8002ae4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 815a 	bne.w	8002ade <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d005      	beq.n	8002842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	2b02      	cmp	r3, #2
 8002840:	d130      	bne.n	80028a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0201 	and.w	r2, r3, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d017      	beq.n	80028e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b4 	beq.w	8002ade <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b60      	ldr	r3, [pc, #384]	@ (8002afc <HAL_GPIO_Init+0x30c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	4a5f      	ldr	r2, [pc, #380]	@ (8002afc <HAL_GPIO_Init+0x30c>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002984:	6453      	str	r3, [r2, #68]	@ 0x44
 8002986:	4b5d      	ldr	r3, [pc, #372]	@ (8002afc <HAL_GPIO_Init+0x30c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002992:	4a5b      	ldr	r2, [pc, #364]	@ (8002b00 <HAL_GPIO_Init+0x310>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_GPIO_Init+0x314>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	@ (8002b08 <HAL_GPIO_Init+0x318>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	@ (8002b0c <HAL_GPIO_Init+0x31c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x21a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <HAL_GPIO_Init+0x324>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x216>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002b18 <HAL_GPIO_Init+0x328>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x212>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4c      	ldr	r2, [pc, #304]	@ (8002b1c <HAL_GPIO_Init+0x32c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x20e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b20 <HAL_GPIO_Init+0x330>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x20a>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00e      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fa:	2308      	movs	r3, #8
 80029fc:	e00c      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00a      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e008      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e004      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a16:	2300      	movs	r3, #0
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	f002 0203 	and.w	r2, r2, #3
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	4093      	lsls	r3, r2
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a28:	4935      	ldr	r1, [pc, #212]	@ (8002b00 <HAL_GPIO_Init+0x310>)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	3302      	adds	r3, #2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a36:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <HAL_GPIO_Init+0x334>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5a:	4a32      	ldr	r2, [pc, #200]	@ (8002b24 <HAL_GPIO_Init+0x334>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a60:	4b30      	ldr	r3, [pc, #192]	@ (8002b24 <HAL_GPIO_Init+0x334>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a84:	4a27      	ldr	r2, [pc, #156]	@ (8002b24 <HAL_GPIO_Init+0x334>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8a:	4b26      	ldr	r3, [pc, #152]	@ (8002b24 <HAL_GPIO_Init+0x334>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aae:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <HAL_GPIO_Init+0x334>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <HAL_GPIO_Init+0x334>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad8:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <HAL_GPIO_Init+0x334>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	f67f ae90 	bls.w	800280c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3724      	adds	r7, #36	@ 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40020000 	.word	0x40020000
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	40020800 	.word	0x40020800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40021400 	.word	0x40021400
 8002b1c:	40021800 	.word	0x40021800
 8002b20:	40021c00 	.word	0x40021c00
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e267      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d075      	beq.n	8002c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b46:	4b88      	ldr	r3, [pc, #544]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d00c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b52:	4b85      	ldr	r3, [pc, #532]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d112      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b82      	ldr	r3, [pc, #520]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05b      	beq.n	8002c30 <HAL_RCC_OscConfig+0x108>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d157      	bne.n	8002c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e242      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x74>
 8002b8e:	4b76      	ldr	r3, [pc, #472]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a75      	ldr	r2, [pc, #468]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x98>
 8002ba6:	4b70      	ldr	r3, [pc, #448]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a6f      	ldr	r2, [pc, #444]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002bc0:	4b69      	ldr	r3, [pc, #420]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a68      	ldr	r2, [pc, #416]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b66      	ldr	r3, [pc, #408]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a65      	ldr	r2, [pc, #404]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7ff fc32 	bl	8002448 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7ff fc2e 	bl	8002448 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e207      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7ff fc1e 	bl	8002448 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7ff fc1a 	bl	8002448 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	@ 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1f3      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	4b51      	ldr	r3, [pc, #324]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0xe8>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4a:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b44      	ldr	r3, [pc, #272]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	4b41      	ldr	r3, [pc, #260]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x152>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1c7      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4937      	ldr	r1, [pc, #220]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c98:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <HAL_RCC_OscConfig+0x244>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7ff fbd3 	bl	8002448 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7ff fbcf 	bl	8002448 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1a8      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b28      	ldr	r3, [pc, #160]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4925      	ldr	r1, [pc, #148]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b24      	ldr	r3, [pc, #144]	@ (8002d6c <HAL_RCC_OscConfig+0x244>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7ff fbb2 	bl	8002448 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7ff fbae 	bl	8002448 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e187      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d036      	beq.n	8002d80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <HAL_RCC_OscConfig+0x248>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7ff fb92 	bl	8002448 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7ff fb8e 	bl	8002448 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e167      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x200>
 8002d46:	e01b      	b.n	8002d80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d48:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_OscConfig+0x248>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7ff fb7b 	bl	8002448 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e00e      	b.n	8002d74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d56:	f7ff fb77 	bl	8002448 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d907      	bls.n	8002d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e150      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	42470000 	.word	0x42470000
 8002d70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ea      	bne.n	8002d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8097 	beq.w	8002ebc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4b81      	ldr	r3, [pc, #516]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b7d      	ldr	r3, [pc, #500]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	4a7c      	ldr	r2, [pc, #496]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dae:	4b7a      	ldr	r3, [pc, #488]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b77      	ldr	r3, [pc, #476]	@ (8002f9c <HAL_RCC_OscConfig+0x474>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d118      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dca:	4b74      	ldr	r3, [pc, #464]	@ (8002f9c <HAL_RCC_OscConfig+0x474>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a73      	ldr	r2, [pc, #460]	@ (8002f9c <HAL_RCC_OscConfig+0x474>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7ff fb37 	bl	8002448 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dde:	f7ff fb33 	bl	8002448 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e10c      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f9c <HAL_RCC_OscConfig+0x474>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2ea>
 8002e04:	4b64      	ldr	r3, [pc, #400]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e08:	4a63      	ldr	r2, [pc, #396]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e10:	e01c      	b.n	8002e4c <HAL_RCC_OscConfig+0x324>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x30c>
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e26:	4b5c      	ldr	r3, [pc, #368]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e32:	e00b      	b.n	8002e4c <HAL_RCC_OscConfig+0x324>
 8002e34:	4b58      	ldr	r3, [pc, #352]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e38:	4a57      	ldr	r2, [pc, #348]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e40:	4b55      	ldr	r3, [pc, #340]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e44:	4a54      	ldr	r2, [pc, #336]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f023 0304 	bic.w	r3, r3, #4
 8002e4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d015      	beq.n	8002e80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7ff faf8 	bl	8002448 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7ff faf4 	bl	8002448 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0cb      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	4b49      	ldr	r3, [pc, #292]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ee      	beq.n	8002e5c <HAL_RCC_OscConfig+0x334>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e80:	f7ff fae2 	bl	8002448 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7ff fade 	bl	8002448 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0b5      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ee      	bne.n	8002e88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb0:	4b39      	ldr	r3, [pc, #228]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	4a38      	ldr	r2, [pc, #224]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a1 	beq.w	8003008 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec6:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d05c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d141      	bne.n	8002f5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b31      	ldr	r3, [pc, #196]	@ (8002fa0 <HAL_RCC_OscConfig+0x478>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fab2 	bl	8002448 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7ff faae 	bl	8002448 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e087      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	4b27      	ldr	r3, [pc, #156]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	019b      	lsls	r3, r3, #6
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	491b      	ldr	r1, [pc, #108]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f30:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_RCC_OscConfig+0x478>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f36:	f7ff fa87 	bl	8002448 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7ff fa83 	bl	8002448 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e05c      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x416>
 8002f5c:	e054      	b.n	8003008 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <HAL_RCC_OscConfig+0x478>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff fa70 	bl	8002448 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7ff fa6c 	bl	8002448 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e045      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_RCC_OscConfig+0x470>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x444>
 8002f8a:	e03d      	b.n	8003008 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e038      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x4ec>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d028      	beq.n	8003004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d121      	bne.n	8003004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d11a      	bne.n	8003004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d111      	bne.n	8003004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	3b01      	subs	r3, #1
 8002fee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800

08003018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0cc      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800302c:	4b68      	ldr	r3, [pc, #416]	@ (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d90c      	bls.n	8003054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b65      	ldr	r3, [pc, #404]	@ (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b63      	ldr	r3, [pc, #396]	@ (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0b8      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800306c:	4b59      	ldr	r3, [pc, #356]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a58      	ldr	r2, [pc, #352]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003076:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003084:	4b53      	ldr	r3, [pc, #332]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a52      	ldr	r2, [pc, #328]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800308e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b50      	ldr	r3, [pc, #320]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	494d      	ldr	r1, [pc, #308]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d044      	beq.n	8003138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b47      	ldr	r3, [pc, #284]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d119      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	4b3f      	ldr	r3, [pc, #252]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b3b      	ldr	r3, [pc, #236]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e067      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f6:	4b37      	ldr	r3, [pc, #220]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4934      	ldr	r1, [pc, #208]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003108:	f7ff f99e 	bl	8002448 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	e00a      	b.n	8003126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7ff f99a 	bl	8002448 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e04f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	4b2b      	ldr	r3, [pc, #172]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 020c 	and.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	429a      	cmp	r2, r3
 8003136:	d1eb      	bne.n	8003110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b25      	ldr	r3, [pc, #148]	@ (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d20c      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b22      	ldr	r3, [pc, #136]	@ (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b20      	ldr	r3, [pc, #128]	@ (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e032      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316c:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4916      	ldr	r1, [pc, #88]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800318a:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	490e      	ldr	r1, [pc, #56]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800319e:	f000 f821 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	490a      	ldr	r1, [pc, #40]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	5ccb      	ldrb	r3, [r1, r3]
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031ba:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f8fe 	bl	80023c0 <HAL_InitTick>

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00
 80031d4:	40023800 	.word	0x40023800
 80031d8:	08006f70 	.word	0x08006f70
 80031dc:	20000000 	.word	0x20000000
 80031e0:	20000004 	.word	0x20000004

080031e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e8:	b090      	sub	sp, #64	@ 0x40
 80031ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fc:	4b59      	ldr	r3, [pc, #356]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x180>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b08      	cmp	r3, #8
 8003206:	d00d      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x40>
 8003208:	2b08      	cmp	r3, #8
 800320a:	f200 80a1 	bhi.w	8003350 <HAL_RCC_GetSysClockFreq+0x16c>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x34>
 8003212:	2b04      	cmp	r3, #4
 8003214:	d003      	beq.n	800321e <HAL_RCC_GetSysClockFreq+0x3a>
 8003216:	e09b      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x184>)
 800321a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800321c:	e09b      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800321e:	4b53      	ldr	r3, [pc, #332]	@ (800336c <HAL_RCC_GetSysClockFreq+0x188>)
 8003220:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003222:	e098      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003224:	4b4f      	ldr	r3, [pc, #316]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x180>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800322c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800322e:	4b4d      	ldr	r3, [pc, #308]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x180>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d028      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323a:	4b4a      	ldr	r3, [pc, #296]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x180>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	2200      	movs	r2, #0
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	627a      	str	r2, [r7, #36]	@ 0x24
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800324c:	2100      	movs	r1, #0
 800324e:	4b47      	ldr	r3, [pc, #284]	@ (800336c <HAL_RCC_GetSysClockFreq+0x188>)
 8003250:	fb03 f201 	mul.w	r2, r3, r1
 8003254:	2300      	movs	r3, #0
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	4413      	add	r3, r2
 800325c:	4a43      	ldr	r2, [pc, #268]	@ (800336c <HAL_RCC_GetSysClockFreq+0x188>)
 800325e:	fba0 1202 	umull	r1, r2, r0, r2
 8003262:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003264:	460a      	mov	r2, r1
 8003266:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800326a:	4413      	add	r3, r2
 800326c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800326e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003270:	2200      	movs	r2, #0
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	61fa      	str	r2, [r7, #28]
 8003276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800327a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800327e:	f7fd fc93 	bl	8000ba8 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4613      	mov	r3, r2
 8003288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800328a:	e053      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328c:	4b35      	ldr	r3, [pc, #212]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x180>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	2200      	movs	r2, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	617a      	str	r2, [r7, #20]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800329e:	f04f 0b00 	mov.w	fp, #0
 80032a2:	4652      	mov	r2, sl
 80032a4:	465b      	mov	r3, fp
 80032a6:	f04f 0000 	mov.w	r0, #0
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b4:	0150      	lsls	r0, r2, #5
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	ebb2 080a 	subs.w	r8, r2, sl
 80032be:	eb63 090b 	sbc.w	r9, r3, fp
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032d6:	ebb2 0408 	subs.w	r4, r2, r8
 80032da:	eb63 0509 	sbc.w	r5, r3, r9
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	00eb      	lsls	r3, r5, #3
 80032e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ec:	00e2      	lsls	r2, r4, #3
 80032ee:	4614      	mov	r4, r2
 80032f0:	461d      	mov	r5, r3
 80032f2:	eb14 030a 	adds.w	r3, r4, sl
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	eb45 030b 	adc.w	r3, r5, fp
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800330a:	4629      	mov	r1, r5
 800330c:	028b      	lsls	r3, r1, #10
 800330e:	4621      	mov	r1, r4
 8003310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003314:	4621      	mov	r1, r4
 8003316:	028a      	lsls	r2, r1, #10
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	2200      	movs	r2, #0
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	60fa      	str	r2, [r7, #12]
 8003324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003328:	f7fd fc3e 	bl	8000ba8 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003334:	4b0b      	ldr	r3, [pc, #44]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x180>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	3301      	adds	r3, #1
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003344:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800334e:	e002      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x184>)
 8003352:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003358:	4618      	mov	r0, r3
 800335a:	3740      	adds	r7, #64	@ 0x40
 800335c:	46bd      	mov	sp, r7
 800335e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	00f42400 	.word	0x00f42400
 800336c:	017d7840 	.word	0x017d7840

08003370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003374:	4b03      	ldr	r3, [pc, #12]	@ (8003384 <HAL_RCC_GetHCLKFreq+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000000 	.word	0x20000000

08003388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800338c:	f7ff fff0 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	0a9b      	lsrs	r3, r3, #10
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	@ (80033ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08006f80 	.word	0x08006f80

080033b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033b4:	f7ff ffdc 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	0b5b      	lsrs	r3, r3, #13
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4903      	ldr	r1, [pc, #12]	@ (80033d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40023800 	.word	0x40023800
 80033d4:	08006f80 	.word	0x08006f80

080033d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e042      	b.n	8003470 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fe30 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	@ 0x24
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800341a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fcef 	bl	8003e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	d112      	bne.n	80034b8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_UART_Receive_IT+0x26>
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e00b      	b.n	80034ba <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fad2 	bl	8003a58 <UART_Start_Receive_IT>
 80034b4:	4603      	mov	r3, r0
 80034b6:	e000      	b.n	80034ba <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b0ba      	sub	sp, #232	@ 0xe8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_UART_IRQHandler+0x66>
 8003516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fbae 	bl	8003c84 <UART_Receive_IT>
      return;
 8003528:	e273      	b.n	8003a12 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800352a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80de 	beq.w	80036f0 <HAL_UART_IRQHandler+0x22c>
 8003534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003544:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80d1 	beq.w	80036f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_UART_IRQHandler+0xae>
 800355a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_UART_IRQHandler+0xd2>
 800357e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_UART_IRQHandler+0xf6>
 80035a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f043 0204 	orr.w	r2, r3, #4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d011      	beq.n	80035ea <HAL_UART_IRQHandler+0x126>
 80035c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f043 0208 	orr.w	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 820a 	beq.w	8003a08 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_UART_IRQHandler+0x14e>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb39 	bl	8003c84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_UART_IRQHandler+0x17a>
 8003636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04f      	beq.n	80036de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa44 	bl	8003acc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364e:	2b40      	cmp	r3, #64	@ 0x40
 8003650:	d141      	bne.n	80036d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003668:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800366c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800367e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800368a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1d9      	bne.n	8003652 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d013      	beq.n	80036ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036aa:	4a8a      	ldr	r2, [pc, #552]	@ (80038d4 <HAL_UART_IRQHandler+0x410>)
 80036ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f879 	bl	80027aa <HAL_DMA_Abort_IT>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036c8:	4610      	mov	r0, r2
 80036ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	e00e      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9ac 	bl	8003a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	e00a      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9a8 	bl	8003a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e006      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9a4 	bl	8003a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80036ea:	e18d      	b.n	8003a08 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	bf00      	nop
    return;
 80036ee:	e18b      	b.n	8003a08 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 8167 	bne.w	80039c8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8160 	beq.w	80039c8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8159 	beq.w	80039c8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003736:	2b40      	cmp	r3, #64	@ 0x40
 8003738:	f040 80ce 	bne.w	80038d8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a9 	beq.w	80038a4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800375a:	429a      	cmp	r2, r3
 800375c:	f080 80a2 	bcs.w	80038a4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003766:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003772:	f000 8088 	beq.w	8003886 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800378c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1d9      	bne.n	8003776 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3314      	adds	r3, #20
 80037c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80037f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e1      	bne.n	80037c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3314      	adds	r3, #20
 8003804:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800380e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003814:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3314      	adds	r3, #20
 800381e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003822:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003824:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003828:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e3      	bne.n	80037fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003856:	f023 0310 	bic.w	r3, r3, #16
 800385a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003868:	65ba      	str	r2, [r7, #88]	@ 0x58
 800386a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800386e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e3      	bne.n	8003844 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe ff22 	bl	80026ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003894:	b29b      	uxth	r3, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	b29b      	uxth	r3, r3
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8cf 	bl	8003a40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80038a2:	e0b3      	b.n	8003a0c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f040 80ad 	bne.w	8003a0c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038bc:	f040 80a6 	bne.w	8003a0c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8b7 	bl	8003a40 <HAL_UARTEx_RxEventCallback>
      return;
 80038d2:	e09b      	b.n	8003a0c <HAL_UART_IRQHandler+0x548>
 80038d4:	08003b93 	.word	0x08003b93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 808e 	beq.w	8003a10 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80038f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8089 	beq.w	8003a10 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800390e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003914:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003922:	647a      	str	r2, [r7, #68]	@ 0x44
 8003924:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003928:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e3      	bne.n	80038fe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	623b      	str	r3, [r7, #32]
   return(result);
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3314      	adds	r3, #20
 8003956:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800395a:	633a      	str	r2, [r7, #48]	@ 0x30
 800395c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e3      	bne.n	8003936 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	60fb      	str	r3, [r7, #12]
   return(result);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0310 	bic.w	r3, r3, #16
 8003992:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039a0:	61fa      	str	r2, [r7, #28]
 80039a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	69b9      	ldr	r1, [r7, #24]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	617b      	str	r3, [r7, #20]
   return(result);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e3      	bne.n	800397c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039be:	4619      	mov	r1, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f83d 	bl	8003a40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039c6:	e023      	b.n	8003a10 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_UART_IRQHandler+0x524>
 80039d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8e7 	bl	8003bb4 <UART_Transmit_IT>
    return;
 80039e6:	e014      	b.n	8003a12 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00e      	beq.n	8003a12 <HAL_UART_IRQHandler+0x54e>
 80039f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f927 	bl	8003c54 <UART_EndTransmit_IT>
    return;
 8003a06:	e004      	b.n	8003a12 <HAL_UART_IRQHandler+0x54e>
    return;
 8003a08:	bf00      	nop
 8003a0a:	e002      	b.n	8003a12 <HAL_UART_IRQHandler+0x54e>
      return;
 8003a0c:	bf00      	nop
 8003a0e:	e000      	b.n	8003a12 <HAL_UART_IRQHandler+0x54e>
      return;
 8003a10:	bf00      	nop
  }
}
 8003a12:	37e8      	adds	r7, #232	@ 0xe8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	88fa      	ldrh	r2, [r7, #6]
 8003a76:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2222      	movs	r2, #34	@ 0x22
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0220 	orr.w	r2, r2, #32
 8003abc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b095      	sub	sp, #84	@ 0x54
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003af4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003afa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3314      	adds	r3, #20
 8003b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e5      	bne.n	8003b08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d119      	bne.n	8003b78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b64:	61ba      	str	r2, [r7, #24]
 8003b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	613b      	str	r3, [r7, #16]
   return(result);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b86:	bf00      	nop
 8003b88:	3754      	adds	r7, #84	@ 0x54
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff ff40 	bl	8003a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b21      	cmp	r3, #33	@ 0x21
 8003bc6:	d13e      	bne.n	8003c46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd0:	d114      	bne.n	8003bfc <UART_Transmit_IT+0x48>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d110      	bne.n	8003bfc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]
 8003bfa:	e008      	b.n	8003c0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	1c59      	adds	r1, r3, #1
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6211      	str	r1, [r2, #32]
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e000      	b.n	8003c48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff fecf 	bl	8003a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	@ 0x30
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b22      	cmp	r3, #34	@ 0x22
 8003c9e:	f040 80aa 	bne.w	8003df6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003caa:	d115      	bne.n	8003cd8 <UART_Receive_IT+0x54>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d111      	bne.n	8003cd8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd0:	1c9a      	adds	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cd6:	e024      	b.n	8003d22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce6:	d007      	beq.n	8003cf8 <UART_Receive_IT+0x74>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <UART_Receive_IT+0x82>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e008      	b.n	8003d18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d15d      	bne.n	8003df2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0220 	bic.w	r2, r2, #32
 8003d44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d135      	bne.n	8003de8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	613b      	str	r3, [r7, #16]
   return(result);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f023 0310 	bic.w	r3, r3, #16
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da2:	623a      	str	r2, [r7, #32]
 8003da4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	69f9      	ldr	r1, [r7, #28]
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e5      	bne.n	8003d82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d10a      	bne.n	8003dda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fe2d 	bl	8003a40 <HAL_UARTEx_RxEventCallback>
 8003de6:	e002      	b.n	8003dee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fd ff83 	bl	8001cf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e002      	b.n	8003df8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e000      	b.n	8003df8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
  }
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3730      	adds	r7, #48	@ 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e04:	b0c0      	sub	sp, #256	@ 0x100
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	68d9      	ldr	r1, [r3, #12]
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	ea40 0301 	orr.w	r3, r0, r1
 8003e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e58:	f021 010c 	bic.w	r1, r1, #12
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e66:	430b      	orrs	r3, r1
 8003e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7a:	6999      	ldr	r1, [r3, #24]
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	ea40 0301 	orr.w	r3, r0, r1
 8003e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d005      	beq.n	8003ea0 <UART_SetConfig+0xa0>
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80040d0 <UART_SetConfig+0x2d0>)
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d104      	bne.n	8003eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7ff fa86 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ea8:	e003      	b.n	8003eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eaa:	f7ff fa6d 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8003eae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ebc:	f040 810c 	bne.w	80040d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	1891      	adds	r1, r2, r2
 8003ed8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eda:	415b      	adcs	r3, r3
 8003edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	eb12 0801 	adds.w	r8, r2, r1
 8003ee8:	4629      	mov	r1, r5
 8003eea:	eb43 0901 	adc.w	r9, r3, r1
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f02:	4690      	mov	r8, r2
 8003f04:	4699      	mov	r9, r3
 8003f06:	4623      	mov	r3, r4
 8003f08:	eb18 0303 	adds.w	r3, r8, r3
 8003f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f10:	462b      	mov	r3, r5
 8003f12:	eb49 0303 	adc.w	r3, r9, r3
 8003f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f2e:	460b      	mov	r3, r1
 8003f30:	18db      	adds	r3, r3, r3
 8003f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f34:	4613      	mov	r3, r2
 8003f36:	eb42 0303 	adc.w	r3, r2, r3
 8003f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f44:	f7fc fe30 	bl	8000ba8 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4b61      	ldr	r3, [pc, #388]	@ (80040d4 <UART_SetConfig+0x2d4>)
 8003f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	011c      	lsls	r4, r3, #4
 8003f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f68:	4642      	mov	r2, r8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	1891      	adds	r1, r2, r2
 8003f6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f70:	415b      	adcs	r3, r3
 8003f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f78:	4641      	mov	r1, r8
 8003f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f7e:	4649      	mov	r1, r9
 8003f80:	eb43 0b01 	adc.w	fp, r3, r1
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f98:	4692      	mov	sl, r2
 8003f9a:	469b      	mov	fp, r3
 8003f9c:	4643      	mov	r3, r8
 8003f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fda:	f7fc fde5 	bl	8000ba8 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80040d4 <UART_SetConfig+0x2d4>)
 8003fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2264      	movs	r2, #100	@ 0x64
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	1acb      	subs	r3, r1, r3
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ffa:	4b36      	ldr	r3, [pc, #216]	@ (80040d4 <UART_SetConfig+0x2d4>)
 8003ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004008:	441c      	add	r4, r3
 800400a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004014:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	1891      	adds	r1, r2, r2
 8004022:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004024:	415b      	adcs	r3, r3
 8004026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800402c:	4641      	mov	r1, r8
 800402e:	1851      	adds	r1, r2, r1
 8004030:	6339      	str	r1, [r7, #48]	@ 0x30
 8004032:	4649      	mov	r1, r9
 8004034:	414b      	adcs	r3, r1
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004044:	4659      	mov	r1, fp
 8004046:	00cb      	lsls	r3, r1, #3
 8004048:	4651      	mov	r1, sl
 800404a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404e:	4651      	mov	r1, sl
 8004050:	00ca      	lsls	r2, r1, #3
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	4603      	mov	r3, r0
 8004058:	4642      	mov	r2, r8
 800405a:	189b      	adds	r3, r3, r2
 800405c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004060:	464b      	mov	r3, r9
 8004062:	460a      	mov	r2, r1
 8004064:	eb42 0303 	adc.w	r3, r2, r3
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004078:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800407c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004080:	460b      	mov	r3, r1
 8004082:	18db      	adds	r3, r3, r3
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004086:	4613      	mov	r3, r2
 8004088:	eb42 0303 	adc.w	r3, r2, r3
 800408c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004096:	f7fc fd87 	bl	8000ba8 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <UART_SetConfig+0x2d4>)
 80040a0:	fba3 1302 	umull	r1, r3, r3, r2
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	2164      	movs	r1, #100	@ 0x64
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	3332      	adds	r3, #50	@ 0x32
 80040b2:	4a08      	ldr	r2, [pc, #32]	@ (80040d4 <UART_SetConfig+0x2d4>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	f003 0207 	and.w	r2, r3, #7
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4422      	add	r2, r4
 80040c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040c8:	e106      	b.n	80042d8 <UART_SetConfig+0x4d8>
 80040ca:	bf00      	nop
 80040cc:	40011000 	.word	0x40011000
 80040d0:	40011400 	.word	0x40011400
 80040d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040ea:	4642      	mov	r2, r8
 80040ec:	464b      	mov	r3, r9
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	6239      	str	r1, [r7, #32]
 80040f2:	415b      	adcs	r3, r3
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040fa:	4641      	mov	r1, r8
 80040fc:	1854      	adds	r4, r2, r1
 80040fe:	4649      	mov	r1, r9
 8004100:	eb43 0501 	adc.w	r5, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	00eb      	lsls	r3, r5, #3
 800410e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004112:	00e2      	lsls	r2, r4, #3
 8004114:	4614      	mov	r4, r2
 8004116:	461d      	mov	r5, r3
 8004118:	4643      	mov	r3, r8
 800411a:	18e3      	adds	r3, r4, r3
 800411c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004120:	464b      	mov	r3, r9
 8004122:	eb45 0303 	adc.w	r3, r5, r3
 8004126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004146:	4629      	mov	r1, r5
 8004148:	008b      	lsls	r3, r1, #2
 800414a:	4621      	mov	r1, r4
 800414c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004150:	4621      	mov	r1, r4
 8004152:	008a      	lsls	r2, r1, #2
 8004154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004158:	f7fc fd26 	bl	8000ba8 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4b60      	ldr	r3, [pc, #384]	@ (80042e4 <UART_SetConfig+0x4e4>)
 8004162:	fba3 2302 	umull	r2, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	011c      	lsls	r4, r3, #4
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004174:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	61b9      	str	r1, [r7, #24]
 8004184:	415b      	adcs	r3, r3
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418c:	4641      	mov	r1, r8
 800418e:	1851      	adds	r1, r2, r1
 8004190:	6139      	str	r1, [r7, #16]
 8004192:	4649      	mov	r1, r9
 8004194:	414b      	adcs	r3, r1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a4:	4659      	mov	r1, fp
 80041a6:	00cb      	lsls	r3, r1, #3
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ae:	4651      	mov	r1, sl
 80041b0:	00ca      	lsls	r2, r1, #3
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	4642      	mov	r2, r8
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041c0:	464b      	mov	r3, r9
 80041c2:	460a      	mov	r2, r1
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041e4:	4649      	mov	r1, r9
 80041e6:	008b      	lsls	r3, r1, #2
 80041e8:	4641      	mov	r1, r8
 80041ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ee:	4641      	mov	r1, r8
 80041f0:	008a      	lsls	r2, r1, #2
 80041f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041f6:	f7fc fcd7 	bl	8000ba8 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	4b38      	ldr	r3, [pc, #224]	@ (80042e4 <UART_SetConfig+0x4e4>)
 8004202:	fba3 2301 	umull	r2, r3, r3, r1
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2264      	movs	r2, #100	@ 0x64
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	1acb      	subs	r3, r1, r3
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	3332      	adds	r3, #50	@ 0x32
 8004214:	4a33      	ldr	r2, [pc, #204]	@ (80042e4 <UART_SetConfig+0x4e4>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004220:	441c      	add	r4, r3
 8004222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004226:	2200      	movs	r2, #0
 8004228:	673b      	str	r3, [r7, #112]	@ 0x70
 800422a:	677a      	str	r2, [r7, #116]	@ 0x74
 800422c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	415b      	adcs	r3, r3
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004240:	4641      	mov	r1, r8
 8004242:	1851      	adds	r1, r2, r1
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	4649      	mov	r1, r9
 8004248:	414b      	adcs	r3, r1
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004258:	4659      	mov	r1, fp
 800425a:	00cb      	lsls	r3, r1, #3
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004262:	4651      	mov	r1, sl
 8004264:	00ca      	lsls	r2, r1, #3
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	4603      	mov	r3, r0
 800426c:	4642      	mov	r2, r8
 800426e:	189b      	adds	r3, r3, r2
 8004270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004272:	464b      	mov	r3, r9
 8004274:	460a      	mov	r2, r1
 8004276:	eb42 0303 	adc.w	r3, r2, r3
 800427a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	663b      	str	r3, [r7, #96]	@ 0x60
 8004286:	667a      	str	r2, [r7, #100]	@ 0x64
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004294:	4649      	mov	r1, r9
 8004296:	008b      	lsls	r3, r1, #2
 8004298:	4641      	mov	r1, r8
 800429a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429e:	4641      	mov	r1, r8
 80042a0:	008a      	lsls	r2, r1, #2
 80042a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042a6:	f7fc fc7f 	bl	8000ba8 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4b0d      	ldr	r3, [pc, #52]	@ (80042e4 <UART_SetConfig+0x4e4>)
 80042b0:	fba3 1302 	umull	r1, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	2164      	movs	r1, #100	@ 0x64
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	3332      	adds	r3, #50	@ 0x32
 80042c2:	4a08      	ldr	r2, [pc, #32]	@ (80042e4 <UART_SetConfig+0x4e4>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	f003 020f 	and.w	r2, r3, #15
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4422      	add	r2, r4
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042de:	46bd      	mov	sp, r7
 80042e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e4:	51eb851f 	.word	0x51eb851f

080042e8 <__cvt>:
 80042e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	ec57 6b10 	vmov	r6, r7, d0
 80042f0:	2f00      	cmp	r7, #0
 80042f2:	460c      	mov	r4, r1
 80042f4:	4619      	mov	r1, r3
 80042f6:	463b      	mov	r3, r7
 80042f8:	bfbb      	ittet	lt
 80042fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80042fe:	461f      	movlt	r7, r3
 8004300:	2300      	movge	r3, #0
 8004302:	232d      	movlt	r3, #45	@ 0x2d
 8004304:	700b      	strb	r3, [r1, #0]
 8004306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004308:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800430c:	4691      	mov	r9, r2
 800430e:	f023 0820 	bic.w	r8, r3, #32
 8004312:	bfbc      	itt	lt
 8004314:	4632      	movlt	r2, r6
 8004316:	4616      	movlt	r6, r2
 8004318:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800431c:	d005      	beq.n	800432a <__cvt+0x42>
 800431e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004322:	d100      	bne.n	8004326 <__cvt+0x3e>
 8004324:	3401      	adds	r4, #1
 8004326:	2102      	movs	r1, #2
 8004328:	e000      	b.n	800432c <__cvt+0x44>
 800432a:	2103      	movs	r1, #3
 800432c:	ab03      	add	r3, sp, #12
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	ab02      	add	r3, sp, #8
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	ec47 6b10 	vmov	d0, r6, r7
 8004338:	4653      	mov	r3, sl
 800433a:	4622      	mov	r2, r4
 800433c:	f001 f814 	bl	8005368 <_dtoa_r>
 8004340:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004344:	4605      	mov	r5, r0
 8004346:	d119      	bne.n	800437c <__cvt+0x94>
 8004348:	f019 0f01 	tst.w	r9, #1
 800434c:	d00e      	beq.n	800436c <__cvt+0x84>
 800434e:	eb00 0904 	add.w	r9, r0, r4
 8004352:	2200      	movs	r2, #0
 8004354:	2300      	movs	r3, #0
 8004356:	4630      	mov	r0, r6
 8004358:	4639      	mov	r1, r7
 800435a:	f7fc fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800435e:	b108      	cbz	r0, 8004364 <__cvt+0x7c>
 8004360:	f8cd 900c 	str.w	r9, [sp, #12]
 8004364:	2230      	movs	r2, #48	@ 0x30
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	454b      	cmp	r3, r9
 800436a:	d31e      	bcc.n	80043aa <__cvt+0xc2>
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004370:	1b5b      	subs	r3, r3, r5
 8004372:	4628      	mov	r0, r5
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	b004      	add	sp, #16
 8004378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004380:	eb00 0904 	add.w	r9, r0, r4
 8004384:	d1e5      	bne.n	8004352 <__cvt+0x6a>
 8004386:	7803      	ldrb	r3, [r0, #0]
 8004388:	2b30      	cmp	r3, #48	@ 0x30
 800438a:	d10a      	bne.n	80043a2 <__cvt+0xba>
 800438c:	2200      	movs	r2, #0
 800438e:	2300      	movs	r3, #0
 8004390:	4630      	mov	r0, r6
 8004392:	4639      	mov	r1, r7
 8004394:	f7fc fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8004398:	b918      	cbnz	r0, 80043a2 <__cvt+0xba>
 800439a:	f1c4 0401 	rsb	r4, r4, #1
 800439e:	f8ca 4000 	str.w	r4, [sl]
 80043a2:	f8da 3000 	ldr.w	r3, [sl]
 80043a6:	4499      	add	r9, r3
 80043a8:	e7d3      	b.n	8004352 <__cvt+0x6a>
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	9103      	str	r1, [sp, #12]
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e7d9      	b.n	8004366 <__cvt+0x7e>

080043b2 <__exponent>:
 80043b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b4:	2900      	cmp	r1, #0
 80043b6:	bfba      	itte	lt
 80043b8:	4249      	neglt	r1, r1
 80043ba:	232d      	movlt	r3, #45	@ 0x2d
 80043bc:	232b      	movge	r3, #43	@ 0x2b
 80043be:	2909      	cmp	r1, #9
 80043c0:	7002      	strb	r2, [r0, #0]
 80043c2:	7043      	strb	r3, [r0, #1]
 80043c4:	dd29      	ble.n	800441a <__exponent+0x68>
 80043c6:	f10d 0307 	add.w	r3, sp, #7
 80043ca:	461d      	mov	r5, r3
 80043cc:	270a      	movs	r7, #10
 80043ce:	461a      	mov	r2, r3
 80043d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80043d4:	fb07 1416 	mls	r4, r7, r6, r1
 80043d8:	3430      	adds	r4, #48	@ 0x30
 80043da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80043de:	460c      	mov	r4, r1
 80043e0:	2c63      	cmp	r4, #99	@ 0x63
 80043e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80043e6:	4631      	mov	r1, r6
 80043e8:	dcf1      	bgt.n	80043ce <__exponent+0x1c>
 80043ea:	3130      	adds	r1, #48	@ 0x30
 80043ec:	1e94      	subs	r4, r2, #2
 80043ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043f2:	1c41      	adds	r1, r0, #1
 80043f4:	4623      	mov	r3, r4
 80043f6:	42ab      	cmp	r3, r5
 80043f8:	d30a      	bcc.n	8004410 <__exponent+0x5e>
 80043fa:	f10d 0309 	add.w	r3, sp, #9
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	42ac      	cmp	r4, r5
 8004402:	bf88      	it	hi
 8004404:	2300      	movhi	r3, #0
 8004406:	3302      	adds	r3, #2
 8004408:	4403      	add	r3, r0
 800440a:	1a18      	subs	r0, r3, r0
 800440c:	b003      	add	sp, #12
 800440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004410:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004414:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004418:	e7ed      	b.n	80043f6 <__exponent+0x44>
 800441a:	2330      	movs	r3, #48	@ 0x30
 800441c:	3130      	adds	r1, #48	@ 0x30
 800441e:	7083      	strb	r3, [r0, #2]
 8004420:	70c1      	strb	r1, [r0, #3]
 8004422:	1d03      	adds	r3, r0, #4
 8004424:	e7f1      	b.n	800440a <__exponent+0x58>
	...

08004428 <_printf_float>:
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	b08d      	sub	sp, #52	@ 0x34
 800442e:	460c      	mov	r4, r1
 8004430:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004434:	4616      	mov	r6, r2
 8004436:	461f      	mov	r7, r3
 8004438:	4605      	mov	r5, r0
 800443a:	f000 fe85 	bl	8005148 <_localeconv_r>
 800443e:	6803      	ldr	r3, [r0, #0]
 8004440:	9304      	str	r3, [sp, #16]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fb ff14 	bl	8000270 <strlen>
 8004448:	2300      	movs	r3, #0
 800444a:	930a      	str	r3, [sp, #40]	@ 0x28
 800444c:	f8d8 3000 	ldr.w	r3, [r8]
 8004450:	9005      	str	r0, [sp, #20]
 8004452:	3307      	adds	r3, #7
 8004454:	f023 0307 	bic.w	r3, r3, #7
 8004458:	f103 0208 	add.w	r2, r3, #8
 800445c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004460:	f8d4 b000 	ldr.w	fp, [r4]
 8004464:	f8c8 2000 	str.w	r2, [r8]
 8004468:	e9d3 8900 	ldrd	r8, r9, [r3]
 800446c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004470:	9307      	str	r3, [sp, #28]
 8004472:	f8cd 8018 	str.w	r8, [sp, #24]
 8004476:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800447a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800447e:	4b9c      	ldr	r3, [pc, #624]	@ (80046f0 <_printf_float+0x2c8>)
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	f7fc fb52 	bl	8000b2c <__aeabi_dcmpun>
 8004488:	bb70      	cbnz	r0, 80044e8 <_printf_float+0xc0>
 800448a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800448e:	4b98      	ldr	r3, [pc, #608]	@ (80046f0 <_printf_float+0x2c8>)
 8004490:	f04f 32ff 	mov.w	r2, #4294967295
 8004494:	f7fc fb2c 	bl	8000af0 <__aeabi_dcmple>
 8004498:	bb30      	cbnz	r0, 80044e8 <_printf_float+0xc0>
 800449a:	2200      	movs	r2, #0
 800449c:	2300      	movs	r3, #0
 800449e:	4640      	mov	r0, r8
 80044a0:	4649      	mov	r1, r9
 80044a2:	f7fc fb1b 	bl	8000adc <__aeabi_dcmplt>
 80044a6:	b110      	cbz	r0, 80044ae <_printf_float+0x86>
 80044a8:	232d      	movs	r3, #45	@ 0x2d
 80044aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044ae:	4a91      	ldr	r2, [pc, #580]	@ (80046f4 <_printf_float+0x2cc>)
 80044b0:	4b91      	ldr	r3, [pc, #580]	@ (80046f8 <_printf_float+0x2d0>)
 80044b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80044b6:	bf94      	ite	ls
 80044b8:	4690      	movls	r8, r2
 80044ba:	4698      	movhi	r8, r3
 80044bc:	2303      	movs	r3, #3
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	f02b 0304 	bic.w	r3, fp, #4
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	f04f 0900 	mov.w	r9, #0
 80044ca:	9700      	str	r7, [sp, #0]
 80044cc:	4633      	mov	r3, r6
 80044ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f9d2 	bl	800487c <_printf_common>
 80044d8:	3001      	adds	r0, #1
 80044da:	f040 808d 	bne.w	80045f8 <_printf_float+0x1d0>
 80044de:	f04f 30ff 	mov.w	r0, #4294967295
 80044e2:	b00d      	add	sp, #52	@ 0x34
 80044e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	4640      	mov	r0, r8
 80044ee:	4649      	mov	r1, r9
 80044f0:	f7fc fb1c 	bl	8000b2c <__aeabi_dcmpun>
 80044f4:	b140      	cbz	r0, 8004508 <_printf_float+0xe0>
 80044f6:	464b      	mov	r3, r9
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bfbc      	itt	lt
 80044fc:	232d      	movlt	r3, #45	@ 0x2d
 80044fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004502:	4a7e      	ldr	r2, [pc, #504]	@ (80046fc <_printf_float+0x2d4>)
 8004504:	4b7e      	ldr	r3, [pc, #504]	@ (8004700 <_printf_float+0x2d8>)
 8004506:	e7d4      	b.n	80044b2 <_printf_float+0x8a>
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800450e:	9206      	str	r2, [sp, #24]
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	d13b      	bne.n	800458c <_printf_float+0x164>
 8004514:	2306      	movs	r3, #6
 8004516:	6063      	str	r3, [r4, #4]
 8004518:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800451c:	2300      	movs	r3, #0
 800451e:	6022      	str	r2, [r4, #0]
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	ab0a      	add	r3, sp, #40	@ 0x28
 8004524:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004528:	ab09      	add	r3, sp, #36	@ 0x24
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	6861      	ldr	r1, [r4, #4]
 800452e:	ec49 8b10 	vmov	d0, r8, r9
 8004532:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004536:	4628      	mov	r0, r5
 8004538:	f7ff fed6 	bl	80042e8 <__cvt>
 800453c:	9b06      	ldr	r3, [sp, #24]
 800453e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004540:	2b47      	cmp	r3, #71	@ 0x47
 8004542:	4680      	mov	r8, r0
 8004544:	d129      	bne.n	800459a <_printf_float+0x172>
 8004546:	1cc8      	adds	r0, r1, #3
 8004548:	db02      	blt.n	8004550 <_printf_float+0x128>
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	4299      	cmp	r1, r3
 800454e:	dd41      	ble.n	80045d4 <_printf_float+0x1ac>
 8004550:	f1aa 0a02 	sub.w	sl, sl, #2
 8004554:	fa5f fa8a 	uxtb.w	sl, sl
 8004558:	3901      	subs	r1, #1
 800455a:	4652      	mov	r2, sl
 800455c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004560:	9109      	str	r1, [sp, #36]	@ 0x24
 8004562:	f7ff ff26 	bl	80043b2 <__exponent>
 8004566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004568:	1813      	adds	r3, r2, r0
 800456a:	2a01      	cmp	r2, #1
 800456c:	4681      	mov	r9, r0
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	dc02      	bgt.n	8004578 <_printf_float+0x150>
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	07d2      	lsls	r2, r2, #31
 8004576:	d501      	bpl.n	800457c <_printf_float+0x154>
 8004578:	3301      	adds	r3, #1
 800457a:	6123      	str	r3, [r4, #16]
 800457c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0a2      	beq.n	80044ca <_printf_float+0xa2>
 8004584:	232d      	movs	r3, #45	@ 0x2d
 8004586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800458a:	e79e      	b.n	80044ca <_printf_float+0xa2>
 800458c:	9a06      	ldr	r2, [sp, #24]
 800458e:	2a47      	cmp	r2, #71	@ 0x47
 8004590:	d1c2      	bne.n	8004518 <_printf_float+0xf0>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1c0      	bne.n	8004518 <_printf_float+0xf0>
 8004596:	2301      	movs	r3, #1
 8004598:	e7bd      	b.n	8004516 <_printf_float+0xee>
 800459a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800459e:	d9db      	bls.n	8004558 <_printf_float+0x130>
 80045a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80045a4:	d118      	bne.n	80045d8 <_printf_float+0x1b0>
 80045a6:	2900      	cmp	r1, #0
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	dd0b      	ble.n	80045c4 <_printf_float+0x19c>
 80045ac:	6121      	str	r1, [r4, #16]
 80045ae:	b913      	cbnz	r3, 80045b6 <_printf_float+0x18e>
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	07d0      	lsls	r0, r2, #31
 80045b4:	d502      	bpl.n	80045bc <_printf_float+0x194>
 80045b6:	3301      	adds	r3, #1
 80045b8:	440b      	add	r3, r1
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80045be:	f04f 0900 	mov.w	r9, #0
 80045c2:	e7db      	b.n	800457c <_printf_float+0x154>
 80045c4:	b913      	cbnz	r3, 80045cc <_printf_float+0x1a4>
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	07d2      	lsls	r2, r2, #31
 80045ca:	d501      	bpl.n	80045d0 <_printf_float+0x1a8>
 80045cc:	3302      	adds	r3, #2
 80045ce:	e7f4      	b.n	80045ba <_printf_float+0x192>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e7f2      	b.n	80045ba <_printf_float+0x192>
 80045d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80045d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045da:	4299      	cmp	r1, r3
 80045dc:	db05      	blt.n	80045ea <_printf_float+0x1c2>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	6121      	str	r1, [r4, #16]
 80045e2:	07d8      	lsls	r0, r3, #31
 80045e4:	d5ea      	bpl.n	80045bc <_printf_float+0x194>
 80045e6:	1c4b      	adds	r3, r1, #1
 80045e8:	e7e7      	b.n	80045ba <_printf_float+0x192>
 80045ea:	2900      	cmp	r1, #0
 80045ec:	bfd4      	ite	le
 80045ee:	f1c1 0202 	rsble	r2, r1, #2
 80045f2:	2201      	movgt	r2, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	e7e0      	b.n	80045ba <_printf_float+0x192>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	055a      	lsls	r2, r3, #21
 80045fc:	d407      	bmi.n	800460e <_printf_float+0x1e6>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	4642      	mov	r2, r8
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	d12b      	bne.n	8004664 <_printf_float+0x23c>
 800460c:	e767      	b.n	80044de <_printf_float+0xb6>
 800460e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004612:	f240 80dd 	bls.w	80047d0 <_printf_float+0x3a8>
 8004616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800461a:	2200      	movs	r2, #0
 800461c:	2300      	movs	r3, #0
 800461e:	f7fc fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8004622:	2800      	cmp	r0, #0
 8004624:	d033      	beq.n	800468e <_printf_float+0x266>
 8004626:	4a37      	ldr	r2, [pc, #220]	@ (8004704 <_printf_float+0x2dc>)
 8004628:	2301      	movs	r3, #1
 800462a:	4631      	mov	r1, r6
 800462c:	4628      	mov	r0, r5
 800462e:	47b8      	blx	r7
 8004630:	3001      	adds	r0, #1
 8004632:	f43f af54 	beq.w	80044de <_printf_float+0xb6>
 8004636:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800463a:	4543      	cmp	r3, r8
 800463c:	db02      	blt.n	8004644 <_printf_float+0x21c>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	07d8      	lsls	r0, r3, #31
 8004642:	d50f      	bpl.n	8004664 <_printf_float+0x23c>
 8004644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af45 	beq.w	80044de <_printf_float+0xb6>
 8004654:	f04f 0900 	mov.w	r9, #0
 8004658:	f108 38ff 	add.w	r8, r8, #4294967295
 800465c:	f104 0a1a 	add.w	sl, r4, #26
 8004660:	45c8      	cmp	r8, r9
 8004662:	dc09      	bgt.n	8004678 <_printf_float+0x250>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	079b      	lsls	r3, r3, #30
 8004668:	f100 8103 	bmi.w	8004872 <_printf_float+0x44a>
 800466c:	68e0      	ldr	r0, [r4, #12]
 800466e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004670:	4298      	cmp	r0, r3
 8004672:	bfb8      	it	lt
 8004674:	4618      	movlt	r0, r3
 8004676:	e734      	b.n	80044e2 <_printf_float+0xba>
 8004678:	2301      	movs	r3, #1
 800467a:	4652      	mov	r2, sl
 800467c:	4631      	mov	r1, r6
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f af2b 	beq.w	80044de <_printf_float+0xb6>
 8004688:	f109 0901 	add.w	r9, r9, #1
 800468c:	e7e8      	b.n	8004660 <_printf_float+0x238>
 800468e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	dc39      	bgt.n	8004708 <_printf_float+0x2e0>
 8004694:	4a1b      	ldr	r2, [pc, #108]	@ (8004704 <_printf_float+0x2dc>)
 8004696:	2301      	movs	r3, #1
 8004698:	4631      	mov	r1, r6
 800469a:	4628      	mov	r0, r5
 800469c:	47b8      	blx	r7
 800469e:	3001      	adds	r0, #1
 80046a0:	f43f af1d 	beq.w	80044de <_printf_float+0xb6>
 80046a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80046a8:	ea59 0303 	orrs.w	r3, r9, r3
 80046ac:	d102      	bne.n	80046b4 <_printf_float+0x28c>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	07d9      	lsls	r1, r3, #31
 80046b2:	d5d7      	bpl.n	8004664 <_printf_float+0x23c>
 80046b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b8:	4631      	mov	r1, r6
 80046ba:	4628      	mov	r0, r5
 80046bc:	47b8      	blx	r7
 80046be:	3001      	adds	r0, #1
 80046c0:	f43f af0d 	beq.w	80044de <_printf_float+0xb6>
 80046c4:	f04f 0a00 	mov.w	sl, #0
 80046c8:	f104 0b1a 	add.w	fp, r4, #26
 80046cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ce:	425b      	negs	r3, r3
 80046d0:	4553      	cmp	r3, sl
 80046d2:	dc01      	bgt.n	80046d8 <_printf_float+0x2b0>
 80046d4:	464b      	mov	r3, r9
 80046d6:	e793      	b.n	8004600 <_printf_float+0x1d8>
 80046d8:	2301      	movs	r3, #1
 80046da:	465a      	mov	r2, fp
 80046dc:	4631      	mov	r1, r6
 80046de:	4628      	mov	r0, r5
 80046e0:	47b8      	blx	r7
 80046e2:	3001      	adds	r0, #1
 80046e4:	f43f aefb 	beq.w	80044de <_printf_float+0xb6>
 80046e8:	f10a 0a01 	add.w	sl, sl, #1
 80046ec:	e7ee      	b.n	80046cc <_printf_float+0x2a4>
 80046ee:	bf00      	nop
 80046f0:	7fefffff 	.word	0x7fefffff
 80046f4:	08006f88 	.word	0x08006f88
 80046f8:	08006f8c 	.word	0x08006f8c
 80046fc:	08006f90 	.word	0x08006f90
 8004700:	08006f94 	.word	0x08006f94
 8004704:	08006f98 	.word	0x08006f98
 8004708:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800470a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800470e:	4553      	cmp	r3, sl
 8004710:	bfa8      	it	ge
 8004712:	4653      	movge	r3, sl
 8004714:	2b00      	cmp	r3, #0
 8004716:	4699      	mov	r9, r3
 8004718:	dc36      	bgt.n	8004788 <_printf_float+0x360>
 800471a:	f04f 0b00 	mov.w	fp, #0
 800471e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004722:	f104 021a 	add.w	r2, r4, #26
 8004726:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004728:	9306      	str	r3, [sp, #24]
 800472a:	eba3 0309 	sub.w	r3, r3, r9
 800472e:	455b      	cmp	r3, fp
 8004730:	dc31      	bgt.n	8004796 <_printf_float+0x36e>
 8004732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004734:	459a      	cmp	sl, r3
 8004736:	dc3a      	bgt.n	80047ae <_printf_float+0x386>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	07da      	lsls	r2, r3, #31
 800473c:	d437      	bmi.n	80047ae <_printf_float+0x386>
 800473e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004740:	ebaa 0903 	sub.w	r9, sl, r3
 8004744:	9b06      	ldr	r3, [sp, #24]
 8004746:	ebaa 0303 	sub.w	r3, sl, r3
 800474a:	4599      	cmp	r9, r3
 800474c:	bfa8      	it	ge
 800474e:	4699      	movge	r9, r3
 8004750:	f1b9 0f00 	cmp.w	r9, #0
 8004754:	dc33      	bgt.n	80047be <_printf_float+0x396>
 8004756:	f04f 0800 	mov.w	r8, #0
 800475a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800475e:	f104 0b1a 	add.w	fp, r4, #26
 8004762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004764:	ebaa 0303 	sub.w	r3, sl, r3
 8004768:	eba3 0309 	sub.w	r3, r3, r9
 800476c:	4543      	cmp	r3, r8
 800476e:	f77f af79 	ble.w	8004664 <_printf_float+0x23c>
 8004772:	2301      	movs	r3, #1
 8004774:	465a      	mov	r2, fp
 8004776:	4631      	mov	r1, r6
 8004778:	4628      	mov	r0, r5
 800477a:	47b8      	blx	r7
 800477c:	3001      	adds	r0, #1
 800477e:	f43f aeae 	beq.w	80044de <_printf_float+0xb6>
 8004782:	f108 0801 	add.w	r8, r8, #1
 8004786:	e7ec      	b.n	8004762 <_printf_float+0x33a>
 8004788:	4642      	mov	r2, r8
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	47b8      	blx	r7
 8004790:	3001      	adds	r0, #1
 8004792:	d1c2      	bne.n	800471a <_printf_float+0x2f2>
 8004794:	e6a3      	b.n	80044de <_printf_float+0xb6>
 8004796:	2301      	movs	r3, #1
 8004798:	4631      	mov	r1, r6
 800479a:	4628      	mov	r0, r5
 800479c:	9206      	str	r2, [sp, #24]
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f ae9c 	beq.w	80044de <_printf_float+0xb6>
 80047a6:	9a06      	ldr	r2, [sp, #24]
 80047a8:	f10b 0b01 	add.w	fp, fp, #1
 80047ac:	e7bb      	b.n	8004726 <_printf_float+0x2fe>
 80047ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	d1c0      	bne.n	800473e <_printf_float+0x316>
 80047bc:	e68f      	b.n	80044de <_printf_float+0xb6>
 80047be:	9a06      	ldr	r2, [sp, #24]
 80047c0:	464b      	mov	r3, r9
 80047c2:	4442      	add	r2, r8
 80047c4:	4631      	mov	r1, r6
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b8      	blx	r7
 80047ca:	3001      	adds	r0, #1
 80047cc:	d1c3      	bne.n	8004756 <_printf_float+0x32e>
 80047ce:	e686      	b.n	80044de <_printf_float+0xb6>
 80047d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80047d4:	f1ba 0f01 	cmp.w	sl, #1
 80047d8:	dc01      	bgt.n	80047de <_printf_float+0x3b6>
 80047da:	07db      	lsls	r3, r3, #31
 80047dc:	d536      	bpl.n	800484c <_printf_float+0x424>
 80047de:	2301      	movs	r3, #1
 80047e0:	4642      	mov	r2, r8
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f ae78 	beq.w	80044de <_printf_float+0xb6>
 80047ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f2:	4631      	mov	r1, r6
 80047f4:	4628      	mov	r0, r5
 80047f6:	47b8      	blx	r7
 80047f8:	3001      	adds	r0, #1
 80047fa:	f43f ae70 	beq.w	80044de <_printf_float+0xb6>
 80047fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004802:	2200      	movs	r2, #0
 8004804:	2300      	movs	r3, #0
 8004806:	f10a 3aff 	add.w	sl, sl, #4294967295
 800480a:	f7fc f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800480e:	b9c0      	cbnz	r0, 8004842 <_printf_float+0x41a>
 8004810:	4653      	mov	r3, sl
 8004812:	f108 0201 	add.w	r2, r8, #1
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	47b8      	blx	r7
 800481c:	3001      	adds	r0, #1
 800481e:	d10c      	bne.n	800483a <_printf_float+0x412>
 8004820:	e65d      	b.n	80044de <_printf_float+0xb6>
 8004822:	2301      	movs	r3, #1
 8004824:	465a      	mov	r2, fp
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	47b8      	blx	r7
 800482c:	3001      	adds	r0, #1
 800482e:	f43f ae56 	beq.w	80044de <_printf_float+0xb6>
 8004832:	f108 0801 	add.w	r8, r8, #1
 8004836:	45d0      	cmp	r8, sl
 8004838:	dbf3      	blt.n	8004822 <_printf_float+0x3fa>
 800483a:	464b      	mov	r3, r9
 800483c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004840:	e6df      	b.n	8004602 <_printf_float+0x1da>
 8004842:	f04f 0800 	mov.w	r8, #0
 8004846:	f104 0b1a 	add.w	fp, r4, #26
 800484a:	e7f4      	b.n	8004836 <_printf_float+0x40e>
 800484c:	2301      	movs	r3, #1
 800484e:	4642      	mov	r2, r8
 8004850:	e7e1      	b.n	8004816 <_printf_float+0x3ee>
 8004852:	2301      	movs	r3, #1
 8004854:	464a      	mov	r2, r9
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	47b8      	blx	r7
 800485c:	3001      	adds	r0, #1
 800485e:	f43f ae3e 	beq.w	80044de <_printf_float+0xb6>
 8004862:	f108 0801 	add.w	r8, r8, #1
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800486a:	1a5b      	subs	r3, r3, r1
 800486c:	4543      	cmp	r3, r8
 800486e:	dcf0      	bgt.n	8004852 <_printf_float+0x42a>
 8004870:	e6fc      	b.n	800466c <_printf_float+0x244>
 8004872:	f04f 0800 	mov.w	r8, #0
 8004876:	f104 0919 	add.w	r9, r4, #25
 800487a:	e7f4      	b.n	8004866 <_printf_float+0x43e>

0800487c <_printf_common>:
 800487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	4616      	mov	r6, r2
 8004882:	4698      	mov	r8, r3
 8004884:	688a      	ldr	r2, [r1, #8]
 8004886:	690b      	ldr	r3, [r1, #16]
 8004888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800488c:	4293      	cmp	r3, r2
 800488e:	bfb8      	it	lt
 8004890:	4613      	movlt	r3, r2
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004898:	4607      	mov	r7, r0
 800489a:	460c      	mov	r4, r1
 800489c:	b10a      	cbz	r2, 80048a2 <_printf_common+0x26>
 800489e:	3301      	adds	r3, #1
 80048a0:	6033      	str	r3, [r6, #0]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	0699      	lsls	r1, r3, #26
 80048a6:	bf42      	ittt	mi
 80048a8:	6833      	ldrmi	r3, [r6, #0]
 80048aa:	3302      	addmi	r3, #2
 80048ac:	6033      	strmi	r3, [r6, #0]
 80048ae:	6825      	ldr	r5, [r4, #0]
 80048b0:	f015 0506 	ands.w	r5, r5, #6
 80048b4:	d106      	bne.n	80048c4 <_printf_common+0x48>
 80048b6:	f104 0a19 	add.w	sl, r4, #25
 80048ba:	68e3      	ldr	r3, [r4, #12]
 80048bc:	6832      	ldr	r2, [r6, #0]
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	42ab      	cmp	r3, r5
 80048c2:	dc26      	bgt.n	8004912 <_printf_common+0x96>
 80048c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	3b00      	subs	r3, #0
 80048cc:	bf18      	it	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	0692      	lsls	r2, r2, #26
 80048d2:	d42b      	bmi.n	800492c <_printf_common+0xb0>
 80048d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048d8:	4641      	mov	r1, r8
 80048da:	4638      	mov	r0, r7
 80048dc:	47c8      	blx	r9
 80048de:	3001      	adds	r0, #1
 80048e0:	d01e      	beq.n	8004920 <_printf_common+0xa4>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	6922      	ldr	r2, [r4, #16]
 80048e6:	f003 0306 	and.w	r3, r3, #6
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	bf02      	ittt	eq
 80048ee:	68e5      	ldreq	r5, [r4, #12]
 80048f0:	6833      	ldreq	r3, [r6, #0]
 80048f2:	1aed      	subeq	r5, r5, r3
 80048f4:	68a3      	ldr	r3, [r4, #8]
 80048f6:	bf0c      	ite	eq
 80048f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048fc:	2500      	movne	r5, #0
 80048fe:	4293      	cmp	r3, r2
 8004900:	bfc4      	itt	gt
 8004902:	1a9b      	subgt	r3, r3, r2
 8004904:	18ed      	addgt	r5, r5, r3
 8004906:	2600      	movs	r6, #0
 8004908:	341a      	adds	r4, #26
 800490a:	42b5      	cmp	r5, r6
 800490c:	d11a      	bne.n	8004944 <_printf_common+0xc8>
 800490e:	2000      	movs	r0, #0
 8004910:	e008      	b.n	8004924 <_printf_common+0xa8>
 8004912:	2301      	movs	r3, #1
 8004914:	4652      	mov	r2, sl
 8004916:	4641      	mov	r1, r8
 8004918:	4638      	mov	r0, r7
 800491a:	47c8      	blx	r9
 800491c:	3001      	adds	r0, #1
 800491e:	d103      	bne.n	8004928 <_printf_common+0xac>
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004928:	3501      	adds	r5, #1
 800492a:	e7c6      	b.n	80048ba <_printf_common+0x3e>
 800492c:	18e1      	adds	r1, r4, r3
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	2030      	movs	r0, #48	@ 0x30
 8004932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004936:	4422      	add	r2, r4
 8004938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800493c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004940:	3302      	adds	r3, #2
 8004942:	e7c7      	b.n	80048d4 <_printf_common+0x58>
 8004944:	2301      	movs	r3, #1
 8004946:	4622      	mov	r2, r4
 8004948:	4641      	mov	r1, r8
 800494a:	4638      	mov	r0, r7
 800494c:	47c8      	blx	r9
 800494e:	3001      	adds	r0, #1
 8004950:	d0e6      	beq.n	8004920 <_printf_common+0xa4>
 8004952:	3601      	adds	r6, #1
 8004954:	e7d9      	b.n	800490a <_printf_common+0x8e>
	...

08004958 <_printf_i>:
 8004958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	7e0f      	ldrb	r7, [r1, #24]
 800495e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004960:	2f78      	cmp	r7, #120	@ 0x78
 8004962:	4691      	mov	r9, r2
 8004964:	4680      	mov	r8, r0
 8004966:	460c      	mov	r4, r1
 8004968:	469a      	mov	sl, r3
 800496a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800496e:	d807      	bhi.n	8004980 <_printf_i+0x28>
 8004970:	2f62      	cmp	r7, #98	@ 0x62
 8004972:	d80a      	bhi.n	800498a <_printf_i+0x32>
 8004974:	2f00      	cmp	r7, #0
 8004976:	f000 80d2 	beq.w	8004b1e <_printf_i+0x1c6>
 800497a:	2f58      	cmp	r7, #88	@ 0x58
 800497c:	f000 80b9 	beq.w	8004af2 <_printf_i+0x19a>
 8004980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004988:	e03a      	b.n	8004a00 <_printf_i+0xa8>
 800498a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800498e:	2b15      	cmp	r3, #21
 8004990:	d8f6      	bhi.n	8004980 <_printf_i+0x28>
 8004992:	a101      	add	r1, pc, #4	@ (adr r1, 8004998 <_printf_i+0x40>)
 8004994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004998:	080049f1 	.word	0x080049f1
 800499c:	08004a05 	.word	0x08004a05
 80049a0:	08004981 	.word	0x08004981
 80049a4:	08004981 	.word	0x08004981
 80049a8:	08004981 	.word	0x08004981
 80049ac:	08004981 	.word	0x08004981
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004981 	.word	0x08004981
 80049b8:	08004981 	.word	0x08004981
 80049bc:	08004981 	.word	0x08004981
 80049c0:	08004981 	.word	0x08004981
 80049c4:	08004b05 	.word	0x08004b05
 80049c8:	08004a2f 	.word	0x08004a2f
 80049cc:	08004abf 	.word	0x08004abf
 80049d0:	08004981 	.word	0x08004981
 80049d4:	08004981 	.word	0x08004981
 80049d8:	08004b27 	.word	0x08004b27
 80049dc:	08004981 	.word	0x08004981
 80049e0:	08004a2f 	.word	0x08004a2f
 80049e4:	08004981 	.word	0x08004981
 80049e8:	08004981 	.word	0x08004981
 80049ec:	08004ac7 	.word	0x08004ac7
 80049f0:	6833      	ldr	r3, [r6, #0]
 80049f2:	1d1a      	adds	r2, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6032      	str	r2, [r6, #0]
 80049f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a00:	2301      	movs	r3, #1
 8004a02:	e09d      	b.n	8004b40 <_printf_i+0x1e8>
 8004a04:	6833      	ldr	r3, [r6, #0]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	6031      	str	r1, [r6, #0]
 8004a0c:	0606      	lsls	r6, r0, #24
 8004a0e:	d501      	bpl.n	8004a14 <_printf_i+0xbc>
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	e003      	b.n	8004a1c <_printf_i+0xc4>
 8004a14:	0645      	lsls	r5, r0, #25
 8004a16:	d5fb      	bpl.n	8004a10 <_printf_i+0xb8>
 8004a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	da03      	bge.n	8004a28 <_printf_i+0xd0>
 8004a20:	232d      	movs	r3, #45	@ 0x2d
 8004a22:	426d      	negs	r5, r5
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a28:	4859      	ldr	r0, [pc, #356]	@ (8004b90 <_printf_i+0x238>)
 8004a2a:	230a      	movs	r3, #10
 8004a2c:	e011      	b.n	8004a52 <_printf_i+0xfa>
 8004a2e:	6821      	ldr	r1, [r4, #0]
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	0608      	lsls	r0, r1, #24
 8004a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a38:	d402      	bmi.n	8004a40 <_printf_i+0xe8>
 8004a3a:	0649      	lsls	r1, r1, #25
 8004a3c:	bf48      	it	mi
 8004a3e:	b2ad      	uxthmi	r5, r5
 8004a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a42:	4853      	ldr	r0, [pc, #332]	@ (8004b90 <_printf_i+0x238>)
 8004a44:	6033      	str	r3, [r6, #0]
 8004a46:	bf14      	ite	ne
 8004a48:	230a      	movne	r3, #10
 8004a4a:	2308      	moveq	r3, #8
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a52:	6866      	ldr	r6, [r4, #4]
 8004a54:	60a6      	str	r6, [r4, #8]
 8004a56:	2e00      	cmp	r6, #0
 8004a58:	bfa2      	ittt	ge
 8004a5a:	6821      	ldrge	r1, [r4, #0]
 8004a5c:	f021 0104 	bicge.w	r1, r1, #4
 8004a60:	6021      	strge	r1, [r4, #0]
 8004a62:	b90d      	cbnz	r5, 8004a68 <_printf_i+0x110>
 8004a64:	2e00      	cmp	r6, #0
 8004a66:	d04b      	beq.n	8004b00 <_printf_i+0x1a8>
 8004a68:	4616      	mov	r6, r2
 8004a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8004a72:	5dc7      	ldrb	r7, [r0, r7]
 8004a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a78:	462f      	mov	r7, r5
 8004a7a:	42bb      	cmp	r3, r7
 8004a7c:	460d      	mov	r5, r1
 8004a7e:	d9f4      	bls.n	8004a6a <_printf_i+0x112>
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d10b      	bne.n	8004a9c <_printf_i+0x144>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	07df      	lsls	r7, r3, #31
 8004a88:	d508      	bpl.n	8004a9c <_printf_i+0x144>
 8004a8a:	6923      	ldr	r3, [r4, #16]
 8004a8c:	6861      	ldr	r1, [r4, #4]
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	bfde      	ittt	le
 8004a92:	2330      	movle	r3, #48	@ 0x30
 8004a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a9c:	1b92      	subs	r2, r2, r6
 8004a9e:	6122      	str	r2, [r4, #16]
 8004aa0:	f8cd a000 	str.w	sl, [sp]
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	aa03      	add	r2, sp, #12
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f7ff fee6 	bl	800487c <_printf_common>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d14a      	bne.n	8004b4a <_printf_i+0x1f2>
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	b004      	add	sp, #16
 8004aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f043 0320 	orr.w	r3, r3, #32
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	4833      	ldr	r0, [pc, #204]	@ (8004b94 <_printf_i+0x23c>)
 8004ac8:	2778      	movs	r7, #120	@ 0x78
 8004aca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6831      	ldr	r1, [r6, #0]
 8004ad2:	061f      	lsls	r7, r3, #24
 8004ad4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ad8:	d402      	bmi.n	8004ae0 <_printf_i+0x188>
 8004ada:	065f      	lsls	r7, r3, #25
 8004adc:	bf48      	it	mi
 8004ade:	b2ad      	uxthmi	r5, r5
 8004ae0:	6031      	str	r1, [r6, #0]
 8004ae2:	07d9      	lsls	r1, r3, #31
 8004ae4:	bf44      	itt	mi
 8004ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8004aea:	6023      	strmi	r3, [r4, #0]
 8004aec:	b11d      	cbz	r5, 8004af6 <_printf_i+0x19e>
 8004aee:	2310      	movs	r3, #16
 8004af0:	e7ac      	b.n	8004a4c <_printf_i+0xf4>
 8004af2:	4827      	ldr	r0, [pc, #156]	@ (8004b90 <_printf_i+0x238>)
 8004af4:	e7e9      	b.n	8004aca <_printf_i+0x172>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	f023 0320 	bic.w	r3, r3, #32
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	e7f6      	b.n	8004aee <_printf_i+0x196>
 8004b00:	4616      	mov	r6, r2
 8004b02:	e7bd      	b.n	8004a80 <_printf_i+0x128>
 8004b04:	6833      	ldr	r3, [r6, #0]
 8004b06:	6825      	ldr	r5, [r4, #0]
 8004b08:	6961      	ldr	r1, [r4, #20]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6030      	str	r0, [r6, #0]
 8004b0e:	062e      	lsls	r6, r5, #24
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	d501      	bpl.n	8004b18 <_printf_i+0x1c0>
 8004b14:	6019      	str	r1, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <_printf_i+0x1c6>
 8004b18:	0668      	lsls	r0, r5, #25
 8004b1a:	d5fb      	bpl.n	8004b14 <_printf_i+0x1bc>
 8004b1c:	8019      	strh	r1, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	4616      	mov	r6, r2
 8004b24:	e7bc      	b.n	8004aa0 <_printf_i+0x148>
 8004b26:	6833      	ldr	r3, [r6, #0]
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	6032      	str	r2, [r6, #0]
 8004b2c:	681e      	ldr	r6, [r3, #0]
 8004b2e:	6862      	ldr	r2, [r4, #4]
 8004b30:	2100      	movs	r1, #0
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fb fb4c 	bl	80001d0 <memchr>
 8004b38:	b108      	cbz	r0, 8004b3e <_printf_i+0x1e6>
 8004b3a:	1b80      	subs	r0, r0, r6
 8004b3c:	6060      	str	r0, [r4, #4]
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	2300      	movs	r3, #0
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b48:	e7aa      	b.n	8004aa0 <_printf_i+0x148>
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	47d0      	blx	sl
 8004b54:	3001      	adds	r0, #1
 8004b56:	d0ad      	beq.n	8004ab4 <_printf_i+0x15c>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	079b      	lsls	r3, r3, #30
 8004b5c:	d413      	bmi.n	8004b86 <_printf_i+0x22e>
 8004b5e:	68e0      	ldr	r0, [r4, #12]
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	4298      	cmp	r0, r3
 8004b64:	bfb8      	it	lt
 8004b66:	4618      	movlt	r0, r3
 8004b68:	e7a6      	b.n	8004ab8 <_printf_i+0x160>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4640      	mov	r0, r8
 8004b72:	47d0      	blx	sl
 8004b74:	3001      	adds	r0, #1
 8004b76:	d09d      	beq.n	8004ab4 <_printf_i+0x15c>
 8004b78:	3501      	adds	r5, #1
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	9903      	ldr	r1, [sp, #12]
 8004b7e:	1a5b      	subs	r3, r3, r1
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dcf2      	bgt.n	8004b6a <_printf_i+0x212>
 8004b84:	e7eb      	b.n	8004b5e <_printf_i+0x206>
 8004b86:	2500      	movs	r5, #0
 8004b88:	f104 0619 	add.w	r6, r4, #25
 8004b8c:	e7f5      	b.n	8004b7a <_printf_i+0x222>
 8004b8e:	bf00      	nop
 8004b90:	08006f9a 	.word	0x08006f9a
 8004b94:	08006fab 	.word	0x08006fab

08004b98 <std>:
 8004b98:	2300      	movs	r3, #0
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ba6:	6083      	str	r3, [r0, #8]
 8004ba8:	8181      	strh	r1, [r0, #12]
 8004baa:	6643      	str	r3, [r0, #100]	@ 0x64
 8004bac:	81c2      	strh	r2, [r0, #14]
 8004bae:	6183      	str	r3, [r0, #24]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	305c      	adds	r0, #92	@ 0x5c
 8004bb6:	f000 faad 	bl	8005114 <memset>
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <std+0x58>)
 8004bbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <std+0x5c>)
 8004bc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <std+0x60>)
 8004bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <std+0x64>)
 8004bc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004bca:	4b0d      	ldr	r3, [pc, #52]	@ (8004c00 <std+0x68>)
 8004bcc:	6224      	str	r4, [r4, #32]
 8004bce:	429c      	cmp	r4, r3
 8004bd0:	d006      	beq.n	8004be0 <std+0x48>
 8004bd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bd6:	4294      	cmp	r4, r2
 8004bd8:	d002      	beq.n	8004be0 <std+0x48>
 8004bda:	33d0      	adds	r3, #208	@ 0xd0
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	d105      	bne.n	8004bec <std+0x54>
 8004be0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be8:	f000 bb22 	b.w	8005230 <__retarget_lock_init_recursive>
 8004bec:	bd10      	pop	{r4, pc}
 8004bee:	bf00      	nop
 8004bf0:	08004f65 	.word	0x08004f65
 8004bf4:	08004f87 	.word	0x08004f87
 8004bf8:	08004fbf 	.word	0x08004fbf
 8004bfc:	08004fe3 	.word	0x08004fe3
 8004c00:	2000040c 	.word	0x2000040c

08004c04 <stdio_exit_handler>:
 8004c04:	4a02      	ldr	r2, [pc, #8]	@ (8004c10 <stdio_exit_handler+0xc>)
 8004c06:	4903      	ldr	r1, [pc, #12]	@ (8004c14 <stdio_exit_handler+0x10>)
 8004c08:	4803      	ldr	r0, [pc, #12]	@ (8004c18 <stdio_exit_handler+0x14>)
 8004c0a:	f000 b869 	b.w	8004ce0 <_fwalk_sglue>
 8004c0e:	bf00      	nop
 8004c10:	2000000c 	.word	0x2000000c
 8004c14:	08006b81 	.word	0x08006b81
 8004c18:	2000001c 	.word	0x2000001c

08004c1c <cleanup_stdio>:
 8004c1c:	6841      	ldr	r1, [r0, #4]
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <cleanup_stdio+0x34>)
 8004c20:	4299      	cmp	r1, r3
 8004c22:	b510      	push	{r4, lr}
 8004c24:	4604      	mov	r4, r0
 8004c26:	d001      	beq.n	8004c2c <cleanup_stdio+0x10>
 8004c28:	f001 ffaa 	bl	8006b80 <_fflush_r>
 8004c2c:	68a1      	ldr	r1, [r4, #8]
 8004c2e:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <cleanup_stdio+0x38>)
 8004c30:	4299      	cmp	r1, r3
 8004c32:	d002      	beq.n	8004c3a <cleanup_stdio+0x1e>
 8004c34:	4620      	mov	r0, r4
 8004c36:	f001 ffa3 	bl	8006b80 <_fflush_r>
 8004c3a:	68e1      	ldr	r1, [r4, #12]
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <cleanup_stdio+0x3c>)
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	d004      	beq.n	8004c4c <cleanup_stdio+0x30>
 8004c42:	4620      	mov	r0, r4
 8004c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c48:	f001 bf9a 	b.w	8006b80 <_fflush_r>
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	bf00      	nop
 8004c50:	2000040c 	.word	0x2000040c
 8004c54:	20000474 	.word	0x20000474
 8004c58:	200004dc 	.word	0x200004dc

08004c5c <global_stdio_init.part.0>:
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <global_stdio_init.part.0+0x30>)
 8004c60:	4c0b      	ldr	r4, [pc, #44]	@ (8004c90 <global_stdio_init.part.0+0x34>)
 8004c62:	4a0c      	ldr	r2, [pc, #48]	@ (8004c94 <global_stdio_init.part.0+0x38>)
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	4620      	mov	r0, r4
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2104      	movs	r1, #4
 8004c6c:	f7ff ff94 	bl	8004b98 <std>
 8004c70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c74:	2201      	movs	r2, #1
 8004c76:	2109      	movs	r1, #9
 8004c78:	f7ff ff8e 	bl	8004b98 <std>
 8004c7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c80:	2202      	movs	r2, #2
 8004c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c86:	2112      	movs	r1, #18
 8004c88:	f7ff bf86 	b.w	8004b98 <std>
 8004c8c:	20000544 	.word	0x20000544
 8004c90:	2000040c 	.word	0x2000040c
 8004c94:	08004c05 	.word	0x08004c05

08004c98 <__sfp_lock_acquire>:
 8004c98:	4801      	ldr	r0, [pc, #4]	@ (8004ca0 <__sfp_lock_acquire+0x8>)
 8004c9a:	f000 baca 	b.w	8005232 <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	2000054d 	.word	0x2000054d

08004ca4 <__sfp_lock_release>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	@ (8004cac <__sfp_lock_release+0x8>)
 8004ca6:	f000 bac5 	b.w	8005234 <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	2000054d 	.word	0x2000054d

08004cb0 <__sinit>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	f7ff fff0 	bl	8004c98 <__sfp_lock_acquire>
 8004cb8:	6a23      	ldr	r3, [r4, #32]
 8004cba:	b11b      	cbz	r3, 8004cc4 <__sinit+0x14>
 8004cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc0:	f7ff bff0 	b.w	8004ca4 <__sfp_lock_release>
 8004cc4:	4b04      	ldr	r3, [pc, #16]	@ (8004cd8 <__sinit+0x28>)
 8004cc6:	6223      	str	r3, [r4, #32]
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <__sinit+0x2c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f5      	bne.n	8004cbc <__sinit+0xc>
 8004cd0:	f7ff ffc4 	bl	8004c5c <global_stdio_init.part.0>
 8004cd4:	e7f2      	b.n	8004cbc <__sinit+0xc>
 8004cd6:	bf00      	nop
 8004cd8:	08004c1d 	.word	0x08004c1d
 8004cdc:	20000544 	.word	0x20000544

08004ce0 <_fwalk_sglue>:
 8004ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	4688      	mov	r8, r1
 8004ce8:	4614      	mov	r4, r2
 8004cea:	2600      	movs	r6, #0
 8004cec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cf0:	f1b9 0901 	subs.w	r9, r9, #1
 8004cf4:	d505      	bpl.n	8004d02 <_fwalk_sglue+0x22>
 8004cf6:	6824      	ldr	r4, [r4, #0]
 8004cf8:	2c00      	cmp	r4, #0
 8004cfa:	d1f7      	bne.n	8004cec <_fwalk_sglue+0xc>
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d907      	bls.n	8004d18 <_fwalk_sglue+0x38>
 8004d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	d003      	beq.n	8004d18 <_fwalk_sglue+0x38>
 8004d10:	4629      	mov	r1, r5
 8004d12:	4638      	mov	r0, r7
 8004d14:	47c0      	blx	r8
 8004d16:	4306      	orrs	r6, r0
 8004d18:	3568      	adds	r5, #104	@ 0x68
 8004d1a:	e7e9      	b.n	8004cf0 <_fwalk_sglue+0x10>

08004d1c <iprintf>:
 8004d1c:	b40f      	push	{r0, r1, r2, r3}
 8004d1e:	b507      	push	{r0, r1, r2, lr}
 8004d20:	4906      	ldr	r1, [pc, #24]	@ (8004d3c <iprintf+0x20>)
 8004d22:	ab04      	add	r3, sp, #16
 8004d24:	6808      	ldr	r0, [r1, #0]
 8004d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d2a:	6881      	ldr	r1, [r0, #8]
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	f001 fd8b 	bl	8006848 <_vfiprintf_r>
 8004d32:	b003      	add	sp, #12
 8004d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d38:	b004      	add	sp, #16
 8004d3a:	4770      	bx	lr
 8004d3c:	20000018 	.word	0x20000018

08004d40 <_puts_r>:
 8004d40:	6a03      	ldr	r3, [r0, #32]
 8004d42:	b570      	push	{r4, r5, r6, lr}
 8004d44:	6884      	ldr	r4, [r0, #8]
 8004d46:	4605      	mov	r5, r0
 8004d48:	460e      	mov	r6, r1
 8004d4a:	b90b      	cbnz	r3, 8004d50 <_puts_r+0x10>
 8004d4c:	f7ff ffb0 	bl	8004cb0 <__sinit>
 8004d50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d52:	07db      	lsls	r3, r3, #31
 8004d54:	d405      	bmi.n	8004d62 <_puts_r+0x22>
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	0598      	lsls	r0, r3, #22
 8004d5a:	d402      	bmi.n	8004d62 <_puts_r+0x22>
 8004d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d5e:	f000 fa68 	bl	8005232 <__retarget_lock_acquire_recursive>
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	0719      	lsls	r1, r3, #28
 8004d66:	d502      	bpl.n	8004d6e <_puts_r+0x2e>
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d135      	bne.n	8004dda <_puts_r+0x9a>
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 f979 	bl	8005068 <__swsetup_r>
 8004d76:	b380      	cbz	r0, 8004dda <_puts_r+0x9a>
 8004d78:	f04f 35ff 	mov.w	r5, #4294967295
 8004d7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d7e:	07da      	lsls	r2, r3, #31
 8004d80:	d405      	bmi.n	8004d8e <_puts_r+0x4e>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	059b      	lsls	r3, r3, #22
 8004d86:	d402      	bmi.n	8004d8e <_puts_r+0x4e>
 8004d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d8a:	f000 fa53 	bl	8005234 <__retarget_lock_release_recursive>
 8004d8e:	4628      	mov	r0, r5
 8004d90:	bd70      	pop	{r4, r5, r6, pc}
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da04      	bge.n	8004da0 <_puts_r+0x60>
 8004d96:	69a2      	ldr	r2, [r4, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	dc17      	bgt.n	8004dcc <_puts_r+0x8c>
 8004d9c:	290a      	cmp	r1, #10
 8004d9e:	d015      	beq.n	8004dcc <_puts_r+0x8c>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	6022      	str	r2, [r4, #0]
 8004da6:	7019      	strb	r1, [r3, #0]
 8004da8:	68a3      	ldr	r3, [r4, #8]
 8004daa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004dae:	3b01      	subs	r3, #1
 8004db0:	60a3      	str	r3, [r4, #8]
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d1ed      	bne.n	8004d92 <_puts_r+0x52>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da11      	bge.n	8004dde <_puts_r+0x9e>
 8004dba:	4622      	mov	r2, r4
 8004dbc:	210a      	movs	r1, #10
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 f913 	bl	8004fea <__swbuf_r>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d0d7      	beq.n	8004d78 <_puts_r+0x38>
 8004dc8:	250a      	movs	r5, #10
 8004dca:	e7d7      	b.n	8004d7c <_puts_r+0x3c>
 8004dcc:	4622      	mov	r2, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f90b 	bl	8004fea <__swbuf_r>
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d1e7      	bne.n	8004da8 <_puts_r+0x68>
 8004dd8:	e7ce      	b.n	8004d78 <_puts_r+0x38>
 8004dda:	3e01      	subs	r6, #1
 8004ddc:	e7e4      	b.n	8004da8 <_puts_r+0x68>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	6022      	str	r2, [r4, #0]
 8004de4:	220a      	movs	r2, #10
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e7ee      	b.n	8004dc8 <_puts_r+0x88>
	...

08004dec <puts>:
 8004dec:	4b02      	ldr	r3, [pc, #8]	@ (8004df8 <puts+0xc>)
 8004dee:	4601      	mov	r1, r0
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	f7ff bfa5 	b.w	8004d40 <_puts_r>
 8004df6:	bf00      	nop
 8004df8:	20000018 	.word	0x20000018

08004dfc <setvbuf>:
 8004dfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e00:	461d      	mov	r5, r3
 8004e02:	4b57      	ldr	r3, [pc, #348]	@ (8004f60 <setvbuf+0x164>)
 8004e04:	681f      	ldr	r7, [r3, #0]
 8004e06:	4604      	mov	r4, r0
 8004e08:	460e      	mov	r6, r1
 8004e0a:	4690      	mov	r8, r2
 8004e0c:	b127      	cbz	r7, 8004e18 <setvbuf+0x1c>
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	b913      	cbnz	r3, 8004e18 <setvbuf+0x1c>
 8004e12:	4638      	mov	r0, r7
 8004e14:	f7ff ff4c 	bl	8004cb0 <__sinit>
 8004e18:	f1b8 0f02 	cmp.w	r8, #2
 8004e1c:	d006      	beq.n	8004e2c <setvbuf+0x30>
 8004e1e:	f1b8 0f01 	cmp.w	r8, #1
 8004e22:	f200 809a 	bhi.w	8004f5a <setvbuf+0x15e>
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	f2c0 8097 	blt.w	8004f5a <setvbuf+0x15e>
 8004e2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e2e:	07d9      	lsls	r1, r3, #31
 8004e30:	d405      	bmi.n	8004e3e <setvbuf+0x42>
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	059a      	lsls	r2, r3, #22
 8004e36:	d402      	bmi.n	8004e3e <setvbuf+0x42>
 8004e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e3a:	f000 f9fa 	bl	8005232 <__retarget_lock_acquire_recursive>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4638      	mov	r0, r7
 8004e42:	f001 fe9d 	bl	8006b80 <_fflush_r>
 8004e46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e48:	b141      	cbz	r1, 8004e5c <setvbuf+0x60>
 8004e4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	d002      	beq.n	8004e58 <setvbuf+0x5c>
 8004e52:	4638      	mov	r0, r7
 8004e54:	f001 f84c 	bl	8005ef0 <_free_r>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61a3      	str	r3, [r4, #24]
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	061b      	lsls	r3, r3, #24
 8004e66:	d503      	bpl.n	8004e70 <setvbuf+0x74>
 8004e68:	6921      	ldr	r1, [r4, #16]
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f001 f840 	bl	8005ef0 <_free_r>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	f1b8 0f02 	cmp.w	r8, #2
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	d061      	beq.n	8004f46 <setvbuf+0x14a>
 8004e82:	ab01      	add	r3, sp, #4
 8004e84:	466a      	mov	r2, sp
 8004e86:	4621      	mov	r1, r4
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f001 fea1 	bl	8006bd0 <__swhatbuf_r>
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	4318      	orrs	r0, r3
 8004e92:	81a0      	strh	r0, [r4, #12]
 8004e94:	bb2d      	cbnz	r5, 8004ee2 <setvbuf+0xe6>
 8004e96:	9d00      	ldr	r5, [sp, #0]
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f001 f873 	bl	8005f84 <malloc>
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d152      	bne.n	8004f4a <setvbuf+0x14e>
 8004ea4:	f8dd 9000 	ldr.w	r9, [sp]
 8004ea8:	45a9      	cmp	r9, r5
 8004eaa:	d140      	bne.n	8004f2e <setvbuf+0x132>
 8004eac:	f04f 35ff 	mov.w	r5, #4294967295
 8004eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb4:	f043 0202 	orr.w	r2, r3, #2
 8004eb8:	81a2      	strh	r2, [r4, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	60a2      	str	r2, [r4, #8]
 8004ebe:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	6122      	str	r2, [r4, #16]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	6162      	str	r2, [r4, #20]
 8004eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ecc:	07d6      	lsls	r6, r2, #31
 8004ece:	d404      	bmi.n	8004eda <setvbuf+0xde>
 8004ed0:	0598      	lsls	r0, r3, #22
 8004ed2:	d402      	bmi.n	8004eda <setvbuf+0xde>
 8004ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ed6:	f000 f9ad 	bl	8005234 <__retarget_lock_release_recursive>
 8004eda:	4628      	mov	r0, r5
 8004edc:	b003      	add	sp, #12
 8004ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ee2:	2e00      	cmp	r6, #0
 8004ee4:	d0d8      	beq.n	8004e98 <setvbuf+0x9c>
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	b913      	cbnz	r3, 8004ef0 <setvbuf+0xf4>
 8004eea:	4638      	mov	r0, r7
 8004eec:	f7ff fee0 	bl	8004cb0 <__sinit>
 8004ef0:	f1b8 0f01 	cmp.w	r8, #1
 8004ef4:	bf08      	it	eq
 8004ef6:	89a3      	ldrheq	r3, [r4, #12]
 8004ef8:	6026      	str	r6, [r4, #0]
 8004efa:	bf04      	itt	eq
 8004efc:	f043 0301 	orreq.w	r3, r3, #1
 8004f00:	81a3      	strheq	r3, [r4, #12]
 8004f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f06:	f013 0208 	ands.w	r2, r3, #8
 8004f0a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004f0e:	d01e      	beq.n	8004f4e <setvbuf+0x152>
 8004f10:	07d9      	lsls	r1, r3, #31
 8004f12:	bf41      	itttt	mi
 8004f14:	2200      	movmi	r2, #0
 8004f16:	426d      	negmi	r5, r5
 8004f18:	60a2      	strmi	r2, [r4, #8]
 8004f1a:	61a5      	strmi	r5, [r4, #24]
 8004f1c:	bf58      	it	pl
 8004f1e:	60a5      	strpl	r5, [r4, #8]
 8004f20:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f22:	07d2      	lsls	r2, r2, #31
 8004f24:	d401      	bmi.n	8004f2a <setvbuf+0x12e>
 8004f26:	059b      	lsls	r3, r3, #22
 8004f28:	d513      	bpl.n	8004f52 <setvbuf+0x156>
 8004f2a:	2500      	movs	r5, #0
 8004f2c:	e7d5      	b.n	8004eda <setvbuf+0xde>
 8004f2e:	4648      	mov	r0, r9
 8004f30:	f001 f828 	bl	8005f84 <malloc>
 8004f34:	4606      	mov	r6, r0
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d0b8      	beq.n	8004eac <setvbuf+0xb0>
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f40:	81a3      	strh	r3, [r4, #12]
 8004f42:	464d      	mov	r5, r9
 8004f44:	e7cf      	b.n	8004ee6 <setvbuf+0xea>
 8004f46:	2500      	movs	r5, #0
 8004f48:	e7b2      	b.n	8004eb0 <setvbuf+0xb4>
 8004f4a:	46a9      	mov	r9, r5
 8004f4c:	e7f5      	b.n	8004f3a <setvbuf+0x13e>
 8004f4e:	60a2      	str	r2, [r4, #8]
 8004f50:	e7e6      	b.n	8004f20 <setvbuf+0x124>
 8004f52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f54:	f000 f96e 	bl	8005234 <__retarget_lock_release_recursive>
 8004f58:	e7e7      	b.n	8004f2a <setvbuf+0x12e>
 8004f5a:	f04f 35ff 	mov.w	r5, #4294967295
 8004f5e:	e7bc      	b.n	8004eda <setvbuf+0xde>
 8004f60:	20000018 	.word	0x20000018

08004f64 <__sread>:
 8004f64:	b510      	push	{r4, lr}
 8004f66:	460c      	mov	r4, r1
 8004f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6c:	f000 f912 	bl	8005194 <_read_r>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	bfab      	itete	ge
 8004f74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f76:	89a3      	ldrhlt	r3, [r4, #12]
 8004f78:	181b      	addge	r3, r3, r0
 8004f7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f7e:	bfac      	ite	ge
 8004f80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f82:	81a3      	strhlt	r3, [r4, #12]
 8004f84:	bd10      	pop	{r4, pc}

08004f86 <__swrite>:
 8004f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8a:	461f      	mov	r7, r3
 8004f8c:	898b      	ldrh	r3, [r1, #12]
 8004f8e:	05db      	lsls	r3, r3, #23
 8004f90:	4605      	mov	r5, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	4616      	mov	r6, r2
 8004f96:	d505      	bpl.n	8004fa4 <__swrite+0x1e>
 8004f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f000 f8e6 	bl	8005170 <_lseek_r>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004faa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fba:	f000 b8fd 	b.w	80051b8 <_write_r>

08004fbe <__sseek>:
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc6:	f000 f8d3 	bl	8005170 <_lseek_r>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	bf15      	itete	ne
 8004fd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004fd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004fd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fda:	81a3      	strheq	r3, [r4, #12]
 8004fdc:	bf18      	it	ne
 8004fde:	81a3      	strhne	r3, [r4, #12]
 8004fe0:	bd10      	pop	{r4, pc}

08004fe2 <__sclose>:
 8004fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe6:	f000 b8b3 	b.w	8005150 <_close_r>

08004fea <__swbuf_r>:
 8004fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fec:	460e      	mov	r6, r1
 8004fee:	4614      	mov	r4, r2
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	b118      	cbz	r0, 8004ffc <__swbuf_r+0x12>
 8004ff4:	6a03      	ldr	r3, [r0, #32]
 8004ff6:	b90b      	cbnz	r3, 8004ffc <__swbuf_r+0x12>
 8004ff8:	f7ff fe5a 	bl	8004cb0 <__sinit>
 8004ffc:	69a3      	ldr	r3, [r4, #24]
 8004ffe:	60a3      	str	r3, [r4, #8]
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	071a      	lsls	r2, r3, #28
 8005004:	d501      	bpl.n	800500a <__swbuf_r+0x20>
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	b943      	cbnz	r3, 800501c <__swbuf_r+0x32>
 800500a:	4621      	mov	r1, r4
 800500c:	4628      	mov	r0, r5
 800500e:	f000 f82b 	bl	8005068 <__swsetup_r>
 8005012:	b118      	cbz	r0, 800501c <__swbuf_r+0x32>
 8005014:	f04f 37ff 	mov.w	r7, #4294967295
 8005018:	4638      	mov	r0, r7
 800501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	6922      	ldr	r2, [r4, #16]
 8005020:	1a98      	subs	r0, r3, r2
 8005022:	6963      	ldr	r3, [r4, #20]
 8005024:	b2f6      	uxtb	r6, r6
 8005026:	4283      	cmp	r3, r0
 8005028:	4637      	mov	r7, r6
 800502a:	dc05      	bgt.n	8005038 <__swbuf_r+0x4e>
 800502c:	4621      	mov	r1, r4
 800502e:	4628      	mov	r0, r5
 8005030:	f001 fda6 	bl	8006b80 <_fflush_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	d1ed      	bne.n	8005014 <__swbuf_r+0x2a>
 8005038:	68a3      	ldr	r3, [r4, #8]
 800503a:	3b01      	subs	r3, #1
 800503c:	60a3      	str	r3, [r4, #8]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	701e      	strb	r6, [r3, #0]
 8005046:	6962      	ldr	r2, [r4, #20]
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	429a      	cmp	r2, r3
 800504c:	d004      	beq.n	8005058 <__swbuf_r+0x6e>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	07db      	lsls	r3, r3, #31
 8005052:	d5e1      	bpl.n	8005018 <__swbuf_r+0x2e>
 8005054:	2e0a      	cmp	r6, #10
 8005056:	d1df      	bne.n	8005018 <__swbuf_r+0x2e>
 8005058:	4621      	mov	r1, r4
 800505a:	4628      	mov	r0, r5
 800505c:	f001 fd90 	bl	8006b80 <_fflush_r>
 8005060:	2800      	cmp	r0, #0
 8005062:	d0d9      	beq.n	8005018 <__swbuf_r+0x2e>
 8005064:	e7d6      	b.n	8005014 <__swbuf_r+0x2a>
	...

08005068 <__swsetup_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4b29      	ldr	r3, [pc, #164]	@ (8005110 <__swsetup_r+0xa8>)
 800506c:	4605      	mov	r5, r0
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	460c      	mov	r4, r1
 8005072:	b118      	cbz	r0, 800507c <__swsetup_r+0x14>
 8005074:	6a03      	ldr	r3, [r0, #32]
 8005076:	b90b      	cbnz	r3, 800507c <__swsetup_r+0x14>
 8005078:	f7ff fe1a 	bl	8004cb0 <__sinit>
 800507c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005080:	0719      	lsls	r1, r3, #28
 8005082:	d422      	bmi.n	80050ca <__swsetup_r+0x62>
 8005084:	06da      	lsls	r2, r3, #27
 8005086:	d407      	bmi.n	8005098 <__swsetup_r+0x30>
 8005088:	2209      	movs	r2, #9
 800508a:	602a      	str	r2, [r5, #0]
 800508c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	f04f 30ff 	mov.w	r0, #4294967295
 8005096:	e033      	b.n	8005100 <__swsetup_r+0x98>
 8005098:	0758      	lsls	r0, r3, #29
 800509a:	d512      	bpl.n	80050c2 <__swsetup_r+0x5a>
 800509c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800509e:	b141      	cbz	r1, 80050b2 <__swsetup_r+0x4a>
 80050a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050a4:	4299      	cmp	r1, r3
 80050a6:	d002      	beq.n	80050ae <__swsetup_r+0x46>
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 ff21 	bl	8005ef0 <_free_r>
 80050ae:	2300      	movs	r3, #0
 80050b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80050b8:	81a3      	strh	r3, [r4, #12]
 80050ba:	2300      	movs	r3, #0
 80050bc:	6063      	str	r3, [r4, #4]
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f043 0308 	orr.w	r3, r3, #8
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	b94b      	cbnz	r3, 80050e2 <__swsetup_r+0x7a>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d8:	d003      	beq.n	80050e2 <__swsetup_r+0x7a>
 80050da:	4621      	mov	r1, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	f001 fd9d 	bl	8006c1c <__smakebuf_r>
 80050e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050e6:	f013 0201 	ands.w	r2, r3, #1
 80050ea:	d00a      	beq.n	8005102 <__swsetup_r+0x9a>
 80050ec:	2200      	movs	r2, #0
 80050ee:	60a2      	str	r2, [r4, #8]
 80050f0:	6962      	ldr	r2, [r4, #20]
 80050f2:	4252      	negs	r2, r2
 80050f4:	61a2      	str	r2, [r4, #24]
 80050f6:	6922      	ldr	r2, [r4, #16]
 80050f8:	b942      	cbnz	r2, 800510c <__swsetup_r+0xa4>
 80050fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050fe:	d1c5      	bne.n	800508c <__swsetup_r+0x24>
 8005100:	bd38      	pop	{r3, r4, r5, pc}
 8005102:	0799      	lsls	r1, r3, #30
 8005104:	bf58      	it	pl
 8005106:	6962      	ldrpl	r2, [r4, #20]
 8005108:	60a2      	str	r2, [r4, #8]
 800510a:	e7f4      	b.n	80050f6 <__swsetup_r+0x8e>
 800510c:	2000      	movs	r0, #0
 800510e:	e7f7      	b.n	8005100 <__swsetup_r+0x98>
 8005110:	20000018 	.word	0x20000018

08005114 <memset>:
 8005114:	4402      	add	r2, r0
 8005116:	4603      	mov	r3, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	f803 1b01 	strb.w	r1, [r3], #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <strncmp>:
 8005124:	b510      	push	{r4, lr}
 8005126:	b16a      	cbz	r2, 8005144 <strncmp+0x20>
 8005128:	3901      	subs	r1, #1
 800512a:	1884      	adds	r4, r0, r2
 800512c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005130:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005134:	429a      	cmp	r2, r3
 8005136:	d103      	bne.n	8005140 <strncmp+0x1c>
 8005138:	42a0      	cmp	r0, r4
 800513a:	d001      	beq.n	8005140 <strncmp+0x1c>
 800513c:	2a00      	cmp	r2, #0
 800513e:	d1f5      	bne.n	800512c <strncmp+0x8>
 8005140:	1ad0      	subs	r0, r2, r3
 8005142:	bd10      	pop	{r4, pc}
 8005144:	4610      	mov	r0, r2
 8005146:	e7fc      	b.n	8005142 <strncmp+0x1e>

08005148 <_localeconv_r>:
 8005148:	4800      	ldr	r0, [pc, #0]	@ (800514c <_localeconv_r+0x4>)
 800514a:	4770      	bx	lr
 800514c:	20000158 	.word	0x20000158

08005150 <_close_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4d06      	ldr	r5, [pc, #24]	@ (800516c <_close_r+0x1c>)
 8005154:	2300      	movs	r3, #0
 8005156:	4604      	mov	r4, r0
 8005158:	4608      	mov	r0, r1
 800515a:	602b      	str	r3, [r5, #0]
 800515c:	f7fd f868 	bl	8002230 <_close>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_close_r+0x1a>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_close_r+0x1a>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	20000548 	.word	0x20000548

08005170 <_lseek_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4d07      	ldr	r5, [pc, #28]	@ (8005190 <_lseek_r+0x20>)
 8005174:	4604      	mov	r4, r0
 8005176:	4608      	mov	r0, r1
 8005178:	4611      	mov	r1, r2
 800517a:	2200      	movs	r2, #0
 800517c:	602a      	str	r2, [r5, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	f7fd f87d 	bl	800227e <_lseek>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_lseek_r+0x1e>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_lseek_r+0x1e>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20000548 	.word	0x20000548

08005194 <_read_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d07      	ldr	r5, [pc, #28]	@ (80051b4 <_read_r+0x20>)
 8005198:	4604      	mov	r4, r0
 800519a:	4608      	mov	r0, r1
 800519c:	4611      	mov	r1, r2
 800519e:	2200      	movs	r2, #0
 80051a0:	602a      	str	r2, [r5, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f7fd f80b 	bl	80021be <_read>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_read_r+0x1e>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_read_r+0x1e>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	20000548 	.word	0x20000548

080051b8 <_write_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4d07      	ldr	r5, [pc, #28]	@ (80051d8 <_write_r+0x20>)
 80051bc:	4604      	mov	r4, r0
 80051be:	4608      	mov	r0, r1
 80051c0:	4611      	mov	r1, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	602a      	str	r2, [r5, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f7fd f816 	bl	80021f8 <_write>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_write_r+0x1e>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_write_r+0x1e>
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	20000548 	.word	0x20000548

080051dc <__errno>:
 80051dc:	4b01      	ldr	r3, [pc, #4]	@ (80051e4 <__errno+0x8>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000018 	.word	0x20000018

080051e8 <__libc_init_array>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005220 <__libc_init_array+0x38>)
 80051ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005224 <__libc_init_array+0x3c>)
 80051ee:	1b64      	subs	r4, r4, r5
 80051f0:	10a4      	asrs	r4, r4, #2
 80051f2:	2600      	movs	r6, #0
 80051f4:	42a6      	cmp	r6, r4
 80051f6:	d109      	bne.n	800520c <__libc_init_array+0x24>
 80051f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005228 <__libc_init_array+0x40>)
 80051fa:	4c0c      	ldr	r4, [pc, #48]	@ (800522c <__libc_init_array+0x44>)
 80051fc:	f001 fe2c 	bl	8006e58 <_init>
 8005200:	1b64      	subs	r4, r4, r5
 8005202:	10a4      	asrs	r4, r4, #2
 8005204:	2600      	movs	r6, #0
 8005206:	42a6      	cmp	r6, r4
 8005208:	d105      	bne.n	8005216 <__libc_init_array+0x2e>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005210:	4798      	blx	r3
 8005212:	3601      	adds	r6, #1
 8005214:	e7ee      	b.n	80051f4 <__libc_init_array+0xc>
 8005216:	f855 3b04 	ldr.w	r3, [r5], #4
 800521a:	4798      	blx	r3
 800521c:	3601      	adds	r6, #1
 800521e:	e7f2      	b.n	8005206 <__libc_init_array+0x1e>
 8005220:	08007300 	.word	0x08007300
 8005224:	08007300 	.word	0x08007300
 8005228:	08007300 	.word	0x08007300
 800522c:	08007304 	.word	0x08007304

08005230 <__retarget_lock_init_recursive>:
 8005230:	4770      	bx	lr

08005232 <__retarget_lock_acquire_recursive>:
 8005232:	4770      	bx	lr

08005234 <__retarget_lock_release_recursive>:
 8005234:	4770      	bx	lr

08005236 <memcpy>:
 8005236:	440a      	add	r2, r1
 8005238:	4291      	cmp	r1, r2
 800523a:	f100 33ff 	add.w	r3, r0, #4294967295
 800523e:	d100      	bne.n	8005242 <memcpy+0xc>
 8005240:	4770      	bx	lr
 8005242:	b510      	push	{r4, lr}
 8005244:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800524c:	4291      	cmp	r1, r2
 800524e:	d1f9      	bne.n	8005244 <memcpy+0xe>
 8005250:	bd10      	pop	{r4, pc}

08005252 <quorem>:
 8005252:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005256:	6903      	ldr	r3, [r0, #16]
 8005258:	690c      	ldr	r4, [r1, #16]
 800525a:	42a3      	cmp	r3, r4
 800525c:	4607      	mov	r7, r0
 800525e:	db7e      	blt.n	800535e <quorem+0x10c>
 8005260:	3c01      	subs	r4, #1
 8005262:	f101 0814 	add.w	r8, r1, #20
 8005266:	00a3      	lsls	r3, r4, #2
 8005268:	f100 0514 	add.w	r5, r0, #20
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005278:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800527c:	3301      	adds	r3, #1
 800527e:	429a      	cmp	r2, r3
 8005280:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005284:	fbb2 f6f3 	udiv	r6, r2, r3
 8005288:	d32e      	bcc.n	80052e8 <quorem+0x96>
 800528a:	f04f 0a00 	mov.w	sl, #0
 800528e:	46c4      	mov	ip, r8
 8005290:	46ae      	mov	lr, r5
 8005292:	46d3      	mov	fp, sl
 8005294:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005298:	b298      	uxth	r0, r3
 800529a:	fb06 a000 	mla	r0, r6, r0, sl
 800529e:	0c02      	lsrs	r2, r0, #16
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	fb06 2303 	mla	r3, r6, r3, r2
 80052a6:	f8de 2000 	ldr.w	r2, [lr]
 80052aa:	b280      	uxth	r0, r0
 80052ac:	b292      	uxth	r2, r2
 80052ae:	1a12      	subs	r2, r2, r0
 80052b0:	445a      	add	r2, fp
 80052b2:	f8de 0000 	ldr.w	r0, [lr]
 80052b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80052c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80052c4:	b292      	uxth	r2, r2
 80052c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80052ca:	45e1      	cmp	r9, ip
 80052cc:	f84e 2b04 	str.w	r2, [lr], #4
 80052d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80052d4:	d2de      	bcs.n	8005294 <quorem+0x42>
 80052d6:	9b00      	ldr	r3, [sp, #0]
 80052d8:	58eb      	ldr	r3, [r5, r3]
 80052da:	b92b      	cbnz	r3, 80052e8 <quorem+0x96>
 80052dc:	9b01      	ldr	r3, [sp, #4]
 80052de:	3b04      	subs	r3, #4
 80052e0:	429d      	cmp	r5, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	d32f      	bcc.n	8005346 <quorem+0xf4>
 80052e6:	613c      	str	r4, [r7, #16]
 80052e8:	4638      	mov	r0, r7
 80052ea:	f001 f97b 	bl	80065e4 <__mcmp>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	db25      	blt.n	800533e <quorem+0xec>
 80052f2:	4629      	mov	r1, r5
 80052f4:	2000      	movs	r0, #0
 80052f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80052fa:	f8d1 c000 	ldr.w	ip, [r1]
 80052fe:	fa1f fe82 	uxth.w	lr, r2
 8005302:	fa1f f38c 	uxth.w	r3, ip
 8005306:	eba3 030e 	sub.w	r3, r3, lr
 800530a:	4403      	add	r3, r0
 800530c:	0c12      	lsrs	r2, r2, #16
 800530e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005312:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005316:	b29b      	uxth	r3, r3
 8005318:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800531c:	45c1      	cmp	r9, r8
 800531e:	f841 3b04 	str.w	r3, [r1], #4
 8005322:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005326:	d2e6      	bcs.n	80052f6 <quorem+0xa4>
 8005328:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800532c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005330:	b922      	cbnz	r2, 800533c <quorem+0xea>
 8005332:	3b04      	subs	r3, #4
 8005334:	429d      	cmp	r5, r3
 8005336:	461a      	mov	r2, r3
 8005338:	d30b      	bcc.n	8005352 <quorem+0x100>
 800533a:	613c      	str	r4, [r7, #16]
 800533c:	3601      	adds	r6, #1
 800533e:	4630      	mov	r0, r6
 8005340:	b003      	add	sp, #12
 8005342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	3b04      	subs	r3, #4
 800534a:	2a00      	cmp	r2, #0
 800534c:	d1cb      	bne.n	80052e6 <quorem+0x94>
 800534e:	3c01      	subs	r4, #1
 8005350:	e7c6      	b.n	80052e0 <quorem+0x8e>
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	3b04      	subs	r3, #4
 8005356:	2a00      	cmp	r2, #0
 8005358:	d1ef      	bne.n	800533a <quorem+0xe8>
 800535a:	3c01      	subs	r4, #1
 800535c:	e7ea      	b.n	8005334 <quorem+0xe2>
 800535e:	2000      	movs	r0, #0
 8005360:	e7ee      	b.n	8005340 <quorem+0xee>
 8005362:	0000      	movs	r0, r0
 8005364:	0000      	movs	r0, r0
	...

08005368 <_dtoa_r>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	69c7      	ldr	r7, [r0, #28]
 800536e:	b099      	sub	sp, #100	@ 0x64
 8005370:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005374:	ec55 4b10 	vmov	r4, r5, d0
 8005378:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800537a:	9109      	str	r1, [sp, #36]	@ 0x24
 800537c:	4683      	mov	fp, r0
 800537e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005380:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005382:	b97f      	cbnz	r7, 80053a4 <_dtoa_r+0x3c>
 8005384:	2010      	movs	r0, #16
 8005386:	f000 fdfd 	bl	8005f84 <malloc>
 800538a:	4602      	mov	r2, r0
 800538c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005390:	b920      	cbnz	r0, 800539c <_dtoa_r+0x34>
 8005392:	4ba7      	ldr	r3, [pc, #668]	@ (8005630 <_dtoa_r+0x2c8>)
 8005394:	21ef      	movs	r1, #239	@ 0xef
 8005396:	48a7      	ldr	r0, [pc, #668]	@ (8005634 <_dtoa_r+0x2cc>)
 8005398:	f001 fcae 	bl	8006cf8 <__assert_func>
 800539c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053a0:	6007      	str	r7, [r0, #0]
 80053a2:	60c7      	str	r7, [r0, #12]
 80053a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053a8:	6819      	ldr	r1, [r3, #0]
 80053aa:	b159      	cbz	r1, 80053c4 <_dtoa_r+0x5c>
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	604a      	str	r2, [r1, #4]
 80053b0:	2301      	movs	r3, #1
 80053b2:	4093      	lsls	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
 80053b6:	4658      	mov	r0, fp
 80053b8:	f000 feda 	bl	8006170 <_Bfree>
 80053bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	1e2b      	subs	r3, r5, #0
 80053c6:	bfb9      	ittee	lt
 80053c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80053cc:	9303      	strlt	r3, [sp, #12]
 80053ce:	2300      	movge	r3, #0
 80053d0:	6033      	strge	r3, [r6, #0]
 80053d2:	9f03      	ldr	r7, [sp, #12]
 80053d4:	4b98      	ldr	r3, [pc, #608]	@ (8005638 <_dtoa_r+0x2d0>)
 80053d6:	bfbc      	itt	lt
 80053d8:	2201      	movlt	r2, #1
 80053da:	6032      	strlt	r2, [r6, #0]
 80053dc:	43bb      	bics	r3, r7
 80053de:	d112      	bne.n	8005406 <_dtoa_r+0x9e>
 80053e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80053e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053ec:	4323      	orrs	r3, r4
 80053ee:	f000 854d 	beq.w	8005e8c <_dtoa_r+0xb24>
 80053f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80053f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800564c <_dtoa_r+0x2e4>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 854f 	beq.w	8005e9c <_dtoa_r+0xb34>
 80053fe:	f10a 0303 	add.w	r3, sl, #3
 8005402:	f000 bd49 	b.w	8005e98 <_dtoa_r+0xb30>
 8005406:	ed9d 7b02 	vldr	d7, [sp, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	ec51 0b17 	vmov	r0, r1, d7
 8005410:	2300      	movs	r3, #0
 8005412:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005416:	f7fb fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800541a:	4680      	mov	r8, r0
 800541c:	b158      	cbz	r0, 8005436 <_dtoa_r+0xce>
 800541e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005420:	2301      	movs	r3, #1
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005426:	b113      	cbz	r3, 800542e <_dtoa_r+0xc6>
 8005428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800542a:	4b84      	ldr	r3, [pc, #528]	@ (800563c <_dtoa_r+0x2d4>)
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005650 <_dtoa_r+0x2e8>
 8005432:	f000 bd33 	b.w	8005e9c <_dtoa_r+0xb34>
 8005436:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800543a:	aa16      	add	r2, sp, #88	@ 0x58
 800543c:	a917      	add	r1, sp, #92	@ 0x5c
 800543e:	4658      	mov	r0, fp
 8005440:	f001 f980 	bl	8006744 <__d2b>
 8005444:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005448:	4681      	mov	r9, r0
 800544a:	2e00      	cmp	r6, #0
 800544c:	d077      	beq.n	800553e <_dtoa_r+0x1d6>
 800544e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005450:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800545c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005460:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005464:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005468:	4619      	mov	r1, r3
 800546a:	2200      	movs	r2, #0
 800546c:	4b74      	ldr	r3, [pc, #464]	@ (8005640 <_dtoa_r+0x2d8>)
 800546e:	f7fa ff0b 	bl	8000288 <__aeabi_dsub>
 8005472:	a369      	add	r3, pc, #420	@ (adr r3, 8005618 <_dtoa_r+0x2b0>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fb f8be 	bl	80005f8 <__aeabi_dmul>
 800547c:	a368      	add	r3, pc, #416	@ (adr r3, 8005620 <_dtoa_r+0x2b8>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7fa ff03 	bl	800028c <__adddf3>
 8005486:	4604      	mov	r4, r0
 8005488:	4630      	mov	r0, r6
 800548a:	460d      	mov	r5, r1
 800548c:	f7fb f84a 	bl	8000524 <__aeabi_i2d>
 8005490:	a365      	add	r3, pc, #404	@ (adr r3, 8005628 <_dtoa_r+0x2c0>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fb f8af 	bl	80005f8 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fa fef3 	bl	800028c <__adddf3>
 80054a6:	4604      	mov	r4, r0
 80054a8:	460d      	mov	r5, r1
 80054aa:	f7fb fb55 	bl	8000b58 <__aeabi_d2iz>
 80054ae:	2200      	movs	r2, #0
 80054b0:	4607      	mov	r7, r0
 80054b2:	2300      	movs	r3, #0
 80054b4:	4620      	mov	r0, r4
 80054b6:	4629      	mov	r1, r5
 80054b8:	f7fb fb10 	bl	8000adc <__aeabi_dcmplt>
 80054bc:	b140      	cbz	r0, 80054d0 <_dtoa_r+0x168>
 80054be:	4638      	mov	r0, r7
 80054c0:	f7fb f830 	bl	8000524 <__aeabi_i2d>
 80054c4:	4622      	mov	r2, r4
 80054c6:	462b      	mov	r3, r5
 80054c8:	f7fb fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80054cc:	b900      	cbnz	r0, 80054d0 <_dtoa_r+0x168>
 80054ce:	3f01      	subs	r7, #1
 80054d0:	2f16      	cmp	r7, #22
 80054d2:	d851      	bhi.n	8005578 <_dtoa_r+0x210>
 80054d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005644 <_dtoa_r+0x2dc>)
 80054d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054e2:	f7fb fafb 	bl	8000adc <__aeabi_dcmplt>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d048      	beq.n	800557c <_dtoa_r+0x214>
 80054ea:	3f01      	subs	r7, #1
 80054ec:	2300      	movs	r3, #0
 80054ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80054f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80054f2:	1b9b      	subs	r3, r3, r6
 80054f4:	1e5a      	subs	r2, r3, #1
 80054f6:	bf44      	itt	mi
 80054f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80054fc:	2300      	movmi	r3, #0
 80054fe:	9208      	str	r2, [sp, #32]
 8005500:	bf54      	ite	pl
 8005502:	f04f 0800 	movpl.w	r8, #0
 8005506:	9308      	strmi	r3, [sp, #32]
 8005508:	2f00      	cmp	r7, #0
 800550a:	db39      	blt.n	8005580 <_dtoa_r+0x218>
 800550c:	9b08      	ldr	r3, [sp, #32]
 800550e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005510:	443b      	add	r3, r7
 8005512:	9308      	str	r3, [sp, #32]
 8005514:	2300      	movs	r3, #0
 8005516:	930a      	str	r3, [sp, #40]	@ 0x28
 8005518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800551a:	2b09      	cmp	r3, #9
 800551c:	d864      	bhi.n	80055e8 <_dtoa_r+0x280>
 800551e:	2b05      	cmp	r3, #5
 8005520:	bfc4      	itt	gt
 8005522:	3b04      	subgt	r3, #4
 8005524:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005528:	f1a3 0302 	sub.w	r3, r3, #2
 800552c:	bfcc      	ite	gt
 800552e:	2400      	movgt	r4, #0
 8005530:	2401      	movle	r4, #1
 8005532:	2b03      	cmp	r3, #3
 8005534:	d863      	bhi.n	80055fe <_dtoa_r+0x296>
 8005536:	e8df f003 	tbb	[pc, r3]
 800553a:	372a      	.short	0x372a
 800553c:	5535      	.short	0x5535
 800553e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005542:	441e      	add	r6, r3
 8005544:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005548:	2b20      	cmp	r3, #32
 800554a:	bfc1      	itttt	gt
 800554c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005550:	409f      	lslgt	r7, r3
 8005552:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005556:	fa24 f303 	lsrgt.w	r3, r4, r3
 800555a:	bfd6      	itet	le
 800555c:	f1c3 0320 	rsble	r3, r3, #32
 8005560:	ea47 0003 	orrgt.w	r0, r7, r3
 8005564:	fa04 f003 	lslle.w	r0, r4, r3
 8005568:	f7fa ffcc 	bl	8000504 <__aeabi_ui2d>
 800556c:	2201      	movs	r2, #1
 800556e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005572:	3e01      	subs	r6, #1
 8005574:	9214      	str	r2, [sp, #80]	@ 0x50
 8005576:	e777      	b.n	8005468 <_dtoa_r+0x100>
 8005578:	2301      	movs	r3, #1
 800557a:	e7b8      	b.n	80054ee <_dtoa_r+0x186>
 800557c:	9012      	str	r0, [sp, #72]	@ 0x48
 800557e:	e7b7      	b.n	80054f0 <_dtoa_r+0x188>
 8005580:	427b      	negs	r3, r7
 8005582:	930a      	str	r3, [sp, #40]	@ 0x28
 8005584:	2300      	movs	r3, #0
 8005586:	eba8 0807 	sub.w	r8, r8, r7
 800558a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800558c:	e7c4      	b.n	8005518 <_dtoa_r+0x1b0>
 800558e:	2300      	movs	r3, #0
 8005590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	dc35      	bgt.n	8005604 <_dtoa_r+0x29c>
 8005598:	2301      	movs	r3, #1
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	9307      	str	r3, [sp, #28]
 800559e:	461a      	mov	r2, r3
 80055a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80055a2:	e00b      	b.n	80055bc <_dtoa_r+0x254>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e7f3      	b.n	8005590 <_dtoa_r+0x228>
 80055a8:	2300      	movs	r3, #0
 80055aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	9307      	str	r3, [sp, #28]
 80055b8:	bfb8      	it	lt
 80055ba:	2301      	movlt	r3, #1
 80055bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80055c0:	2100      	movs	r1, #0
 80055c2:	2204      	movs	r2, #4
 80055c4:	f102 0514 	add.w	r5, r2, #20
 80055c8:	429d      	cmp	r5, r3
 80055ca:	d91f      	bls.n	800560c <_dtoa_r+0x2a4>
 80055cc:	6041      	str	r1, [r0, #4]
 80055ce:	4658      	mov	r0, fp
 80055d0:	f000 fd8e 	bl	80060f0 <_Balloc>
 80055d4:	4682      	mov	sl, r0
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d13c      	bne.n	8005654 <_dtoa_r+0x2ec>
 80055da:	4b1b      	ldr	r3, [pc, #108]	@ (8005648 <_dtoa_r+0x2e0>)
 80055dc:	4602      	mov	r2, r0
 80055de:	f240 11af 	movw	r1, #431	@ 0x1af
 80055e2:	e6d8      	b.n	8005396 <_dtoa_r+0x2e>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e7e0      	b.n	80055aa <_dtoa_r+0x242>
 80055e8:	2401      	movs	r4, #1
 80055ea:	2300      	movs	r3, #0
 80055ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	9307      	str	r3, [sp, #28]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2312      	movs	r3, #18
 80055fc:	e7d0      	b.n	80055a0 <_dtoa_r+0x238>
 80055fe:	2301      	movs	r3, #1
 8005600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005602:	e7f5      	b.n	80055f0 <_dtoa_r+0x288>
 8005604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	9307      	str	r3, [sp, #28]
 800560a:	e7d7      	b.n	80055bc <_dtoa_r+0x254>
 800560c:	3101      	adds	r1, #1
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	e7d8      	b.n	80055c4 <_dtoa_r+0x25c>
 8005612:	bf00      	nop
 8005614:	f3af 8000 	nop.w
 8005618:	636f4361 	.word	0x636f4361
 800561c:	3fd287a7 	.word	0x3fd287a7
 8005620:	8b60c8b3 	.word	0x8b60c8b3
 8005624:	3fc68a28 	.word	0x3fc68a28
 8005628:	509f79fb 	.word	0x509f79fb
 800562c:	3fd34413 	.word	0x3fd34413
 8005630:	08006fc9 	.word	0x08006fc9
 8005634:	08006fe0 	.word	0x08006fe0
 8005638:	7ff00000 	.word	0x7ff00000
 800563c:	08006f99 	.word	0x08006f99
 8005640:	3ff80000 	.word	0x3ff80000
 8005644:	080070d8 	.word	0x080070d8
 8005648:	08007038 	.word	0x08007038
 800564c:	08006fc5 	.word	0x08006fc5
 8005650:	08006f98 	.word	0x08006f98
 8005654:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005658:	6018      	str	r0, [r3, #0]
 800565a:	9b07      	ldr	r3, [sp, #28]
 800565c:	2b0e      	cmp	r3, #14
 800565e:	f200 80a4 	bhi.w	80057aa <_dtoa_r+0x442>
 8005662:	2c00      	cmp	r4, #0
 8005664:	f000 80a1 	beq.w	80057aa <_dtoa_r+0x442>
 8005668:	2f00      	cmp	r7, #0
 800566a:	dd33      	ble.n	80056d4 <_dtoa_r+0x36c>
 800566c:	4bad      	ldr	r3, [pc, #692]	@ (8005924 <_dtoa_r+0x5bc>)
 800566e:	f007 020f 	and.w	r2, r7, #15
 8005672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005676:	ed93 7b00 	vldr	d7, [r3]
 800567a:	05f8      	lsls	r0, r7, #23
 800567c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005680:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005684:	d516      	bpl.n	80056b4 <_dtoa_r+0x34c>
 8005686:	4ba8      	ldr	r3, [pc, #672]	@ (8005928 <_dtoa_r+0x5c0>)
 8005688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800568c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005690:	f7fb f8dc 	bl	800084c <__aeabi_ddiv>
 8005694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005698:	f004 040f 	and.w	r4, r4, #15
 800569c:	2603      	movs	r6, #3
 800569e:	4da2      	ldr	r5, [pc, #648]	@ (8005928 <_dtoa_r+0x5c0>)
 80056a0:	b954      	cbnz	r4, 80056b8 <_dtoa_r+0x350>
 80056a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056aa:	f7fb f8cf 	bl	800084c <__aeabi_ddiv>
 80056ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b2:	e028      	b.n	8005706 <_dtoa_r+0x39e>
 80056b4:	2602      	movs	r6, #2
 80056b6:	e7f2      	b.n	800569e <_dtoa_r+0x336>
 80056b8:	07e1      	lsls	r1, r4, #31
 80056ba:	d508      	bpl.n	80056ce <_dtoa_r+0x366>
 80056bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056c4:	f7fa ff98 	bl	80005f8 <__aeabi_dmul>
 80056c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056cc:	3601      	adds	r6, #1
 80056ce:	1064      	asrs	r4, r4, #1
 80056d0:	3508      	adds	r5, #8
 80056d2:	e7e5      	b.n	80056a0 <_dtoa_r+0x338>
 80056d4:	f000 80d2 	beq.w	800587c <_dtoa_r+0x514>
 80056d8:	427c      	negs	r4, r7
 80056da:	4b92      	ldr	r3, [pc, #584]	@ (8005924 <_dtoa_r+0x5bc>)
 80056dc:	4d92      	ldr	r5, [pc, #584]	@ (8005928 <_dtoa_r+0x5c0>)
 80056de:	f004 020f 	and.w	r2, r4, #15
 80056e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056ee:	f7fa ff83 	bl	80005f8 <__aeabi_dmul>
 80056f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056f6:	1124      	asrs	r4, r4, #4
 80056f8:	2300      	movs	r3, #0
 80056fa:	2602      	movs	r6, #2
 80056fc:	2c00      	cmp	r4, #0
 80056fe:	f040 80b2 	bne.w	8005866 <_dtoa_r+0x4fe>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1d3      	bne.n	80056ae <_dtoa_r+0x346>
 8005706:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005708:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80b7 	beq.w	8005880 <_dtoa_r+0x518>
 8005712:	4b86      	ldr	r3, [pc, #536]	@ (800592c <_dtoa_r+0x5c4>)
 8005714:	2200      	movs	r2, #0
 8005716:	4620      	mov	r0, r4
 8005718:	4629      	mov	r1, r5
 800571a:	f7fb f9df 	bl	8000adc <__aeabi_dcmplt>
 800571e:	2800      	cmp	r0, #0
 8005720:	f000 80ae 	beq.w	8005880 <_dtoa_r+0x518>
 8005724:	9b07      	ldr	r3, [sp, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80aa 	beq.w	8005880 <_dtoa_r+0x518>
 800572c:	9b00      	ldr	r3, [sp, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	dd37      	ble.n	80057a2 <_dtoa_r+0x43a>
 8005732:	1e7b      	subs	r3, r7, #1
 8005734:	9304      	str	r3, [sp, #16]
 8005736:	4620      	mov	r0, r4
 8005738:	4b7d      	ldr	r3, [pc, #500]	@ (8005930 <_dtoa_r+0x5c8>)
 800573a:	2200      	movs	r2, #0
 800573c:	4629      	mov	r1, r5
 800573e:	f7fa ff5b 	bl	80005f8 <__aeabi_dmul>
 8005742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005746:	9c00      	ldr	r4, [sp, #0]
 8005748:	3601      	adds	r6, #1
 800574a:	4630      	mov	r0, r6
 800574c:	f7fa feea 	bl	8000524 <__aeabi_i2d>
 8005750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005754:	f7fa ff50 	bl	80005f8 <__aeabi_dmul>
 8005758:	4b76      	ldr	r3, [pc, #472]	@ (8005934 <_dtoa_r+0x5cc>)
 800575a:	2200      	movs	r2, #0
 800575c:	f7fa fd96 	bl	800028c <__adddf3>
 8005760:	4605      	mov	r5, r0
 8005762:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005766:	2c00      	cmp	r4, #0
 8005768:	f040 808d 	bne.w	8005886 <_dtoa_r+0x51e>
 800576c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005770:	4b71      	ldr	r3, [pc, #452]	@ (8005938 <_dtoa_r+0x5d0>)
 8005772:	2200      	movs	r2, #0
 8005774:	f7fa fd88 	bl	8000288 <__aeabi_dsub>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005780:	462a      	mov	r2, r5
 8005782:	4633      	mov	r3, r6
 8005784:	f7fb f9c8 	bl	8000b18 <__aeabi_dcmpgt>
 8005788:	2800      	cmp	r0, #0
 800578a:	f040 828b 	bne.w	8005ca4 <_dtoa_r+0x93c>
 800578e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005792:	462a      	mov	r2, r5
 8005794:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005798:	f7fb f9a0 	bl	8000adc <__aeabi_dcmplt>
 800579c:	2800      	cmp	r0, #0
 800579e:	f040 8128 	bne.w	80059f2 <_dtoa_r+0x68a>
 80057a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80057a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80057aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f2c0 815a 	blt.w	8005a66 <_dtoa_r+0x6fe>
 80057b2:	2f0e      	cmp	r7, #14
 80057b4:	f300 8157 	bgt.w	8005a66 <_dtoa_r+0x6fe>
 80057b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005924 <_dtoa_r+0x5bc>)
 80057ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057be:	ed93 7b00 	vldr	d7, [r3]
 80057c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	ed8d 7b00 	vstr	d7, [sp]
 80057ca:	da03      	bge.n	80057d4 <_dtoa_r+0x46c>
 80057cc:	9b07      	ldr	r3, [sp, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f340 8101 	ble.w	80059d6 <_dtoa_r+0x66e>
 80057d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80057d8:	4656      	mov	r6, sl
 80057da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057de:	4620      	mov	r0, r4
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7fb f833 	bl	800084c <__aeabi_ddiv>
 80057e6:	f7fb f9b7 	bl	8000b58 <__aeabi_d2iz>
 80057ea:	4680      	mov	r8, r0
 80057ec:	f7fa fe9a 	bl	8000524 <__aeabi_i2d>
 80057f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057f4:	f7fa ff00 	bl	80005f8 <__aeabi_dmul>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4620      	mov	r0, r4
 80057fe:	4629      	mov	r1, r5
 8005800:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005804:	f7fa fd40 	bl	8000288 <__aeabi_dsub>
 8005808:	f806 4b01 	strb.w	r4, [r6], #1
 800580c:	9d07      	ldr	r5, [sp, #28]
 800580e:	eba6 040a 	sub.w	r4, r6, sl
 8005812:	42a5      	cmp	r5, r4
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	f040 8117 	bne.w	8005a4a <_dtoa_r+0x6e2>
 800581c:	f7fa fd36 	bl	800028c <__adddf3>
 8005820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005824:	4604      	mov	r4, r0
 8005826:	460d      	mov	r5, r1
 8005828:	f7fb f976 	bl	8000b18 <__aeabi_dcmpgt>
 800582c:	2800      	cmp	r0, #0
 800582e:	f040 80f9 	bne.w	8005a24 <_dtoa_r+0x6bc>
 8005832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	f7fb f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800583e:	b118      	cbz	r0, 8005848 <_dtoa_r+0x4e0>
 8005840:	f018 0f01 	tst.w	r8, #1
 8005844:	f040 80ee 	bne.w	8005a24 <_dtoa_r+0x6bc>
 8005848:	4649      	mov	r1, r9
 800584a:	4658      	mov	r0, fp
 800584c:	f000 fc90 	bl	8006170 <_Bfree>
 8005850:	2300      	movs	r3, #0
 8005852:	7033      	strb	r3, [r6, #0]
 8005854:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005856:	3701      	adds	r7, #1
 8005858:	601f      	str	r7, [r3, #0]
 800585a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 831d 	beq.w	8005e9c <_dtoa_r+0xb34>
 8005862:	601e      	str	r6, [r3, #0]
 8005864:	e31a      	b.n	8005e9c <_dtoa_r+0xb34>
 8005866:	07e2      	lsls	r2, r4, #31
 8005868:	d505      	bpl.n	8005876 <_dtoa_r+0x50e>
 800586a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800586e:	f7fa fec3 	bl	80005f8 <__aeabi_dmul>
 8005872:	3601      	adds	r6, #1
 8005874:	2301      	movs	r3, #1
 8005876:	1064      	asrs	r4, r4, #1
 8005878:	3508      	adds	r5, #8
 800587a:	e73f      	b.n	80056fc <_dtoa_r+0x394>
 800587c:	2602      	movs	r6, #2
 800587e:	e742      	b.n	8005706 <_dtoa_r+0x39e>
 8005880:	9c07      	ldr	r4, [sp, #28]
 8005882:	9704      	str	r7, [sp, #16]
 8005884:	e761      	b.n	800574a <_dtoa_r+0x3e2>
 8005886:	4b27      	ldr	r3, [pc, #156]	@ (8005924 <_dtoa_r+0x5bc>)
 8005888:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800588a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800588e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005892:	4454      	add	r4, sl
 8005894:	2900      	cmp	r1, #0
 8005896:	d053      	beq.n	8005940 <_dtoa_r+0x5d8>
 8005898:	4928      	ldr	r1, [pc, #160]	@ (800593c <_dtoa_r+0x5d4>)
 800589a:	2000      	movs	r0, #0
 800589c:	f7fa ffd6 	bl	800084c <__aeabi_ddiv>
 80058a0:	4633      	mov	r3, r6
 80058a2:	462a      	mov	r2, r5
 80058a4:	f7fa fcf0 	bl	8000288 <__aeabi_dsub>
 80058a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058ac:	4656      	mov	r6, sl
 80058ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058b2:	f7fb f951 	bl	8000b58 <__aeabi_d2iz>
 80058b6:	4605      	mov	r5, r0
 80058b8:	f7fa fe34 	bl	8000524 <__aeabi_i2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058c4:	f7fa fce0 	bl	8000288 <__aeabi_dsub>
 80058c8:	3530      	adds	r5, #48	@ 0x30
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058d2:	f806 5b01 	strb.w	r5, [r6], #1
 80058d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058da:	f7fb f8ff 	bl	8000adc <__aeabi_dcmplt>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d171      	bne.n	80059c6 <_dtoa_r+0x65e>
 80058e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058e6:	4911      	ldr	r1, [pc, #68]	@ (800592c <_dtoa_r+0x5c4>)
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7fa fccd 	bl	8000288 <__aeabi_dsub>
 80058ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058f2:	f7fb f8f3 	bl	8000adc <__aeabi_dcmplt>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	f040 8095 	bne.w	8005a26 <_dtoa_r+0x6be>
 80058fc:	42a6      	cmp	r6, r4
 80058fe:	f43f af50 	beq.w	80057a2 <_dtoa_r+0x43a>
 8005902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005906:	4b0a      	ldr	r3, [pc, #40]	@ (8005930 <_dtoa_r+0x5c8>)
 8005908:	2200      	movs	r2, #0
 800590a:	f7fa fe75 	bl	80005f8 <__aeabi_dmul>
 800590e:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <_dtoa_r+0x5c8>)
 8005910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005914:	2200      	movs	r2, #0
 8005916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800591a:	f7fa fe6d 	bl	80005f8 <__aeabi_dmul>
 800591e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005922:	e7c4      	b.n	80058ae <_dtoa_r+0x546>
 8005924:	080070d8 	.word	0x080070d8
 8005928:	080070b0 	.word	0x080070b0
 800592c:	3ff00000 	.word	0x3ff00000
 8005930:	40240000 	.word	0x40240000
 8005934:	401c0000 	.word	0x401c0000
 8005938:	40140000 	.word	0x40140000
 800593c:	3fe00000 	.word	0x3fe00000
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	f7fa fe58 	bl	80005f8 <__aeabi_dmul>
 8005948:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800594c:	9415      	str	r4, [sp, #84]	@ 0x54
 800594e:	4656      	mov	r6, sl
 8005950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005954:	f7fb f900 	bl	8000b58 <__aeabi_d2iz>
 8005958:	4605      	mov	r5, r0
 800595a:	f7fa fde3 	bl	8000524 <__aeabi_i2d>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005966:	f7fa fc8f 	bl	8000288 <__aeabi_dsub>
 800596a:	3530      	adds	r5, #48	@ 0x30
 800596c:	f806 5b01 	strb.w	r5, [r6], #1
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	42a6      	cmp	r6, r4
 8005976:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	d124      	bne.n	80059ca <_dtoa_r+0x662>
 8005980:	4bac      	ldr	r3, [pc, #688]	@ (8005c34 <_dtoa_r+0x8cc>)
 8005982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005986:	f7fa fc81 	bl	800028c <__adddf3>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005992:	f7fb f8c1 	bl	8000b18 <__aeabi_dcmpgt>
 8005996:	2800      	cmp	r0, #0
 8005998:	d145      	bne.n	8005a26 <_dtoa_r+0x6be>
 800599a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800599e:	49a5      	ldr	r1, [pc, #660]	@ (8005c34 <_dtoa_r+0x8cc>)
 80059a0:	2000      	movs	r0, #0
 80059a2:	f7fa fc71 	bl	8000288 <__aeabi_dsub>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ae:	f7fb f895 	bl	8000adc <__aeabi_dcmplt>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f43f aef5 	beq.w	80057a2 <_dtoa_r+0x43a>
 80059b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80059ba:	1e73      	subs	r3, r6, #1
 80059bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80059be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059c2:	2b30      	cmp	r3, #48	@ 0x30
 80059c4:	d0f8      	beq.n	80059b8 <_dtoa_r+0x650>
 80059c6:	9f04      	ldr	r7, [sp, #16]
 80059c8:	e73e      	b.n	8005848 <_dtoa_r+0x4e0>
 80059ca:	4b9b      	ldr	r3, [pc, #620]	@ (8005c38 <_dtoa_r+0x8d0>)
 80059cc:	f7fa fe14 	bl	80005f8 <__aeabi_dmul>
 80059d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d4:	e7bc      	b.n	8005950 <_dtoa_r+0x5e8>
 80059d6:	d10c      	bne.n	80059f2 <_dtoa_r+0x68a>
 80059d8:	4b98      	ldr	r3, [pc, #608]	@ (8005c3c <_dtoa_r+0x8d4>)
 80059da:	2200      	movs	r2, #0
 80059dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059e0:	f7fa fe0a 	bl	80005f8 <__aeabi_dmul>
 80059e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059e8:	f7fb f88c 	bl	8000b04 <__aeabi_dcmpge>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	f000 8157 	beq.w	8005ca0 <_dtoa_r+0x938>
 80059f2:	2400      	movs	r4, #0
 80059f4:	4625      	mov	r5, r4
 80059f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059f8:	43db      	mvns	r3, r3
 80059fa:	9304      	str	r3, [sp, #16]
 80059fc:	4656      	mov	r6, sl
 80059fe:	2700      	movs	r7, #0
 8005a00:	4621      	mov	r1, r4
 8005a02:	4658      	mov	r0, fp
 8005a04:	f000 fbb4 	bl	8006170 <_Bfree>
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	d0dc      	beq.n	80059c6 <_dtoa_r+0x65e>
 8005a0c:	b12f      	cbz	r7, 8005a1a <_dtoa_r+0x6b2>
 8005a0e:	42af      	cmp	r7, r5
 8005a10:	d003      	beq.n	8005a1a <_dtoa_r+0x6b2>
 8005a12:	4639      	mov	r1, r7
 8005a14:	4658      	mov	r0, fp
 8005a16:	f000 fbab 	bl	8006170 <_Bfree>
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4658      	mov	r0, fp
 8005a1e:	f000 fba7 	bl	8006170 <_Bfree>
 8005a22:	e7d0      	b.n	80059c6 <_dtoa_r+0x65e>
 8005a24:	9704      	str	r7, [sp, #16]
 8005a26:	4633      	mov	r3, r6
 8005a28:	461e      	mov	r6, r3
 8005a2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a2e:	2a39      	cmp	r2, #57	@ 0x39
 8005a30:	d107      	bne.n	8005a42 <_dtoa_r+0x6da>
 8005a32:	459a      	cmp	sl, r3
 8005a34:	d1f8      	bne.n	8005a28 <_dtoa_r+0x6c0>
 8005a36:	9a04      	ldr	r2, [sp, #16]
 8005a38:	3201      	adds	r2, #1
 8005a3a:	9204      	str	r2, [sp, #16]
 8005a3c:	2230      	movs	r2, #48	@ 0x30
 8005a3e:	f88a 2000 	strb.w	r2, [sl]
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	3201      	adds	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e7bd      	b.n	80059c6 <_dtoa_r+0x65e>
 8005a4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005c38 <_dtoa_r+0x8d0>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f7fa fdd3 	bl	80005f8 <__aeabi_dmul>
 8005a52:	2200      	movs	r2, #0
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	460d      	mov	r5, r1
 8005a5a:	f7fb f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f43f aebb 	beq.w	80057da <_dtoa_r+0x472>
 8005a64:	e6f0      	b.n	8005848 <_dtoa_r+0x4e0>
 8005a66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a68:	2a00      	cmp	r2, #0
 8005a6a:	f000 80db 	beq.w	8005c24 <_dtoa_r+0x8bc>
 8005a6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a70:	2a01      	cmp	r2, #1
 8005a72:	f300 80bf 	bgt.w	8005bf4 <_dtoa_r+0x88c>
 8005a76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	f000 80b7 	beq.w	8005bec <_dtoa_r+0x884>
 8005a7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a84:	4646      	mov	r6, r8
 8005a86:	9a08      	ldr	r2, [sp, #32]
 8005a88:	2101      	movs	r1, #1
 8005a8a:	441a      	add	r2, r3
 8005a8c:	4658      	mov	r0, fp
 8005a8e:	4498      	add	r8, r3
 8005a90:	9208      	str	r2, [sp, #32]
 8005a92:	f000 fc21 	bl	80062d8 <__i2b>
 8005a96:	4605      	mov	r5, r0
 8005a98:	b15e      	cbz	r6, 8005ab2 <_dtoa_r+0x74a>
 8005a9a:	9b08      	ldr	r3, [sp, #32]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dd08      	ble.n	8005ab2 <_dtoa_r+0x74a>
 8005aa0:	42b3      	cmp	r3, r6
 8005aa2:	9a08      	ldr	r2, [sp, #32]
 8005aa4:	bfa8      	it	ge
 8005aa6:	4633      	movge	r3, r6
 8005aa8:	eba8 0803 	sub.w	r8, r8, r3
 8005aac:	1af6      	subs	r6, r6, r3
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	9308      	str	r3, [sp, #32]
 8005ab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ab4:	b1f3      	cbz	r3, 8005af4 <_dtoa_r+0x78c>
 8005ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80b7 	beq.w	8005c2c <_dtoa_r+0x8c4>
 8005abe:	b18c      	cbz	r4, 8005ae4 <_dtoa_r+0x77c>
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	4658      	mov	r0, fp
 8005ac6:	f000 fcc7 	bl	8006458 <__pow5mult>
 8005aca:	464a      	mov	r2, r9
 8005acc:	4601      	mov	r1, r0
 8005ace:	4605      	mov	r5, r0
 8005ad0:	4658      	mov	r0, fp
 8005ad2:	f000 fc17 	bl	8006304 <__multiply>
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	9004      	str	r0, [sp, #16]
 8005ada:	4658      	mov	r0, fp
 8005adc:	f000 fb48 	bl	8006170 <_Bfree>
 8005ae0:	9b04      	ldr	r3, [sp, #16]
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ae6:	1b1a      	subs	r2, r3, r4
 8005ae8:	d004      	beq.n	8005af4 <_dtoa_r+0x78c>
 8005aea:	4649      	mov	r1, r9
 8005aec:	4658      	mov	r0, fp
 8005aee:	f000 fcb3 	bl	8006458 <__pow5mult>
 8005af2:	4681      	mov	r9, r0
 8005af4:	2101      	movs	r1, #1
 8005af6:	4658      	mov	r0, fp
 8005af8:	f000 fbee 	bl	80062d8 <__i2b>
 8005afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005afe:	4604      	mov	r4, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 81cf 	beq.w	8005ea4 <_dtoa_r+0xb3c>
 8005b06:	461a      	mov	r2, r3
 8005b08:	4601      	mov	r1, r0
 8005b0a:	4658      	mov	r0, fp
 8005b0c:	f000 fca4 	bl	8006458 <__pow5mult>
 8005b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	4604      	mov	r4, r0
 8005b16:	f300 8095 	bgt.w	8005c44 <_dtoa_r+0x8dc>
 8005b1a:	9b02      	ldr	r3, [sp, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 8087 	bne.w	8005c30 <_dtoa_r+0x8c8>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f040 8089 	bne.w	8005c40 <_dtoa_r+0x8d8>
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b34:	0d1b      	lsrs	r3, r3, #20
 8005b36:	051b      	lsls	r3, r3, #20
 8005b38:	b12b      	cbz	r3, 8005b46 <_dtoa_r+0x7de>
 8005b3a:	9b08      	ldr	r3, [sp, #32]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	9308      	str	r3, [sp, #32]
 8005b40:	f108 0801 	add.w	r8, r8, #1
 8005b44:	2301      	movs	r3, #1
 8005b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 81b0 	beq.w	8005eb0 <_dtoa_r+0xb48>
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b56:	6918      	ldr	r0, [r3, #16]
 8005b58:	f000 fb72 	bl	8006240 <__hi0bits>
 8005b5c:	f1c0 0020 	rsb	r0, r0, #32
 8005b60:	9b08      	ldr	r3, [sp, #32]
 8005b62:	4418      	add	r0, r3
 8005b64:	f010 001f 	ands.w	r0, r0, #31
 8005b68:	d077      	beq.n	8005c5a <_dtoa_r+0x8f2>
 8005b6a:	f1c0 0320 	rsb	r3, r0, #32
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	dd6b      	ble.n	8005c4a <_dtoa_r+0x8e2>
 8005b72:	9b08      	ldr	r3, [sp, #32]
 8005b74:	f1c0 001c 	rsb	r0, r0, #28
 8005b78:	4403      	add	r3, r0
 8005b7a:	4480      	add	r8, r0
 8005b7c:	4406      	add	r6, r0
 8005b7e:	9308      	str	r3, [sp, #32]
 8005b80:	f1b8 0f00 	cmp.w	r8, #0
 8005b84:	dd05      	ble.n	8005b92 <_dtoa_r+0x82a>
 8005b86:	4649      	mov	r1, r9
 8005b88:	4642      	mov	r2, r8
 8005b8a:	4658      	mov	r0, fp
 8005b8c:	f000 fcbe 	bl	800650c <__lshift>
 8005b90:	4681      	mov	r9, r0
 8005b92:	9b08      	ldr	r3, [sp, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dd05      	ble.n	8005ba4 <_dtoa_r+0x83c>
 8005b98:	4621      	mov	r1, r4
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4658      	mov	r0, fp
 8005b9e:	f000 fcb5 	bl	800650c <__lshift>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d059      	beq.n	8005c5e <_dtoa_r+0x8f6>
 8005baa:	4621      	mov	r1, r4
 8005bac:	4648      	mov	r0, r9
 8005bae:	f000 fd19 	bl	80065e4 <__mcmp>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	da53      	bge.n	8005c5e <_dtoa_r+0x8f6>
 8005bb6:	1e7b      	subs	r3, r7, #1
 8005bb8:	9304      	str	r3, [sp, #16]
 8005bba:	4649      	mov	r1, r9
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	220a      	movs	r2, #10
 8005bc0:	4658      	mov	r0, fp
 8005bc2:	f000 faf7 	bl	80061b4 <__multadd>
 8005bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bc8:	4681      	mov	r9, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8172 	beq.w	8005eb4 <_dtoa_r+0xb4c>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	220a      	movs	r2, #10
 8005bd6:	4658      	mov	r0, fp
 8005bd8:	f000 faec 	bl	80061b4 <__multadd>
 8005bdc:	9b00      	ldr	r3, [sp, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	4605      	mov	r5, r0
 8005be2:	dc67      	bgt.n	8005cb4 <_dtoa_r+0x94c>
 8005be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	dc41      	bgt.n	8005c6e <_dtoa_r+0x906>
 8005bea:	e063      	b.n	8005cb4 <_dtoa_r+0x94c>
 8005bec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005bee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005bf2:	e746      	b.n	8005a82 <_dtoa_r+0x71a>
 8005bf4:	9b07      	ldr	r3, [sp, #28]
 8005bf6:	1e5c      	subs	r4, r3, #1
 8005bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	bfbf      	itttt	lt
 8005bfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005c02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c04:	1ae3      	sublt	r3, r4, r3
 8005c06:	bfb4      	ite	lt
 8005c08:	18d2      	addlt	r2, r2, r3
 8005c0a:	1b1c      	subge	r4, r3, r4
 8005c0c:	9b07      	ldr	r3, [sp, #28]
 8005c0e:	bfbc      	itt	lt
 8005c10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005c12:	2400      	movlt	r4, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bfb5      	itete	lt
 8005c18:	eba8 0603 	sublt.w	r6, r8, r3
 8005c1c:	9b07      	ldrge	r3, [sp, #28]
 8005c1e:	2300      	movlt	r3, #0
 8005c20:	4646      	movge	r6, r8
 8005c22:	e730      	b.n	8005a86 <_dtoa_r+0x71e>
 8005c24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c28:	4646      	mov	r6, r8
 8005c2a:	e735      	b.n	8005a98 <_dtoa_r+0x730>
 8005c2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c2e:	e75c      	b.n	8005aea <_dtoa_r+0x782>
 8005c30:	2300      	movs	r3, #0
 8005c32:	e788      	b.n	8005b46 <_dtoa_r+0x7de>
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	40240000 	.word	0x40240000
 8005c3c:	40140000 	.word	0x40140000
 8005c40:	9b02      	ldr	r3, [sp, #8]
 8005c42:	e780      	b.n	8005b46 <_dtoa_r+0x7de>
 8005c44:	2300      	movs	r3, #0
 8005c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c48:	e782      	b.n	8005b50 <_dtoa_r+0x7e8>
 8005c4a:	d099      	beq.n	8005b80 <_dtoa_r+0x818>
 8005c4c:	9a08      	ldr	r2, [sp, #32]
 8005c4e:	331c      	adds	r3, #28
 8005c50:	441a      	add	r2, r3
 8005c52:	4498      	add	r8, r3
 8005c54:	441e      	add	r6, r3
 8005c56:	9208      	str	r2, [sp, #32]
 8005c58:	e792      	b.n	8005b80 <_dtoa_r+0x818>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	e7f6      	b.n	8005c4c <_dtoa_r+0x8e4>
 8005c5e:	9b07      	ldr	r3, [sp, #28]
 8005c60:	9704      	str	r7, [sp, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	dc20      	bgt.n	8005ca8 <_dtoa_r+0x940>
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	dd1e      	ble.n	8005cac <_dtoa_r+0x944>
 8005c6e:	9b00      	ldr	r3, [sp, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f47f aec0 	bne.w	80059f6 <_dtoa_r+0x68e>
 8005c76:	4621      	mov	r1, r4
 8005c78:	2205      	movs	r2, #5
 8005c7a:	4658      	mov	r0, fp
 8005c7c:	f000 fa9a 	bl	80061b4 <__multadd>
 8005c80:	4601      	mov	r1, r0
 8005c82:	4604      	mov	r4, r0
 8005c84:	4648      	mov	r0, r9
 8005c86:	f000 fcad 	bl	80065e4 <__mcmp>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f77f aeb3 	ble.w	80059f6 <_dtoa_r+0x68e>
 8005c90:	4656      	mov	r6, sl
 8005c92:	2331      	movs	r3, #49	@ 0x31
 8005c94:	f806 3b01 	strb.w	r3, [r6], #1
 8005c98:	9b04      	ldr	r3, [sp, #16]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	e6ae      	b.n	80059fe <_dtoa_r+0x696>
 8005ca0:	9c07      	ldr	r4, [sp, #28]
 8005ca2:	9704      	str	r7, [sp, #16]
 8005ca4:	4625      	mov	r5, r4
 8005ca6:	e7f3      	b.n	8005c90 <_dtoa_r+0x928>
 8005ca8:	9b07      	ldr	r3, [sp, #28]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8104 	beq.w	8005ebc <_dtoa_r+0xb54>
 8005cb4:	2e00      	cmp	r6, #0
 8005cb6:	dd05      	ble.n	8005cc4 <_dtoa_r+0x95c>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4632      	mov	r2, r6
 8005cbc:	4658      	mov	r0, fp
 8005cbe:	f000 fc25 	bl	800650c <__lshift>
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d05a      	beq.n	8005d80 <_dtoa_r+0xa18>
 8005cca:	6869      	ldr	r1, [r5, #4]
 8005ccc:	4658      	mov	r0, fp
 8005cce:	f000 fa0f 	bl	80060f0 <_Balloc>
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	b928      	cbnz	r0, 8005ce2 <_dtoa_r+0x97a>
 8005cd6:	4b84      	ldr	r3, [pc, #528]	@ (8005ee8 <_dtoa_r+0xb80>)
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005cde:	f7ff bb5a 	b.w	8005396 <_dtoa_r+0x2e>
 8005ce2:	692a      	ldr	r2, [r5, #16]
 8005ce4:	3202      	adds	r2, #2
 8005ce6:	0092      	lsls	r2, r2, #2
 8005ce8:	f105 010c 	add.w	r1, r5, #12
 8005cec:	300c      	adds	r0, #12
 8005cee:	f7ff faa2 	bl	8005236 <memcpy>
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4658      	mov	r0, fp
 8005cf8:	f000 fc08 	bl	800650c <__lshift>
 8005cfc:	f10a 0301 	add.w	r3, sl, #1
 8005d00:	9307      	str	r3, [sp, #28]
 8005d02:	9b00      	ldr	r3, [sp, #0]
 8005d04:	4453      	add	r3, sl
 8005d06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d08:	9b02      	ldr	r3, [sp, #8]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	462f      	mov	r7, r5
 8005d10:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d12:	4605      	mov	r5, r0
 8005d14:	9b07      	ldr	r3, [sp, #28]
 8005d16:	4621      	mov	r1, r4
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	4648      	mov	r0, r9
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	f7ff fa98 	bl	8005252 <quorem>
 8005d22:	4639      	mov	r1, r7
 8005d24:	9002      	str	r0, [sp, #8]
 8005d26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d2a:	4648      	mov	r0, r9
 8005d2c:	f000 fc5a 	bl	80065e4 <__mcmp>
 8005d30:	462a      	mov	r2, r5
 8005d32:	9008      	str	r0, [sp, #32]
 8005d34:	4621      	mov	r1, r4
 8005d36:	4658      	mov	r0, fp
 8005d38:	f000 fc70 	bl	800661c <__mdiff>
 8005d3c:	68c2      	ldr	r2, [r0, #12]
 8005d3e:	4606      	mov	r6, r0
 8005d40:	bb02      	cbnz	r2, 8005d84 <_dtoa_r+0xa1c>
 8005d42:	4601      	mov	r1, r0
 8005d44:	4648      	mov	r0, r9
 8005d46:	f000 fc4d 	bl	80065e4 <__mcmp>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4658      	mov	r0, fp
 8005d50:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d52:	f000 fa0d 	bl	8006170 <_Bfree>
 8005d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d5a:	9e07      	ldr	r6, [sp, #28]
 8005d5c:	ea43 0102 	orr.w	r1, r3, r2
 8005d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d62:	4319      	orrs	r1, r3
 8005d64:	d110      	bne.n	8005d88 <_dtoa_r+0xa20>
 8005d66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d6a:	d029      	beq.n	8005dc0 <_dtoa_r+0xa58>
 8005d6c:	9b08      	ldr	r3, [sp, #32]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	dd02      	ble.n	8005d78 <_dtoa_r+0xa10>
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005d78:	9b00      	ldr	r3, [sp, #0]
 8005d7a:	f883 8000 	strb.w	r8, [r3]
 8005d7e:	e63f      	b.n	8005a00 <_dtoa_r+0x698>
 8005d80:	4628      	mov	r0, r5
 8005d82:	e7bb      	b.n	8005cfc <_dtoa_r+0x994>
 8005d84:	2201      	movs	r2, #1
 8005d86:	e7e1      	b.n	8005d4c <_dtoa_r+0x9e4>
 8005d88:	9b08      	ldr	r3, [sp, #32]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	db04      	blt.n	8005d98 <_dtoa_r+0xa30>
 8005d8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d90:	430b      	orrs	r3, r1
 8005d92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d94:	430b      	orrs	r3, r1
 8005d96:	d120      	bne.n	8005dda <_dtoa_r+0xa72>
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	dded      	ble.n	8005d78 <_dtoa_r+0xa10>
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4658      	mov	r0, fp
 8005da2:	f000 fbb3 	bl	800650c <__lshift>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4681      	mov	r9, r0
 8005daa:	f000 fc1b 	bl	80065e4 <__mcmp>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	dc03      	bgt.n	8005dba <_dtoa_r+0xa52>
 8005db2:	d1e1      	bne.n	8005d78 <_dtoa_r+0xa10>
 8005db4:	f018 0f01 	tst.w	r8, #1
 8005db8:	d0de      	beq.n	8005d78 <_dtoa_r+0xa10>
 8005dba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dbe:	d1d8      	bne.n	8005d72 <_dtoa_r+0xa0a>
 8005dc0:	9a00      	ldr	r2, [sp, #0]
 8005dc2:	2339      	movs	r3, #57	@ 0x39
 8005dc4:	7013      	strb	r3, [r2, #0]
 8005dc6:	4633      	mov	r3, r6
 8005dc8:	461e      	mov	r6, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005dd0:	2a39      	cmp	r2, #57	@ 0x39
 8005dd2:	d052      	beq.n	8005e7a <_dtoa_r+0xb12>
 8005dd4:	3201      	adds	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	e612      	b.n	8005a00 <_dtoa_r+0x698>
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	dd07      	ble.n	8005dee <_dtoa_r+0xa86>
 8005dde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005de2:	d0ed      	beq.n	8005dc0 <_dtoa_r+0xa58>
 8005de4:	9a00      	ldr	r2, [sp, #0]
 8005de6:	f108 0301 	add.w	r3, r8, #1
 8005dea:	7013      	strb	r3, [r2, #0]
 8005dec:	e608      	b.n	8005a00 <_dtoa_r+0x698>
 8005dee:	9b07      	ldr	r3, [sp, #28]
 8005df0:	9a07      	ldr	r2, [sp, #28]
 8005df2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005df6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d028      	beq.n	8005e4e <_dtoa_r+0xae6>
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	2300      	movs	r3, #0
 8005e00:	220a      	movs	r2, #10
 8005e02:	4658      	mov	r0, fp
 8005e04:	f000 f9d6 	bl	80061b4 <__multadd>
 8005e08:	42af      	cmp	r7, r5
 8005e0a:	4681      	mov	r9, r0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	f04f 020a 	mov.w	r2, #10
 8005e14:	4639      	mov	r1, r7
 8005e16:	4658      	mov	r0, fp
 8005e18:	d107      	bne.n	8005e2a <_dtoa_r+0xac2>
 8005e1a:	f000 f9cb 	bl	80061b4 <__multadd>
 8005e1e:	4607      	mov	r7, r0
 8005e20:	4605      	mov	r5, r0
 8005e22:	9b07      	ldr	r3, [sp, #28]
 8005e24:	3301      	adds	r3, #1
 8005e26:	9307      	str	r3, [sp, #28]
 8005e28:	e774      	b.n	8005d14 <_dtoa_r+0x9ac>
 8005e2a:	f000 f9c3 	bl	80061b4 <__multadd>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	4607      	mov	r7, r0
 8005e32:	2300      	movs	r3, #0
 8005e34:	220a      	movs	r2, #10
 8005e36:	4658      	mov	r0, fp
 8005e38:	f000 f9bc 	bl	80061b4 <__multadd>
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	e7f0      	b.n	8005e22 <_dtoa_r+0xaba>
 8005e40:	9b00      	ldr	r3, [sp, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bfcc      	ite	gt
 8005e46:	461e      	movgt	r6, r3
 8005e48:	2601      	movle	r6, #1
 8005e4a:	4456      	add	r6, sl
 8005e4c:	2700      	movs	r7, #0
 8005e4e:	4649      	mov	r1, r9
 8005e50:	2201      	movs	r2, #1
 8005e52:	4658      	mov	r0, fp
 8005e54:	f000 fb5a 	bl	800650c <__lshift>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4681      	mov	r9, r0
 8005e5c:	f000 fbc2 	bl	80065e4 <__mcmp>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	dcb0      	bgt.n	8005dc6 <_dtoa_r+0xa5e>
 8005e64:	d102      	bne.n	8005e6c <_dtoa_r+0xb04>
 8005e66:	f018 0f01 	tst.w	r8, #1
 8005e6a:	d1ac      	bne.n	8005dc6 <_dtoa_r+0xa5e>
 8005e6c:	4633      	mov	r3, r6
 8005e6e:	461e      	mov	r6, r3
 8005e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e74:	2a30      	cmp	r2, #48	@ 0x30
 8005e76:	d0fa      	beq.n	8005e6e <_dtoa_r+0xb06>
 8005e78:	e5c2      	b.n	8005a00 <_dtoa_r+0x698>
 8005e7a:	459a      	cmp	sl, r3
 8005e7c:	d1a4      	bne.n	8005dc8 <_dtoa_r+0xa60>
 8005e7e:	9b04      	ldr	r3, [sp, #16]
 8005e80:	3301      	adds	r3, #1
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	2331      	movs	r3, #49	@ 0x31
 8005e86:	f88a 3000 	strb.w	r3, [sl]
 8005e8a:	e5b9      	b.n	8005a00 <_dtoa_r+0x698>
 8005e8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005eec <_dtoa_r+0xb84>
 8005e92:	b11b      	cbz	r3, 8005e9c <_dtoa_r+0xb34>
 8005e94:	f10a 0308 	add.w	r3, sl, #8
 8005e98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	4650      	mov	r0, sl
 8005e9e:	b019      	add	sp, #100	@ 0x64
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	f77f ae37 	ble.w	8005b1a <_dtoa_r+0x7b2>
 8005eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	e655      	b.n	8005b60 <_dtoa_r+0x7f8>
 8005eb4:	9b00      	ldr	r3, [sp, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f77f aed6 	ble.w	8005c68 <_dtoa_r+0x900>
 8005ebc:	4656      	mov	r6, sl
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4648      	mov	r0, r9
 8005ec2:	f7ff f9c6 	bl	8005252 <quorem>
 8005ec6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005eca:	f806 8b01 	strb.w	r8, [r6], #1
 8005ece:	9b00      	ldr	r3, [sp, #0]
 8005ed0:	eba6 020a 	sub.w	r2, r6, sl
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	ddb3      	ble.n	8005e40 <_dtoa_r+0xad8>
 8005ed8:	4649      	mov	r1, r9
 8005eda:	2300      	movs	r3, #0
 8005edc:	220a      	movs	r2, #10
 8005ede:	4658      	mov	r0, fp
 8005ee0:	f000 f968 	bl	80061b4 <__multadd>
 8005ee4:	4681      	mov	r9, r0
 8005ee6:	e7ea      	b.n	8005ebe <_dtoa_r+0xb56>
 8005ee8:	08007038 	.word	0x08007038
 8005eec:	08006fbc 	.word	0x08006fbc

08005ef0 <_free_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d041      	beq.n	8005f7c <_free_r+0x8c>
 8005ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005efc:	1f0c      	subs	r4, r1, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfb8      	it	lt
 8005f02:	18e4      	addlt	r4, r4, r3
 8005f04:	f000 f8e8 	bl	80060d8 <__malloc_lock>
 8005f08:	4a1d      	ldr	r2, [pc, #116]	@ (8005f80 <_free_r+0x90>)
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	b933      	cbnz	r3, 8005f1c <_free_r+0x2c>
 8005f0e:	6063      	str	r3, [r4, #4]
 8005f10:	6014      	str	r4, [r2, #0]
 8005f12:	4628      	mov	r0, r5
 8005f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f18:	f000 b8e4 	b.w	80060e4 <__malloc_unlock>
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	d908      	bls.n	8005f32 <_free_r+0x42>
 8005f20:	6820      	ldr	r0, [r4, #0]
 8005f22:	1821      	adds	r1, r4, r0
 8005f24:	428b      	cmp	r3, r1
 8005f26:	bf01      	itttt	eq
 8005f28:	6819      	ldreq	r1, [r3, #0]
 8005f2a:	685b      	ldreq	r3, [r3, #4]
 8005f2c:	1809      	addeq	r1, r1, r0
 8005f2e:	6021      	streq	r1, [r4, #0]
 8005f30:	e7ed      	b.n	8005f0e <_free_r+0x1e>
 8005f32:	461a      	mov	r2, r3
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	b10b      	cbz	r3, 8005f3c <_free_r+0x4c>
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	d9fa      	bls.n	8005f32 <_free_r+0x42>
 8005f3c:	6811      	ldr	r1, [r2, #0]
 8005f3e:	1850      	adds	r0, r2, r1
 8005f40:	42a0      	cmp	r0, r4
 8005f42:	d10b      	bne.n	8005f5c <_free_r+0x6c>
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	4401      	add	r1, r0
 8005f48:	1850      	adds	r0, r2, r1
 8005f4a:	4283      	cmp	r3, r0
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	d1e0      	bne.n	8005f12 <_free_r+0x22>
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	6053      	str	r3, [r2, #4]
 8005f56:	4408      	add	r0, r1
 8005f58:	6010      	str	r0, [r2, #0]
 8005f5a:	e7da      	b.n	8005f12 <_free_r+0x22>
 8005f5c:	d902      	bls.n	8005f64 <_free_r+0x74>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	e7d6      	b.n	8005f12 <_free_r+0x22>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	1821      	adds	r1, r4, r0
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	bf04      	itt	eq
 8005f6c:	6819      	ldreq	r1, [r3, #0]
 8005f6e:	685b      	ldreq	r3, [r3, #4]
 8005f70:	6063      	str	r3, [r4, #4]
 8005f72:	bf04      	itt	eq
 8005f74:	1809      	addeq	r1, r1, r0
 8005f76:	6021      	streq	r1, [r4, #0]
 8005f78:	6054      	str	r4, [r2, #4]
 8005f7a:	e7ca      	b.n	8005f12 <_free_r+0x22>
 8005f7c:	bd38      	pop	{r3, r4, r5, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000554 	.word	0x20000554

08005f84 <malloc>:
 8005f84:	4b02      	ldr	r3, [pc, #8]	@ (8005f90 <malloc+0xc>)
 8005f86:	4601      	mov	r1, r0
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	f000 b825 	b.w	8005fd8 <_malloc_r>
 8005f8e:	bf00      	nop
 8005f90:	20000018 	.word	0x20000018

08005f94 <sbrk_aligned>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4e0f      	ldr	r6, [pc, #60]	@ (8005fd4 <sbrk_aligned+0x40>)
 8005f98:	460c      	mov	r4, r1
 8005f9a:	6831      	ldr	r1, [r6, #0]
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	b911      	cbnz	r1, 8005fa6 <sbrk_aligned+0x12>
 8005fa0:	f000 fe9a 	bl	8006cd8 <_sbrk_r>
 8005fa4:	6030      	str	r0, [r6, #0]
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 fe95 	bl	8006cd8 <_sbrk_r>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	d103      	bne.n	8005fba <sbrk_aligned+0x26>
 8005fb2:	f04f 34ff 	mov.w	r4, #4294967295
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
 8005fba:	1cc4      	adds	r4, r0, #3
 8005fbc:	f024 0403 	bic.w	r4, r4, #3
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d0f8      	beq.n	8005fb6 <sbrk_aligned+0x22>
 8005fc4:	1a21      	subs	r1, r4, r0
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 fe86 	bl	8006cd8 <_sbrk_r>
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d1f2      	bne.n	8005fb6 <sbrk_aligned+0x22>
 8005fd0:	e7ef      	b.n	8005fb2 <sbrk_aligned+0x1e>
 8005fd2:	bf00      	nop
 8005fd4:	20000550 	.word	0x20000550

08005fd8 <_malloc_r>:
 8005fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fdc:	1ccd      	adds	r5, r1, #3
 8005fde:	f025 0503 	bic.w	r5, r5, #3
 8005fe2:	3508      	adds	r5, #8
 8005fe4:	2d0c      	cmp	r5, #12
 8005fe6:	bf38      	it	cc
 8005fe8:	250c      	movcc	r5, #12
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	4606      	mov	r6, r0
 8005fee:	db01      	blt.n	8005ff4 <_malloc_r+0x1c>
 8005ff0:	42a9      	cmp	r1, r5
 8005ff2:	d904      	bls.n	8005ffe <_malloc_r+0x26>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	6033      	str	r3, [r6, #0]
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060d4 <_malloc_r+0xfc>
 8006002:	f000 f869 	bl	80060d8 <__malloc_lock>
 8006006:	f8d8 3000 	ldr.w	r3, [r8]
 800600a:	461c      	mov	r4, r3
 800600c:	bb44      	cbnz	r4, 8006060 <_malloc_r+0x88>
 800600e:	4629      	mov	r1, r5
 8006010:	4630      	mov	r0, r6
 8006012:	f7ff ffbf 	bl	8005f94 <sbrk_aligned>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	4604      	mov	r4, r0
 800601a:	d158      	bne.n	80060ce <_malloc_r+0xf6>
 800601c:	f8d8 4000 	ldr.w	r4, [r8]
 8006020:	4627      	mov	r7, r4
 8006022:	2f00      	cmp	r7, #0
 8006024:	d143      	bne.n	80060ae <_malloc_r+0xd6>
 8006026:	2c00      	cmp	r4, #0
 8006028:	d04b      	beq.n	80060c2 <_malloc_r+0xea>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	4639      	mov	r1, r7
 800602e:	4630      	mov	r0, r6
 8006030:	eb04 0903 	add.w	r9, r4, r3
 8006034:	f000 fe50 	bl	8006cd8 <_sbrk_r>
 8006038:	4581      	cmp	r9, r0
 800603a:	d142      	bne.n	80060c2 <_malloc_r+0xea>
 800603c:	6821      	ldr	r1, [r4, #0]
 800603e:	1a6d      	subs	r5, r5, r1
 8006040:	4629      	mov	r1, r5
 8006042:	4630      	mov	r0, r6
 8006044:	f7ff ffa6 	bl	8005f94 <sbrk_aligned>
 8006048:	3001      	adds	r0, #1
 800604a:	d03a      	beq.n	80060c2 <_malloc_r+0xea>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	442b      	add	r3, r5
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	f8d8 3000 	ldr.w	r3, [r8]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	bb62      	cbnz	r2, 80060b4 <_malloc_r+0xdc>
 800605a:	f8c8 7000 	str.w	r7, [r8]
 800605e:	e00f      	b.n	8006080 <_malloc_r+0xa8>
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	1b52      	subs	r2, r2, r5
 8006064:	d420      	bmi.n	80060a8 <_malloc_r+0xd0>
 8006066:	2a0b      	cmp	r2, #11
 8006068:	d917      	bls.n	800609a <_malloc_r+0xc2>
 800606a:	1961      	adds	r1, r4, r5
 800606c:	42a3      	cmp	r3, r4
 800606e:	6025      	str	r5, [r4, #0]
 8006070:	bf18      	it	ne
 8006072:	6059      	strne	r1, [r3, #4]
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	bf08      	it	eq
 8006078:	f8c8 1000 	streq.w	r1, [r8]
 800607c:	5162      	str	r2, [r4, r5]
 800607e:	604b      	str	r3, [r1, #4]
 8006080:	4630      	mov	r0, r6
 8006082:	f000 f82f 	bl	80060e4 <__malloc_unlock>
 8006086:	f104 000b 	add.w	r0, r4, #11
 800608a:	1d23      	adds	r3, r4, #4
 800608c:	f020 0007 	bic.w	r0, r0, #7
 8006090:	1ac2      	subs	r2, r0, r3
 8006092:	bf1c      	itt	ne
 8006094:	1a1b      	subne	r3, r3, r0
 8006096:	50a3      	strne	r3, [r4, r2]
 8006098:	e7af      	b.n	8005ffa <_malloc_r+0x22>
 800609a:	6862      	ldr	r2, [r4, #4]
 800609c:	42a3      	cmp	r3, r4
 800609e:	bf0c      	ite	eq
 80060a0:	f8c8 2000 	streq.w	r2, [r8]
 80060a4:	605a      	strne	r2, [r3, #4]
 80060a6:	e7eb      	b.n	8006080 <_malloc_r+0xa8>
 80060a8:	4623      	mov	r3, r4
 80060aa:	6864      	ldr	r4, [r4, #4]
 80060ac:	e7ae      	b.n	800600c <_malloc_r+0x34>
 80060ae:	463c      	mov	r4, r7
 80060b0:	687f      	ldr	r7, [r7, #4]
 80060b2:	e7b6      	b.n	8006022 <_malloc_r+0x4a>
 80060b4:	461a      	mov	r2, r3
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d1fb      	bne.n	80060b4 <_malloc_r+0xdc>
 80060bc:	2300      	movs	r3, #0
 80060be:	6053      	str	r3, [r2, #4]
 80060c0:	e7de      	b.n	8006080 <_malloc_r+0xa8>
 80060c2:	230c      	movs	r3, #12
 80060c4:	6033      	str	r3, [r6, #0]
 80060c6:	4630      	mov	r0, r6
 80060c8:	f000 f80c 	bl	80060e4 <__malloc_unlock>
 80060cc:	e794      	b.n	8005ff8 <_malloc_r+0x20>
 80060ce:	6005      	str	r5, [r0, #0]
 80060d0:	e7d6      	b.n	8006080 <_malloc_r+0xa8>
 80060d2:	bf00      	nop
 80060d4:	20000554 	.word	0x20000554

080060d8 <__malloc_lock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	@ (80060e0 <__malloc_lock+0x8>)
 80060da:	f7ff b8aa 	b.w	8005232 <__retarget_lock_acquire_recursive>
 80060de:	bf00      	nop
 80060e0:	2000054c 	.word	0x2000054c

080060e4 <__malloc_unlock>:
 80060e4:	4801      	ldr	r0, [pc, #4]	@ (80060ec <__malloc_unlock+0x8>)
 80060e6:	f7ff b8a5 	b.w	8005234 <__retarget_lock_release_recursive>
 80060ea:	bf00      	nop
 80060ec:	2000054c 	.word	0x2000054c

080060f0 <_Balloc>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	69c6      	ldr	r6, [r0, #28]
 80060f4:	4604      	mov	r4, r0
 80060f6:	460d      	mov	r5, r1
 80060f8:	b976      	cbnz	r6, 8006118 <_Balloc+0x28>
 80060fa:	2010      	movs	r0, #16
 80060fc:	f7ff ff42 	bl	8005f84 <malloc>
 8006100:	4602      	mov	r2, r0
 8006102:	61e0      	str	r0, [r4, #28]
 8006104:	b920      	cbnz	r0, 8006110 <_Balloc+0x20>
 8006106:	4b18      	ldr	r3, [pc, #96]	@ (8006168 <_Balloc+0x78>)
 8006108:	4818      	ldr	r0, [pc, #96]	@ (800616c <_Balloc+0x7c>)
 800610a:	216b      	movs	r1, #107	@ 0x6b
 800610c:	f000 fdf4 	bl	8006cf8 <__assert_func>
 8006110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006114:	6006      	str	r6, [r0, #0]
 8006116:	60c6      	str	r6, [r0, #12]
 8006118:	69e6      	ldr	r6, [r4, #28]
 800611a:	68f3      	ldr	r3, [r6, #12]
 800611c:	b183      	cbz	r3, 8006140 <_Balloc+0x50>
 800611e:	69e3      	ldr	r3, [r4, #28]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006126:	b9b8      	cbnz	r0, 8006158 <_Balloc+0x68>
 8006128:	2101      	movs	r1, #1
 800612a:	fa01 f605 	lsl.w	r6, r1, r5
 800612e:	1d72      	adds	r2, r6, #5
 8006130:	0092      	lsls	r2, r2, #2
 8006132:	4620      	mov	r0, r4
 8006134:	f000 fdfe 	bl	8006d34 <_calloc_r>
 8006138:	b160      	cbz	r0, 8006154 <_Balloc+0x64>
 800613a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800613e:	e00e      	b.n	800615e <_Balloc+0x6e>
 8006140:	2221      	movs	r2, #33	@ 0x21
 8006142:	2104      	movs	r1, #4
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fdf5 	bl	8006d34 <_calloc_r>
 800614a:	69e3      	ldr	r3, [r4, #28]
 800614c:	60f0      	str	r0, [r6, #12]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e4      	bne.n	800611e <_Balloc+0x2e>
 8006154:	2000      	movs	r0, #0
 8006156:	bd70      	pop	{r4, r5, r6, pc}
 8006158:	6802      	ldr	r2, [r0, #0]
 800615a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800615e:	2300      	movs	r3, #0
 8006160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006164:	e7f7      	b.n	8006156 <_Balloc+0x66>
 8006166:	bf00      	nop
 8006168:	08006fc9 	.word	0x08006fc9
 800616c:	08007049 	.word	0x08007049

08006170 <_Bfree>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	69c6      	ldr	r6, [r0, #28]
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	b976      	cbnz	r6, 8006198 <_Bfree+0x28>
 800617a:	2010      	movs	r0, #16
 800617c:	f7ff ff02 	bl	8005f84 <malloc>
 8006180:	4602      	mov	r2, r0
 8006182:	61e8      	str	r0, [r5, #28]
 8006184:	b920      	cbnz	r0, 8006190 <_Bfree+0x20>
 8006186:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <_Bfree+0x3c>)
 8006188:	4809      	ldr	r0, [pc, #36]	@ (80061b0 <_Bfree+0x40>)
 800618a:	218f      	movs	r1, #143	@ 0x8f
 800618c:	f000 fdb4 	bl	8006cf8 <__assert_func>
 8006190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006194:	6006      	str	r6, [r0, #0]
 8006196:	60c6      	str	r6, [r0, #12]
 8006198:	b13c      	cbz	r4, 80061aa <_Bfree+0x3a>
 800619a:	69eb      	ldr	r3, [r5, #28]
 800619c:	6862      	ldr	r2, [r4, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061a4:	6021      	str	r1, [r4, #0]
 80061a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	08006fc9 	.word	0x08006fc9
 80061b0:	08007049 	.word	0x08007049

080061b4 <__multadd>:
 80061b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b8:	690d      	ldr	r5, [r1, #16]
 80061ba:	4607      	mov	r7, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	461e      	mov	r6, r3
 80061c0:	f101 0c14 	add.w	ip, r1, #20
 80061c4:	2000      	movs	r0, #0
 80061c6:	f8dc 3000 	ldr.w	r3, [ip]
 80061ca:	b299      	uxth	r1, r3
 80061cc:	fb02 6101 	mla	r1, r2, r1, r6
 80061d0:	0c1e      	lsrs	r6, r3, #16
 80061d2:	0c0b      	lsrs	r3, r1, #16
 80061d4:	fb02 3306 	mla	r3, r2, r6, r3
 80061d8:	b289      	uxth	r1, r1
 80061da:	3001      	adds	r0, #1
 80061dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061e0:	4285      	cmp	r5, r0
 80061e2:	f84c 1b04 	str.w	r1, [ip], #4
 80061e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061ea:	dcec      	bgt.n	80061c6 <__multadd+0x12>
 80061ec:	b30e      	cbz	r6, 8006232 <__multadd+0x7e>
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dc19      	bgt.n	8006228 <__multadd+0x74>
 80061f4:	6861      	ldr	r1, [r4, #4]
 80061f6:	4638      	mov	r0, r7
 80061f8:	3101      	adds	r1, #1
 80061fa:	f7ff ff79 	bl	80060f0 <_Balloc>
 80061fe:	4680      	mov	r8, r0
 8006200:	b928      	cbnz	r0, 800620e <__multadd+0x5a>
 8006202:	4602      	mov	r2, r0
 8006204:	4b0c      	ldr	r3, [pc, #48]	@ (8006238 <__multadd+0x84>)
 8006206:	480d      	ldr	r0, [pc, #52]	@ (800623c <__multadd+0x88>)
 8006208:	21ba      	movs	r1, #186	@ 0xba
 800620a:	f000 fd75 	bl	8006cf8 <__assert_func>
 800620e:	6922      	ldr	r2, [r4, #16]
 8006210:	3202      	adds	r2, #2
 8006212:	f104 010c 	add.w	r1, r4, #12
 8006216:	0092      	lsls	r2, r2, #2
 8006218:	300c      	adds	r0, #12
 800621a:	f7ff f80c 	bl	8005236 <memcpy>
 800621e:	4621      	mov	r1, r4
 8006220:	4638      	mov	r0, r7
 8006222:	f7ff ffa5 	bl	8006170 <_Bfree>
 8006226:	4644      	mov	r4, r8
 8006228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800622c:	3501      	adds	r5, #1
 800622e:	615e      	str	r6, [r3, #20]
 8006230:	6125      	str	r5, [r4, #16]
 8006232:	4620      	mov	r0, r4
 8006234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006238:	08007038 	.word	0x08007038
 800623c:	08007049 	.word	0x08007049

08006240 <__hi0bits>:
 8006240:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006244:	4603      	mov	r3, r0
 8006246:	bf36      	itet	cc
 8006248:	0403      	lslcc	r3, r0, #16
 800624a:	2000      	movcs	r0, #0
 800624c:	2010      	movcc	r0, #16
 800624e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006252:	bf3c      	itt	cc
 8006254:	021b      	lslcc	r3, r3, #8
 8006256:	3008      	addcc	r0, #8
 8006258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800625c:	bf3c      	itt	cc
 800625e:	011b      	lslcc	r3, r3, #4
 8006260:	3004      	addcc	r0, #4
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006266:	bf3c      	itt	cc
 8006268:	009b      	lslcc	r3, r3, #2
 800626a:	3002      	addcc	r0, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	db05      	blt.n	800627c <__hi0bits+0x3c>
 8006270:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006274:	f100 0001 	add.w	r0, r0, #1
 8006278:	bf08      	it	eq
 800627a:	2020      	moveq	r0, #32
 800627c:	4770      	bx	lr

0800627e <__lo0bits>:
 800627e:	6803      	ldr	r3, [r0, #0]
 8006280:	4602      	mov	r2, r0
 8006282:	f013 0007 	ands.w	r0, r3, #7
 8006286:	d00b      	beq.n	80062a0 <__lo0bits+0x22>
 8006288:	07d9      	lsls	r1, r3, #31
 800628a:	d421      	bmi.n	80062d0 <__lo0bits+0x52>
 800628c:	0798      	lsls	r0, r3, #30
 800628e:	bf49      	itett	mi
 8006290:	085b      	lsrmi	r3, r3, #1
 8006292:	089b      	lsrpl	r3, r3, #2
 8006294:	2001      	movmi	r0, #1
 8006296:	6013      	strmi	r3, [r2, #0]
 8006298:	bf5c      	itt	pl
 800629a:	6013      	strpl	r3, [r2, #0]
 800629c:	2002      	movpl	r0, #2
 800629e:	4770      	bx	lr
 80062a0:	b299      	uxth	r1, r3
 80062a2:	b909      	cbnz	r1, 80062a8 <__lo0bits+0x2a>
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	2010      	movs	r0, #16
 80062a8:	b2d9      	uxtb	r1, r3
 80062aa:	b909      	cbnz	r1, 80062b0 <__lo0bits+0x32>
 80062ac:	3008      	adds	r0, #8
 80062ae:	0a1b      	lsrs	r3, r3, #8
 80062b0:	0719      	lsls	r1, r3, #28
 80062b2:	bf04      	itt	eq
 80062b4:	091b      	lsreq	r3, r3, #4
 80062b6:	3004      	addeq	r0, #4
 80062b8:	0799      	lsls	r1, r3, #30
 80062ba:	bf04      	itt	eq
 80062bc:	089b      	lsreq	r3, r3, #2
 80062be:	3002      	addeq	r0, #2
 80062c0:	07d9      	lsls	r1, r3, #31
 80062c2:	d403      	bmi.n	80062cc <__lo0bits+0x4e>
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	f100 0001 	add.w	r0, r0, #1
 80062ca:	d003      	beq.n	80062d4 <__lo0bits+0x56>
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	4770      	bx	lr
 80062d0:	2000      	movs	r0, #0
 80062d2:	4770      	bx	lr
 80062d4:	2020      	movs	r0, #32
 80062d6:	4770      	bx	lr

080062d8 <__i2b>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	460c      	mov	r4, r1
 80062dc:	2101      	movs	r1, #1
 80062de:	f7ff ff07 	bl	80060f0 <_Balloc>
 80062e2:	4602      	mov	r2, r0
 80062e4:	b928      	cbnz	r0, 80062f2 <__i2b+0x1a>
 80062e6:	4b05      	ldr	r3, [pc, #20]	@ (80062fc <__i2b+0x24>)
 80062e8:	4805      	ldr	r0, [pc, #20]	@ (8006300 <__i2b+0x28>)
 80062ea:	f240 1145 	movw	r1, #325	@ 0x145
 80062ee:	f000 fd03 	bl	8006cf8 <__assert_func>
 80062f2:	2301      	movs	r3, #1
 80062f4:	6144      	str	r4, [r0, #20]
 80062f6:	6103      	str	r3, [r0, #16]
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	bf00      	nop
 80062fc:	08007038 	.word	0x08007038
 8006300:	08007049 	.word	0x08007049

08006304 <__multiply>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	4614      	mov	r4, r2
 800630a:	690a      	ldr	r2, [r1, #16]
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	429a      	cmp	r2, r3
 8006310:	bfa8      	it	ge
 8006312:	4623      	movge	r3, r4
 8006314:	460f      	mov	r7, r1
 8006316:	bfa4      	itt	ge
 8006318:	460c      	movge	r4, r1
 800631a:	461f      	movge	r7, r3
 800631c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006320:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006324:	68a3      	ldr	r3, [r4, #8]
 8006326:	6861      	ldr	r1, [r4, #4]
 8006328:	eb0a 0609 	add.w	r6, sl, r9
 800632c:	42b3      	cmp	r3, r6
 800632e:	b085      	sub	sp, #20
 8006330:	bfb8      	it	lt
 8006332:	3101      	addlt	r1, #1
 8006334:	f7ff fedc 	bl	80060f0 <_Balloc>
 8006338:	b930      	cbnz	r0, 8006348 <__multiply+0x44>
 800633a:	4602      	mov	r2, r0
 800633c:	4b44      	ldr	r3, [pc, #272]	@ (8006450 <__multiply+0x14c>)
 800633e:	4845      	ldr	r0, [pc, #276]	@ (8006454 <__multiply+0x150>)
 8006340:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006344:	f000 fcd8 	bl	8006cf8 <__assert_func>
 8006348:	f100 0514 	add.w	r5, r0, #20
 800634c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006350:	462b      	mov	r3, r5
 8006352:	2200      	movs	r2, #0
 8006354:	4543      	cmp	r3, r8
 8006356:	d321      	bcc.n	800639c <__multiply+0x98>
 8006358:	f107 0114 	add.w	r1, r7, #20
 800635c:	f104 0214 	add.w	r2, r4, #20
 8006360:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006364:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006368:	9302      	str	r3, [sp, #8]
 800636a:	1b13      	subs	r3, r2, r4
 800636c:	3b15      	subs	r3, #21
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	3304      	adds	r3, #4
 8006374:	f104 0715 	add.w	r7, r4, #21
 8006378:	42ba      	cmp	r2, r7
 800637a:	bf38      	it	cc
 800637c:	2304      	movcc	r3, #4
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	9b02      	ldr	r3, [sp, #8]
 8006382:	9103      	str	r1, [sp, #12]
 8006384:	428b      	cmp	r3, r1
 8006386:	d80c      	bhi.n	80063a2 <__multiply+0x9e>
 8006388:	2e00      	cmp	r6, #0
 800638a:	dd03      	ble.n	8006394 <__multiply+0x90>
 800638c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006390:	2b00      	cmp	r3, #0
 8006392:	d05b      	beq.n	800644c <__multiply+0x148>
 8006394:	6106      	str	r6, [r0, #16]
 8006396:	b005      	add	sp, #20
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	f843 2b04 	str.w	r2, [r3], #4
 80063a0:	e7d8      	b.n	8006354 <__multiply+0x50>
 80063a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80063a6:	f1ba 0f00 	cmp.w	sl, #0
 80063aa:	d024      	beq.n	80063f6 <__multiply+0xf2>
 80063ac:	f104 0e14 	add.w	lr, r4, #20
 80063b0:	46a9      	mov	r9, r5
 80063b2:	f04f 0c00 	mov.w	ip, #0
 80063b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80063ba:	f8d9 3000 	ldr.w	r3, [r9]
 80063be:	fa1f fb87 	uxth.w	fp, r7
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80063c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80063cc:	f8d9 7000 	ldr.w	r7, [r9]
 80063d0:	4463      	add	r3, ip
 80063d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80063d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80063da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80063e4:	4572      	cmp	r2, lr
 80063e6:	f849 3b04 	str.w	r3, [r9], #4
 80063ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80063ee:	d8e2      	bhi.n	80063b6 <__multiply+0xb2>
 80063f0:	9b01      	ldr	r3, [sp, #4]
 80063f2:	f845 c003 	str.w	ip, [r5, r3]
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80063fc:	3104      	adds	r1, #4
 80063fe:	f1b9 0f00 	cmp.w	r9, #0
 8006402:	d021      	beq.n	8006448 <__multiply+0x144>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	f104 0c14 	add.w	ip, r4, #20
 800640a:	46ae      	mov	lr, r5
 800640c:	f04f 0a00 	mov.w	sl, #0
 8006410:	f8bc b000 	ldrh.w	fp, [ip]
 8006414:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006418:	fb09 770b 	mla	r7, r9, fp, r7
 800641c:	4457      	add	r7, sl
 800641e:	b29b      	uxth	r3, r3
 8006420:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006424:	f84e 3b04 	str.w	r3, [lr], #4
 8006428:	f85c 3b04 	ldr.w	r3, [ip], #4
 800642c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006430:	f8be 3000 	ldrh.w	r3, [lr]
 8006434:	fb09 330a 	mla	r3, r9, sl, r3
 8006438:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800643c:	4562      	cmp	r2, ip
 800643e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006442:	d8e5      	bhi.n	8006410 <__multiply+0x10c>
 8006444:	9f01      	ldr	r7, [sp, #4]
 8006446:	51eb      	str	r3, [r5, r7]
 8006448:	3504      	adds	r5, #4
 800644a:	e799      	b.n	8006380 <__multiply+0x7c>
 800644c:	3e01      	subs	r6, #1
 800644e:	e79b      	b.n	8006388 <__multiply+0x84>
 8006450:	08007038 	.word	0x08007038
 8006454:	08007049 	.word	0x08007049

08006458 <__pow5mult>:
 8006458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800645c:	4615      	mov	r5, r2
 800645e:	f012 0203 	ands.w	r2, r2, #3
 8006462:	4607      	mov	r7, r0
 8006464:	460e      	mov	r6, r1
 8006466:	d007      	beq.n	8006478 <__pow5mult+0x20>
 8006468:	4c25      	ldr	r4, [pc, #148]	@ (8006500 <__pow5mult+0xa8>)
 800646a:	3a01      	subs	r2, #1
 800646c:	2300      	movs	r3, #0
 800646e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006472:	f7ff fe9f 	bl	80061b4 <__multadd>
 8006476:	4606      	mov	r6, r0
 8006478:	10ad      	asrs	r5, r5, #2
 800647a:	d03d      	beq.n	80064f8 <__pow5mult+0xa0>
 800647c:	69fc      	ldr	r4, [r7, #28]
 800647e:	b97c      	cbnz	r4, 80064a0 <__pow5mult+0x48>
 8006480:	2010      	movs	r0, #16
 8006482:	f7ff fd7f 	bl	8005f84 <malloc>
 8006486:	4602      	mov	r2, r0
 8006488:	61f8      	str	r0, [r7, #28]
 800648a:	b928      	cbnz	r0, 8006498 <__pow5mult+0x40>
 800648c:	4b1d      	ldr	r3, [pc, #116]	@ (8006504 <__pow5mult+0xac>)
 800648e:	481e      	ldr	r0, [pc, #120]	@ (8006508 <__pow5mult+0xb0>)
 8006490:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006494:	f000 fc30 	bl	8006cf8 <__assert_func>
 8006498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800649c:	6004      	str	r4, [r0, #0]
 800649e:	60c4      	str	r4, [r0, #12]
 80064a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80064a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064a8:	b94c      	cbnz	r4, 80064be <__pow5mult+0x66>
 80064aa:	f240 2171 	movw	r1, #625	@ 0x271
 80064ae:	4638      	mov	r0, r7
 80064b0:	f7ff ff12 	bl	80062d8 <__i2b>
 80064b4:	2300      	movs	r3, #0
 80064b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80064ba:	4604      	mov	r4, r0
 80064bc:	6003      	str	r3, [r0, #0]
 80064be:	f04f 0900 	mov.w	r9, #0
 80064c2:	07eb      	lsls	r3, r5, #31
 80064c4:	d50a      	bpl.n	80064dc <__pow5mult+0x84>
 80064c6:	4631      	mov	r1, r6
 80064c8:	4622      	mov	r2, r4
 80064ca:	4638      	mov	r0, r7
 80064cc:	f7ff ff1a 	bl	8006304 <__multiply>
 80064d0:	4631      	mov	r1, r6
 80064d2:	4680      	mov	r8, r0
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7ff fe4b 	bl	8006170 <_Bfree>
 80064da:	4646      	mov	r6, r8
 80064dc:	106d      	asrs	r5, r5, #1
 80064de:	d00b      	beq.n	80064f8 <__pow5mult+0xa0>
 80064e0:	6820      	ldr	r0, [r4, #0]
 80064e2:	b938      	cbnz	r0, 80064f4 <__pow5mult+0x9c>
 80064e4:	4622      	mov	r2, r4
 80064e6:	4621      	mov	r1, r4
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ff0b 	bl	8006304 <__multiply>
 80064ee:	6020      	str	r0, [r4, #0]
 80064f0:	f8c0 9000 	str.w	r9, [r0]
 80064f4:	4604      	mov	r4, r0
 80064f6:	e7e4      	b.n	80064c2 <__pow5mult+0x6a>
 80064f8:	4630      	mov	r0, r6
 80064fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fe:	bf00      	nop
 8006500:	080070a4 	.word	0x080070a4
 8006504:	08006fc9 	.word	0x08006fc9
 8006508:	08007049 	.word	0x08007049

0800650c <__lshift>:
 800650c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	460c      	mov	r4, r1
 8006512:	6849      	ldr	r1, [r1, #4]
 8006514:	6923      	ldr	r3, [r4, #16]
 8006516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	4607      	mov	r7, r0
 800651e:	4691      	mov	r9, r2
 8006520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006524:	f108 0601 	add.w	r6, r8, #1
 8006528:	42b3      	cmp	r3, r6
 800652a:	db0b      	blt.n	8006544 <__lshift+0x38>
 800652c:	4638      	mov	r0, r7
 800652e:	f7ff fddf 	bl	80060f0 <_Balloc>
 8006532:	4605      	mov	r5, r0
 8006534:	b948      	cbnz	r0, 800654a <__lshift+0x3e>
 8006536:	4602      	mov	r2, r0
 8006538:	4b28      	ldr	r3, [pc, #160]	@ (80065dc <__lshift+0xd0>)
 800653a:	4829      	ldr	r0, [pc, #164]	@ (80065e0 <__lshift+0xd4>)
 800653c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006540:	f000 fbda 	bl	8006cf8 <__assert_func>
 8006544:	3101      	adds	r1, #1
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	e7ee      	b.n	8006528 <__lshift+0x1c>
 800654a:	2300      	movs	r3, #0
 800654c:	f100 0114 	add.w	r1, r0, #20
 8006550:	f100 0210 	add.w	r2, r0, #16
 8006554:	4618      	mov	r0, r3
 8006556:	4553      	cmp	r3, sl
 8006558:	db33      	blt.n	80065c2 <__lshift+0xb6>
 800655a:	6920      	ldr	r0, [r4, #16]
 800655c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006560:	f104 0314 	add.w	r3, r4, #20
 8006564:	f019 091f 	ands.w	r9, r9, #31
 8006568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800656c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006570:	d02b      	beq.n	80065ca <__lshift+0xbe>
 8006572:	f1c9 0e20 	rsb	lr, r9, #32
 8006576:	468a      	mov	sl, r1
 8006578:	2200      	movs	r2, #0
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	fa00 f009 	lsl.w	r0, r0, r9
 8006580:	4310      	orrs	r0, r2
 8006582:	f84a 0b04 	str.w	r0, [sl], #4
 8006586:	f853 2b04 	ldr.w	r2, [r3], #4
 800658a:	459c      	cmp	ip, r3
 800658c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006590:	d8f3      	bhi.n	800657a <__lshift+0x6e>
 8006592:	ebac 0304 	sub.w	r3, ip, r4
 8006596:	3b15      	subs	r3, #21
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	3304      	adds	r3, #4
 800659e:	f104 0015 	add.w	r0, r4, #21
 80065a2:	4584      	cmp	ip, r0
 80065a4:	bf38      	it	cc
 80065a6:	2304      	movcc	r3, #4
 80065a8:	50ca      	str	r2, [r1, r3]
 80065aa:	b10a      	cbz	r2, 80065b0 <__lshift+0xa4>
 80065ac:	f108 0602 	add.w	r6, r8, #2
 80065b0:	3e01      	subs	r6, #1
 80065b2:	4638      	mov	r0, r7
 80065b4:	612e      	str	r6, [r5, #16]
 80065b6:	4621      	mov	r1, r4
 80065b8:	f7ff fdda 	bl	8006170 <_Bfree>
 80065bc:	4628      	mov	r0, r5
 80065be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80065c6:	3301      	adds	r3, #1
 80065c8:	e7c5      	b.n	8006556 <__lshift+0x4a>
 80065ca:	3904      	subs	r1, #4
 80065cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80065d4:	459c      	cmp	ip, r3
 80065d6:	d8f9      	bhi.n	80065cc <__lshift+0xc0>
 80065d8:	e7ea      	b.n	80065b0 <__lshift+0xa4>
 80065da:	bf00      	nop
 80065dc:	08007038 	.word	0x08007038
 80065e0:	08007049 	.word	0x08007049

080065e4 <__mcmp>:
 80065e4:	690a      	ldr	r2, [r1, #16]
 80065e6:	4603      	mov	r3, r0
 80065e8:	6900      	ldr	r0, [r0, #16]
 80065ea:	1a80      	subs	r0, r0, r2
 80065ec:	b530      	push	{r4, r5, lr}
 80065ee:	d10e      	bne.n	800660e <__mcmp+0x2a>
 80065f0:	3314      	adds	r3, #20
 80065f2:	3114      	adds	r1, #20
 80065f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006600:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006604:	4295      	cmp	r5, r2
 8006606:	d003      	beq.n	8006610 <__mcmp+0x2c>
 8006608:	d205      	bcs.n	8006616 <__mcmp+0x32>
 800660a:	f04f 30ff 	mov.w	r0, #4294967295
 800660e:	bd30      	pop	{r4, r5, pc}
 8006610:	42a3      	cmp	r3, r4
 8006612:	d3f3      	bcc.n	80065fc <__mcmp+0x18>
 8006614:	e7fb      	b.n	800660e <__mcmp+0x2a>
 8006616:	2001      	movs	r0, #1
 8006618:	e7f9      	b.n	800660e <__mcmp+0x2a>
	...

0800661c <__mdiff>:
 800661c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006620:	4689      	mov	r9, r1
 8006622:	4606      	mov	r6, r0
 8006624:	4611      	mov	r1, r2
 8006626:	4648      	mov	r0, r9
 8006628:	4614      	mov	r4, r2
 800662a:	f7ff ffdb 	bl	80065e4 <__mcmp>
 800662e:	1e05      	subs	r5, r0, #0
 8006630:	d112      	bne.n	8006658 <__mdiff+0x3c>
 8006632:	4629      	mov	r1, r5
 8006634:	4630      	mov	r0, r6
 8006636:	f7ff fd5b 	bl	80060f0 <_Balloc>
 800663a:	4602      	mov	r2, r0
 800663c:	b928      	cbnz	r0, 800664a <__mdiff+0x2e>
 800663e:	4b3f      	ldr	r3, [pc, #252]	@ (800673c <__mdiff+0x120>)
 8006640:	f240 2137 	movw	r1, #567	@ 0x237
 8006644:	483e      	ldr	r0, [pc, #248]	@ (8006740 <__mdiff+0x124>)
 8006646:	f000 fb57 	bl	8006cf8 <__assert_func>
 800664a:	2301      	movs	r3, #1
 800664c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006650:	4610      	mov	r0, r2
 8006652:	b003      	add	sp, #12
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	bfbc      	itt	lt
 800665a:	464b      	movlt	r3, r9
 800665c:	46a1      	movlt	r9, r4
 800665e:	4630      	mov	r0, r6
 8006660:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006664:	bfba      	itte	lt
 8006666:	461c      	movlt	r4, r3
 8006668:	2501      	movlt	r5, #1
 800666a:	2500      	movge	r5, #0
 800666c:	f7ff fd40 	bl	80060f0 <_Balloc>
 8006670:	4602      	mov	r2, r0
 8006672:	b918      	cbnz	r0, 800667c <__mdiff+0x60>
 8006674:	4b31      	ldr	r3, [pc, #196]	@ (800673c <__mdiff+0x120>)
 8006676:	f240 2145 	movw	r1, #581	@ 0x245
 800667a:	e7e3      	b.n	8006644 <__mdiff+0x28>
 800667c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006680:	6926      	ldr	r6, [r4, #16]
 8006682:	60c5      	str	r5, [r0, #12]
 8006684:	f109 0310 	add.w	r3, r9, #16
 8006688:	f109 0514 	add.w	r5, r9, #20
 800668c:	f104 0e14 	add.w	lr, r4, #20
 8006690:	f100 0b14 	add.w	fp, r0, #20
 8006694:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006698:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	46d9      	mov	r9, fp
 80066a0:	f04f 0c00 	mov.w	ip, #0
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80066aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	fa1f f38a 	uxth.w	r3, sl
 80066b4:	4619      	mov	r1, r3
 80066b6:	b283      	uxth	r3, r0
 80066b8:	1acb      	subs	r3, r1, r3
 80066ba:	0c00      	lsrs	r0, r0, #16
 80066bc:	4463      	add	r3, ip
 80066be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80066c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066cc:	4576      	cmp	r6, lr
 80066ce:	f849 3b04 	str.w	r3, [r9], #4
 80066d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066d6:	d8e5      	bhi.n	80066a4 <__mdiff+0x88>
 80066d8:	1b33      	subs	r3, r6, r4
 80066da:	3b15      	subs	r3, #21
 80066dc:	f023 0303 	bic.w	r3, r3, #3
 80066e0:	3415      	adds	r4, #21
 80066e2:	3304      	adds	r3, #4
 80066e4:	42a6      	cmp	r6, r4
 80066e6:	bf38      	it	cc
 80066e8:	2304      	movcc	r3, #4
 80066ea:	441d      	add	r5, r3
 80066ec:	445b      	add	r3, fp
 80066ee:	461e      	mov	r6, r3
 80066f0:	462c      	mov	r4, r5
 80066f2:	4544      	cmp	r4, r8
 80066f4:	d30e      	bcc.n	8006714 <__mdiff+0xf8>
 80066f6:	f108 0103 	add.w	r1, r8, #3
 80066fa:	1b49      	subs	r1, r1, r5
 80066fc:	f021 0103 	bic.w	r1, r1, #3
 8006700:	3d03      	subs	r5, #3
 8006702:	45a8      	cmp	r8, r5
 8006704:	bf38      	it	cc
 8006706:	2100      	movcc	r1, #0
 8006708:	440b      	add	r3, r1
 800670a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800670e:	b191      	cbz	r1, 8006736 <__mdiff+0x11a>
 8006710:	6117      	str	r7, [r2, #16]
 8006712:	e79d      	b.n	8006650 <__mdiff+0x34>
 8006714:	f854 1b04 	ldr.w	r1, [r4], #4
 8006718:	46e6      	mov	lr, ip
 800671a:	0c08      	lsrs	r0, r1, #16
 800671c:	fa1c fc81 	uxtah	ip, ip, r1
 8006720:	4471      	add	r1, lr
 8006722:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006726:	b289      	uxth	r1, r1
 8006728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800672c:	f846 1b04 	str.w	r1, [r6], #4
 8006730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006734:	e7dd      	b.n	80066f2 <__mdiff+0xd6>
 8006736:	3f01      	subs	r7, #1
 8006738:	e7e7      	b.n	800670a <__mdiff+0xee>
 800673a:	bf00      	nop
 800673c:	08007038 	.word	0x08007038
 8006740:	08007049 	.word	0x08007049

08006744 <__d2b>:
 8006744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006748:	460f      	mov	r7, r1
 800674a:	2101      	movs	r1, #1
 800674c:	ec59 8b10 	vmov	r8, r9, d0
 8006750:	4616      	mov	r6, r2
 8006752:	f7ff fccd 	bl	80060f0 <_Balloc>
 8006756:	4604      	mov	r4, r0
 8006758:	b930      	cbnz	r0, 8006768 <__d2b+0x24>
 800675a:	4602      	mov	r2, r0
 800675c:	4b23      	ldr	r3, [pc, #140]	@ (80067ec <__d2b+0xa8>)
 800675e:	4824      	ldr	r0, [pc, #144]	@ (80067f0 <__d2b+0xac>)
 8006760:	f240 310f 	movw	r1, #783	@ 0x30f
 8006764:	f000 fac8 	bl	8006cf8 <__assert_func>
 8006768:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800676c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006770:	b10d      	cbz	r5, 8006776 <__d2b+0x32>
 8006772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	f1b8 0300 	subs.w	r3, r8, #0
 800677c:	d023      	beq.n	80067c6 <__d2b+0x82>
 800677e:	4668      	mov	r0, sp
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	f7ff fd7c 	bl	800627e <__lo0bits>
 8006786:	e9dd 1200 	ldrd	r1, r2, [sp]
 800678a:	b1d0      	cbz	r0, 80067c2 <__d2b+0x7e>
 800678c:	f1c0 0320 	rsb	r3, r0, #32
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	430b      	orrs	r3, r1
 8006796:	40c2      	lsrs	r2, r0
 8006798:	6163      	str	r3, [r4, #20]
 800679a:	9201      	str	r2, [sp, #4]
 800679c:	9b01      	ldr	r3, [sp, #4]
 800679e:	61a3      	str	r3, [r4, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bf0c      	ite	eq
 80067a4:	2201      	moveq	r2, #1
 80067a6:	2202      	movne	r2, #2
 80067a8:	6122      	str	r2, [r4, #16]
 80067aa:	b1a5      	cbz	r5, 80067d6 <__d2b+0x92>
 80067ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067b0:	4405      	add	r5, r0
 80067b2:	603d      	str	r5, [r7, #0]
 80067b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067b8:	6030      	str	r0, [r6, #0]
 80067ba:	4620      	mov	r0, r4
 80067bc:	b003      	add	sp, #12
 80067be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067c2:	6161      	str	r1, [r4, #20]
 80067c4:	e7ea      	b.n	800679c <__d2b+0x58>
 80067c6:	a801      	add	r0, sp, #4
 80067c8:	f7ff fd59 	bl	800627e <__lo0bits>
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	6163      	str	r3, [r4, #20]
 80067d0:	3020      	adds	r0, #32
 80067d2:	2201      	movs	r2, #1
 80067d4:	e7e8      	b.n	80067a8 <__d2b+0x64>
 80067d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80067de:	6038      	str	r0, [r7, #0]
 80067e0:	6918      	ldr	r0, [r3, #16]
 80067e2:	f7ff fd2d 	bl	8006240 <__hi0bits>
 80067e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067ea:	e7e5      	b.n	80067b8 <__d2b+0x74>
 80067ec:	08007038 	.word	0x08007038
 80067f0:	08007049 	.word	0x08007049

080067f4 <__sfputc_r>:
 80067f4:	6893      	ldr	r3, [r2, #8]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	b410      	push	{r4}
 80067fc:	6093      	str	r3, [r2, #8]
 80067fe:	da08      	bge.n	8006812 <__sfputc_r+0x1e>
 8006800:	6994      	ldr	r4, [r2, #24]
 8006802:	42a3      	cmp	r3, r4
 8006804:	db01      	blt.n	800680a <__sfputc_r+0x16>
 8006806:	290a      	cmp	r1, #10
 8006808:	d103      	bne.n	8006812 <__sfputc_r+0x1e>
 800680a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800680e:	f7fe bbec 	b.w	8004fea <__swbuf_r>
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	1c58      	adds	r0, r3, #1
 8006816:	6010      	str	r0, [r2, #0]
 8006818:	7019      	strb	r1, [r3, #0]
 800681a:	4608      	mov	r0, r1
 800681c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006820:	4770      	bx	lr

08006822 <__sfputs_r>:
 8006822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	4614      	mov	r4, r2
 800682a:	18d5      	adds	r5, r2, r3
 800682c:	42ac      	cmp	r4, r5
 800682e:	d101      	bne.n	8006834 <__sfputs_r+0x12>
 8006830:	2000      	movs	r0, #0
 8006832:	e007      	b.n	8006844 <__sfputs_r+0x22>
 8006834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006838:	463a      	mov	r2, r7
 800683a:	4630      	mov	r0, r6
 800683c:	f7ff ffda 	bl	80067f4 <__sfputc_r>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d1f3      	bne.n	800682c <__sfputs_r+0xa>
 8006844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006848 <_vfiprintf_r>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	460d      	mov	r5, r1
 800684e:	b09d      	sub	sp, #116	@ 0x74
 8006850:	4614      	mov	r4, r2
 8006852:	4698      	mov	r8, r3
 8006854:	4606      	mov	r6, r0
 8006856:	b118      	cbz	r0, 8006860 <_vfiprintf_r+0x18>
 8006858:	6a03      	ldr	r3, [r0, #32]
 800685a:	b90b      	cbnz	r3, 8006860 <_vfiprintf_r+0x18>
 800685c:	f7fe fa28 	bl	8004cb0 <__sinit>
 8006860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006862:	07d9      	lsls	r1, r3, #31
 8006864:	d405      	bmi.n	8006872 <_vfiprintf_r+0x2a>
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	059a      	lsls	r2, r3, #22
 800686a:	d402      	bmi.n	8006872 <_vfiprintf_r+0x2a>
 800686c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800686e:	f7fe fce0 	bl	8005232 <__retarget_lock_acquire_recursive>
 8006872:	89ab      	ldrh	r3, [r5, #12]
 8006874:	071b      	lsls	r3, r3, #28
 8006876:	d501      	bpl.n	800687c <_vfiprintf_r+0x34>
 8006878:	692b      	ldr	r3, [r5, #16]
 800687a:	b99b      	cbnz	r3, 80068a4 <_vfiprintf_r+0x5c>
 800687c:	4629      	mov	r1, r5
 800687e:	4630      	mov	r0, r6
 8006880:	f7fe fbf2 	bl	8005068 <__swsetup_r>
 8006884:	b170      	cbz	r0, 80068a4 <_vfiprintf_r+0x5c>
 8006886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006888:	07dc      	lsls	r4, r3, #31
 800688a:	d504      	bpl.n	8006896 <_vfiprintf_r+0x4e>
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
 8006890:	b01d      	add	sp, #116	@ 0x74
 8006892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006896:	89ab      	ldrh	r3, [r5, #12]
 8006898:	0598      	lsls	r0, r3, #22
 800689a:	d4f7      	bmi.n	800688c <_vfiprintf_r+0x44>
 800689c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800689e:	f7fe fcc9 	bl	8005234 <__retarget_lock_release_recursive>
 80068a2:	e7f3      	b.n	800688c <_vfiprintf_r+0x44>
 80068a4:	2300      	movs	r3, #0
 80068a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068a8:	2320      	movs	r3, #32
 80068aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80068b2:	2330      	movs	r3, #48	@ 0x30
 80068b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a64 <_vfiprintf_r+0x21c>
 80068b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068bc:	f04f 0901 	mov.w	r9, #1
 80068c0:	4623      	mov	r3, r4
 80068c2:	469a      	mov	sl, r3
 80068c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068c8:	b10a      	cbz	r2, 80068ce <_vfiprintf_r+0x86>
 80068ca:	2a25      	cmp	r2, #37	@ 0x25
 80068cc:	d1f9      	bne.n	80068c2 <_vfiprintf_r+0x7a>
 80068ce:	ebba 0b04 	subs.w	fp, sl, r4
 80068d2:	d00b      	beq.n	80068ec <_vfiprintf_r+0xa4>
 80068d4:	465b      	mov	r3, fp
 80068d6:	4622      	mov	r2, r4
 80068d8:	4629      	mov	r1, r5
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff ffa1 	bl	8006822 <__sfputs_r>
 80068e0:	3001      	adds	r0, #1
 80068e2:	f000 80a7 	beq.w	8006a34 <_vfiprintf_r+0x1ec>
 80068e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068e8:	445a      	add	r2, fp
 80068ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80068ec:	f89a 3000 	ldrb.w	r3, [sl]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 809f 	beq.w	8006a34 <_vfiprintf_r+0x1ec>
 80068f6:	2300      	movs	r3, #0
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295
 80068fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006900:	f10a 0a01 	add.w	sl, sl, #1
 8006904:	9304      	str	r3, [sp, #16]
 8006906:	9307      	str	r3, [sp, #28]
 8006908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800690c:	931a      	str	r3, [sp, #104]	@ 0x68
 800690e:	4654      	mov	r4, sl
 8006910:	2205      	movs	r2, #5
 8006912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006916:	4853      	ldr	r0, [pc, #332]	@ (8006a64 <_vfiprintf_r+0x21c>)
 8006918:	f7f9 fc5a 	bl	80001d0 <memchr>
 800691c:	9a04      	ldr	r2, [sp, #16]
 800691e:	b9d8      	cbnz	r0, 8006958 <_vfiprintf_r+0x110>
 8006920:	06d1      	lsls	r1, r2, #27
 8006922:	bf44      	itt	mi
 8006924:	2320      	movmi	r3, #32
 8006926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800692a:	0713      	lsls	r3, r2, #28
 800692c:	bf44      	itt	mi
 800692e:	232b      	movmi	r3, #43	@ 0x2b
 8006930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006934:	f89a 3000 	ldrb.w	r3, [sl]
 8006938:	2b2a      	cmp	r3, #42	@ 0x2a
 800693a:	d015      	beq.n	8006968 <_vfiprintf_r+0x120>
 800693c:	9a07      	ldr	r2, [sp, #28]
 800693e:	4654      	mov	r4, sl
 8006940:	2000      	movs	r0, #0
 8006942:	f04f 0c0a 	mov.w	ip, #10
 8006946:	4621      	mov	r1, r4
 8006948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800694c:	3b30      	subs	r3, #48	@ 0x30
 800694e:	2b09      	cmp	r3, #9
 8006950:	d94b      	bls.n	80069ea <_vfiprintf_r+0x1a2>
 8006952:	b1b0      	cbz	r0, 8006982 <_vfiprintf_r+0x13a>
 8006954:	9207      	str	r2, [sp, #28]
 8006956:	e014      	b.n	8006982 <_vfiprintf_r+0x13a>
 8006958:	eba0 0308 	sub.w	r3, r0, r8
 800695c:	fa09 f303 	lsl.w	r3, r9, r3
 8006960:	4313      	orrs	r3, r2
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	46a2      	mov	sl, r4
 8006966:	e7d2      	b.n	800690e <_vfiprintf_r+0xc6>
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	1d19      	adds	r1, r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	9103      	str	r1, [sp, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	bfbb      	ittet	lt
 8006974:	425b      	neglt	r3, r3
 8006976:	f042 0202 	orrlt.w	r2, r2, #2
 800697a:	9307      	strge	r3, [sp, #28]
 800697c:	9307      	strlt	r3, [sp, #28]
 800697e:	bfb8      	it	lt
 8006980:	9204      	strlt	r2, [sp, #16]
 8006982:	7823      	ldrb	r3, [r4, #0]
 8006984:	2b2e      	cmp	r3, #46	@ 0x2e
 8006986:	d10a      	bne.n	800699e <_vfiprintf_r+0x156>
 8006988:	7863      	ldrb	r3, [r4, #1]
 800698a:	2b2a      	cmp	r3, #42	@ 0x2a
 800698c:	d132      	bne.n	80069f4 <_vfiprintf_r+0x1ac>
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	1d1a      	adds	r2, r3, #4
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	9203      	str	r2, [sp, #12]
 8006996:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800699a:	3402      	adds	r4, #2
 800699c:	9305      	str	r3, [sp, #20]
 800699e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a74 <_vfiprintf_r+0x22c>
 80069a2:	7821      	ldrb	r1, [r4, #0]
 80069a4:	2203      	movs	r2, #3
 80069a6:	4650      	mov	r0, sl
 80069a8:	f7f9 fc12 	bl	80001d0 <memchr>
 80069ac:	b138      	cbz	r0, 80069be <_vfiprintf_r+0x176>
 80069ae:	9b04      	ldr	r3, [sp, #16]
 80069b0:	eba0 000a 	sub.w	r0, r0, sl
 80069b4:	2240      	movs	r2, #64	@ 0x40
 80069b6:	4082      	lsls	r2, r0
 80069b8:	4313      	orrs	r3, r2
 80069ba:	3401      	adds	r4, #1
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c2:	4829      	ldr	r0, [pc, #164]	@ (8006a68 <_vfiprintf_r+0x220>)
 80069c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069c8:	2206      	movs	r2, #6
 80069ca:	f7f9 fc01 	bl	80001d0 <memchr>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d03f      	beq.n	8006a52 <_vfiprintf_r+0x20a>
 80069d2:	4b26      	ldr	r3, [pc, #152]	@ (8006a6c <_vfiprintf_r+0x224>)
 80069d4:	bb1b      	cbnz	r3, 8006a1e <_vfiprintf_r+0x1d6>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	3307      	adds	r3, #7
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	3308      	adds	r3, #8
 80069e0:	9303      	str	r3, [sp, #12]
 80069e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e4:	443b      	add	r3, r7
 80069e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80069e8:	e76a      	b.n	80068c0 <_vfiprintf_r+0x78>
 80069ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ee:	460c      	mov	r4, r1
 80069f0:	2001      	movs	r0, #1
 80069f2:	e7a8      	b.n	8006946 <_vfiprintf_r+0xfe>
 80069f4:	2300      	movs	r3, #0
 80069f6:	3401      	adds	r4, #1
 80069f8:	9305      	str	r3, [sp, #20]
 80069fa:	4619      	mov	r1, r3
 80069fc:	f04f 0c0a 	mov.w	ip, #10
 8006a00:	4620      	mov	r0, r4
 8006a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a06:	3a30      	subs	r2, #48	@ 0x30
 8006a08:	2a09      	cmp	r2, #9
 8006a0a:	d903      	bls.n	8006a14 <_vfiprintf_r+0x1cc>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0c6      	beq.n	800699e <_vfiprintf_r+0x156>
 8006a10:	9105      	str	r1, [sp, #20]
 8006a12:	e7c4      	b.n	800699e <_vfiprintf_r+0x156>
 8006a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a18:	4604      	mov	r4, r0
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e7f0      	b.n	8006a00 <_vfiprintf_r+0x1b8>
 8006a1e:	ab03      	add	r3, sp, #12
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	462a      	mov	r2, r5
 8006a24:	4b12      	ldr	r3, [pc, #72]	@ (8006a70 <_vfiprintf_r+0x228>)
 8006a26:	a904      	add	r1, sp, #16
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7fd fcfd 	bl	8004428 <_printf_float>
 8006a2e:	4607      	mov	r7, r0
 8006a30:	1c78      	adds	r0, r7, #1
 8006a32:	d1d6      	bne.n	80069e2 <_vfiprintf_r+0x19a>
 8006a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a36:	07d9      	lsls	r1, r3, #31
 8006a38:	d405      	bmi.n	8006a46 <_vfiprintf_r+0x1fe>
 8006a3a:	89ab      	ldrh	r3, [r5, #12]
 8006a3c:	059a      	lsls	r2, r3, #22
 8006a3e:	d402      	bmi.n	8006a46 <_vfiprintf_r+0x1fe>
 8006a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a42:	f7fe fbf7 	bl	8005234 <__retarget_lock_release_recursive>
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	065b      	lsls	r3, r3, #25
 8006a4a:	f53f af1f 	bmi.w	800688c <_vfiprintf_r+0x44>
 8006a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a50:	e71e      	b.n	8006890 <_vfiprintf_r+0x48>
 8006a52:	ab03      	add	r3, sp, #12
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	462a      	mov	r2, r5
 8006a58:	4b05      	ldr	r3, [pc, #20]	@ (8006a70 <_vfiprintf_r+0x228>)
 8006a5a:	a904      	add	r1, sp, #16
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f7fd ff7b 	bl	8004958 <_printf_i>
 8006a62:	e7e4      	b.n	8006a2e <_vfiprintf_r+0x1e6>
 8006a64:	080071a0 	.word	0x080071a0
 8006a68:	080071aa 	.word	0x080071aa
 8006a6c:	08004429 	.word	0x08004429
 8006a70:	08006823 	.word	0x08006823
 8006a74:	080071a6 	.word	0x080071a6

08006a78 <__sflush_r>:
 8006a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	0716      	lsls	r6, r2, #28
 8006a82:	4605      	mov	r5, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	d454      	bmi.n	8006b32 <__sflush_r+0xba>
 8006a88:	684b      	ldr	r3, [r1, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dc02      	bgt.n	8006a94 <__sflush_r+0x1c>
 8006a8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dd48      	ble.n	8006b26 <__sflush_r+0xae>
 8006a94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	d045      	beq.n	8006b26 <__sflush_r+0xae>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006aa0:	682f      	ldr	r7, [r5, #0]
 8006aa2:	6a21      	ldr	r1, [r4, #32]
 8006aa4:	602b      	str	r3, [r5, #0]
 8006aa6:	d030      	beq.n	8006b0a <__sflush_r+0x92>
 8006aa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	0759      	lsls	r1, r3, #29
 8006aae:	d505      	bpl.n	8006abc <__sflush_r+0x44>
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ab6:	b10b      	cbz	r3, 8006abc <__sflush_r+0x44>
 8006ab8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	2300      	movs	r3, #0
 8006abe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ac0:	6a21      	ldr	r1, [r4, #32]
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	47b0      	blx	r6
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	d106      	bne.n	8006ada <__sflush_r+0x62>
 8006acc:	6829      	ldr	r1, [r5, #0]
 8006ace:	291d      	cmp	r1, #29
 8006ad0:	d82b      	bhi.n	8006b2a <__sflush_r+0xb2>
 8006ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8006b7c <__sflush_r+0x104>)
 8006ad4:	410a      	asrs	r2, r1
 8006ad6:	07d6      	lsls	r6, r2, #31
 8006ad8:	d427      	bmi.n	8006b2a <__sflush_r+0xb2>
 8006ada:	2200      	movs	r2, #0
 8006adc:	6062      	str	r2, [r4, #4]
 8006ade:	04d9      	lsls	r1, r3, #19
 8006ae0:	6922      	ldr	r2, [r4, #16]
 8006ae2:	6022      	str	r2, [r4, #0]
 8006ae4:	d504      	bpl.n	8006af0 <__sflush_r+0x78>
 8006ae6:	1c42      	adds	r2, r0, #1
 8006ae8:	d101      	bne.n	8006aee <__sflush_r+0x76>
 8006aea:	682b      	ldr	r3, [r5, #0]
 8006aec:	b903      	cbnz	r3, 8006af0 <__sflush_r+0x78>
 8006aee:	6560      	str	r0, [r4, #84]	@ 0x54
 8006af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006af2:	602f      	str	r7, [r5, #0]
 8006af4:	b1b9      	cbz	r1, 8006b26 <__sflush_r+0xae>
 8006af6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006afa:	4299      	cmp	r1, r3
 8006afc:	d002      	beq.n	8006b04 <__sflush_r+0x8c>
 8006afe:	4628      	mov	r0, r5
 8006b00:	f7ff f9f6 	bl	8005ef0 <_free_r>
 8006b04:	2300      	movs	r3, #0
 8006b06:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b08:	e00d      	b.n	8006b26 <__sflush_r+0xae>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b0      	blx	r6
 8006b10:	4602      	mov	r2, r0
 8006b12:	1c50      	adds	r0, r2, #1
 8006b14:	d1c9      	bne.n	8006aaa <__sflush_r+0x32>
 8006b16:	682b      	ldr	r3, [r5, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0c6      	beq.n	8006aaa <__sflush_r+0x32>
 8006b1c:	2b1d      	cmp	r3, #29
 8006b1e:	d001      	beq.n	8006b24 <__sflush_r+0xac>
 8006b20:	2b16      	cmp	r3, #22
 8006b22:	d11e      	bne.n	8006b62 <__sflush_r+0xea>
 8006b24:	602f      	str	r7, [r5, #0]
 8006b26:	2000      	movs	r0, #0
 8006b28:	e022      	b.n	8006b70 <__sflush_r+0xf8>
 8006b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b2e:	b21b      	sxth	r3, r3
 8006b30:	e01b      	b.n	8006b6a <__sflush_r+0xf2>
 8006b32:	690f      	ldr	r7, [r1, #16]
 8006b34:	2f00      	cmp	r7, #0
 8006b36:	d0f6      	beq.n	8006b26 <__sflush_r+0xae>
 8006b38:	0793      	lsls	r3, r2, #30
 8006b3a:	680e      	ldr	r6, [r1, #0]
 8006b3c:	bf08      	it	eq
 8006b3e:	694b      	ldreq	r3, [r1, #20]
 8006b40:	600f      	str	r7, [r1, #0]
 8006b42:	bf18      	it	ne
 8006b44:	2300      	movne	r3, #0
 8006b46:	eba6 0807 	sub.w	r8, r6, r7
 8006b4a:	608b      	str	r3, [r1, #8]
 8006b4c:	f1b8 0f00 	cmp.w	r8, #0
 8006b50:	dde9      	ble.n	8006b26 <__sflush_r+0xae>
 8006b52:	6a21      	ldr	r1, [r4, #32]
 8006b54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b56:	4643      	mov	r3, r8
 8006b58:	463a      	mov	r2, r7
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b0      	blx	r6
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	dc08      	bgt.n	8006b74 <__sflush_r+0xfc>
 8006b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b74:	4407      	add	r7, r0
 8006b76:	eba8 0800 	sub.w	r8, r8, r0
 8006b7a:	e7e7      	b.n	8006b4c <__sflush_r+0xd4>
 8006b7c:	dfbffffe 	.word	0xdfbffffe

08006b80 <_fflush_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	690b      	ldr	r3, [r1, #16]
 8006b84:	4605      	mov	r5, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	b913      	cbnz	r3, 8006b90 <_fflush_r+0x10>
 8006b8a:	2500      	movs	r5, #0
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	b118      	cbz	r0, 8006b9a <_fflush_r+0x1a>
 8006b92:	6a03      	ldr	r3, [r0, #32]
 8006b94:	b90b      	cbnz	r3, 8006b9a <_fflush_r+0x1a>
 8006b96:	f7fe f88b 	bl	8004cb0 <__sinit>
 8006b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f3      	beq.n	8006b8a <_fflush_r+0xa>
 8006ba2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ba4:	07d0      	lsls	r0, r2, #31
 8006ba6:	d404      	bmi.n	8006bb2 <_fflush_r+0x32>
 8006ba8:	0599      	lsls	r1, r3, #22
 8006baa:	d402      	bmi.n	8006bb2 <_fflush_r+0x32>
 8006bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bae:	f7fe fb40 	bl	8005232 <__retarget_lock_acquire_recursive>
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	f7ff ff5f 	bl	8006a78 <__sflush_r>
 8006bba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bbc:	07da      	lsls	r2, r3, #31
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	d4e4      	bmi.n	8006b8c <_fflush_r+0xc>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	059b      	lsls	r3, r3, #22
 8006bc6:	d4e1      	bmi.n	8006b8c <_fflush_r+0xc>
 8006bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bca:	f7fe fb33 	bl	8005234 <__retarget_lock_release_recursive>
 8006bce:	e7dd      	b.n	8006b8c <_fflush_r+0xc>

08006bd0 <__swhatbuf_r>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	b096      	sub	sp, #88	@ 0x58
 8006bdc:	4615      	mov	r5, r2
 8006bde:	461e      	mov	r6, r3
 8006be0:	da0d      	bge.n	8006bfe <__swhatbuf_r+0x2e>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006be8:	f04f 0100 	mov.w	r1, #0
 8006bec:	bf14      	ite	ne
 8006bee:	2340      	movne	r3, #64	@ 0x40
 8006bf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	6031      	str	r1, [r6, #0]
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	b016      	add	sp, #88	@ 0x58
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	466a      	mov	r2, sp
 8006c00:	f000 f848 	bl	8006c94 <_fstat_r>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	dbec      	blt.n	8006be2 <__swhatbuf_r+0x12>
 8006c08:	9901      	ldr	r1, [sp, #4]
 8006c0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c12:	4259      	negs	r1, r3
 8006c14:	4159      	adcs	r1, r3
 8006c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c1a:	e7eb      	b.n	8006bf4 <__swhatbuf_r+0x24>

08006c1c <__smakebuf_r>:
 8006c1c:	898b      	ldrh	r3, [r1, #12]
 8006c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c20:	079d      	lsls	r5, r3, #30
 8006c22:	4606      	mov	r6, r0
 8006c24:	460c      	mov	r4, r1
 8006c26:	d507      	bpl.n	8006c38 <__smakebuf_r+0x1c>
 8006c28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	6123      	str	r3, [r4, #16]
 8006c30:	2301      	movs	r3, #1
 8006c32:	6163      	str	r3, [r4, #20]
 8006c34:	b003      	add	sp, #12
 8006c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c38:	ab01      	add	r3, sp, #4
 8006c3a:	466a      	mov	r2, sp
 8006c3c:	f7ff ffc8 	bl	8006bd0 <__swhatbuf_r>
 8006c40:	9f00      	ldr	r7, [sp, #0]
 8006c42:	4605      	mov	r5, r0
 8006c44:	4639      	mov	r1, r7
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7ff f9c6 	bl	8005fd8 <_malloc_r>
 8006c4c:	b948      	cbnz	r0, 8006c62 <__smakebuf_r+0x46>
 8006c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c52:	059a      	lsls	r2, r3, #22
 8006c54:	d4ee      	bmi.n	8006c34 <__smakebuf_r+0x18>
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	f043 0302 	orr.w	r3, r3, #2
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	e7e2      	b.n	8006c28 <__smakebuf_r+0xc>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	6020      	str	r0, [r4, #0]
 8006c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c72:	b15b      	cbz	r3, 8006c8c <__smakebuf_r+0x70>
 8006c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f000 f81d 	bl	8006cb8 <_isatty_r>
 8006c7e:	b128      	cbz	r0, 8006c8c <__smakebuf_r+0x70>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	431d      	orrs	r5, r3
 8006c90:	81a5      	strh	r5, [r4, #12]
 8006c92:	e7cf      	b.n	8006c34 <__smakebuf_r+0x18>

08006c94 <_fstat_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	@ (8006cb4 <_fstat_r+0x20>)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f7fb fad1 	bl	8002248 <_fstat>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d102      	bne.n	8006cb0 <_fstat_r+0x1c>
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	b103      	cbz	r3, 8006cb0 <_fstat_r+0x1c>
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000548 	.word	0x20000548

08006cb8 <_isatty_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d06      	ldr	r5, [pc, #24]	@ (8006cd4 <_isatty_r+0x1c>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	f7fb fad0 	bl	8002268 <_isatty>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_isatty_r+0x1a>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_isatty_r+0x1a>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	20000548 	.word	0x20000548

08006cd8 <_sbrk_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d06      	ldr	r5, [pc, #24]	@ (8006cf4 <_sbrk_r+0x1c>)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	f7fb fad8 	bl	8002298 <_sbrk>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_sbrk_r+0x1a>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_sbrk_r+0x1a>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	20000548 	.word	0x20000548

08006cf8 <__assert_func>:
 8006cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cfa:	4614      	mov	r4, r2
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <__assert_func+0x2c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4605      	mov	r5, r0
 8006d04:	68d8      	ldr	r0, [r3, #12]
 8006d06:	b954      	cbnz	r4, 8006d1e <__assert_func+0x26>
 8006d08:	4b07      	ldr	r3, [pc, #28]	@ (8006d28 <__assert_func+0x30>)
 8006d0a:	461c      	mov	r4, r3
 8006d0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d10:	9100      	str	r1, [sp, #0]
 8006d12:	462b      	mov	r3, r5
 8006d14:	4905      	ldr	r1, [pc, #20]	@ (8006d2c <__assert_func+0x34>)
 8006d16:	f000 f841 	bl	8006d9c <fiprintf>
 8006d1a:	f000 f851 	bl	8006dc0 <abort>
 8006d1e:	4b04      	ldr	r3, [pc, #16]	@ (8006d30 <__assert_func+0x38>)
 8006d20:	e7f4      	b.n	8006d0c <__assert_func+0x14>
 8006d22:	bf00      	nop
 8006d24:	20000018 	.word	0x20000018
 8006d28:	080071f6 	.word	0x080071f6
 8006d2c:	080071c8 	.word	0x080071c8
 8006d30:	080071bb 	.word	0x080071bb

08006d34 <_calloc_r>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	fba1 5402 	umull	r5, r4, r1, r2
 8006d3a:	b93c      	cbnz	r4, 8006d4c <_calloc_r+0x18>
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7ff f94b 	bl	8005fd8 <_malloc_r>
 8006d42:	4606      	mov	r6, r0
 8006d44:	b928      	cbnz	r0, 8006d52 <_calloc_r+0x1e>
 8006d46:	2600      	movs	r6, #0
 8006d48:	4630      	mov	r0, r6
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	220c      	movs	r2, #12
 8006d4e:	6002      	str	r2, [r0, #0]
 8006d50:	e7f9      	b.n	8006d46 <_calloc_r+0x12>
 8006d52:	462a      	mov	r2, r5
 8006d54:	4621      	mov	r1, r4
 8006d56:	f7fe f9dd 	bl	8005114 <memset>
 8006d5a:	e7f5      	b.n	8006d48 <_calloc_r+0x14>

08006d5c <__ascii_mbtowc>:
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	b901      	cbnz	r1, 8006d62 <__ascii_mbtowc+0x6>
 8006d60:	a901      	add	r1, sp, #4
 8006d62:	b142      	cbz	r2, 8006d76 <__ascii_mbtowc+0x1a>
 8006d64:	b14b      	cbz	r3, 8006d7a <__ascii_mbtowc+0x1e>
 8006d66:	7813      	ldrb	r3, [r2, #0]
 8006d68:	600b      	str	r3, [r1, #0]
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	1e10      	subs	r0, r2, #0
 8006d6e:	bf18      	it	ne
 8006d70:	2001      	movne	r0, #1
 8006d72:	b002      	add	sp, #8
 8006d74:	4770      	bx	lr
 8006d76:	4610      	mov	r0, r2
 8006d78:	e7fb      	b.n	8006d72 <__ascii_mbtowc+0x16>
 8006d7a:	f06f 0001 	mvn.w	r0, #1
 8006d7e:	e7f8      	b.n	8006d72 <__ascii_mbtowc+0x16>

08006d80 <__ascii_wctomb>:
 8006d80:	4603      	mov	r3, r0
 8006d82:	4608      	mov	r0, r1
 8006d84:	b141      	cbz	r1, 8006d98 <__ascii_wctomb+0x18>
 8006d86:	2aff      	cmp	r2, #255	@ 0xff
 8006d88:	d904      	bls.n	8006d94 <__ascii_wctomb+0x14>
 8006d8a:	228a      	movs	r2, #138	@ 0x8a
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d92:	4770      	bx	lr
 8006d94:	700a      	strb	r2, [r1, #0]
 8006d96:	2001      	movs	r0, #1
 8006d98:	4770      	bx	lr
	...

08006d9c <fiprintf>:
 8006d9c:	b40e      	push	{r1, r2, r3}
 8006d9e:	b503      	push	{r0, r1, lr}
 8006da0:	4601      	mov	r1, r0
 8006da2:	ab03      	add	r3, sp, #12
 8006da4:	4805      	ldr	r0, [pc, #20]	@ (8006dbc <fiprintf+0x20>)
 8006da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006daa:	6800      	ldr	r0, [r0, #0]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	f7ff fd4b 	bl	8006848 <_vfiprintf_r>
 8006db2:	b002      	add	sp, #8
 8006db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db8:	b003      	add	sp, #12
 8006dba:	4770      	bx	lr
 8006dbc:	20000018 	.word	0x20000018

08006dc0 <abort>:
 8006dc0:	b508      	push	{r3, lr}
 8006dc2:	2006      	movs	r0, #6
 8006dc4:	f000 f82c 	bl	8006e20 <raise>
 8006dc8:	2001      	movs	r0, #1
 8006dca:	f7fb f9ed 	bl	80021a8 <_exit>

08006dce <_raise_r>:
 8006dce:	291f      	cmp	r1, #31
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	d904      	bls.n	8006de2 <_raise_r+0x14>
 8006dd8:	2316      	movs	r3, #22
 8006dda:	6003      	str	r3, [r0, #0]
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	bd38      	pop	{r3, r4, r5, pc}
 8006de2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006de4:	b112      	cbz	r2, 8006dec <_raise_r+0x1e>
 8006de6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dea:	b94b      	cbnz	r3, 8006e00 <_raise_r+0x32>
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 f831 	bl	8006e54 <_getpid_r>
 8006df2:	4622      	mov	r2, r4
 8006df4:	4601      	mov	r1, r0
 8006df6:	4628      	mov	r0, r5
 8006df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dfc:	f000 b818 	b.w	8006e30 <_kill_r>
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d00a      	beq.n	8006e1a <_raise_r+0x4c>
 8006e04:	1c59      	adds	r1, r3, #1
 8006e06:	d103      	bne.n	8006e10 <_raise_r+0x42>
 8006e08:	2316      	movs	r3, #22
 8006e0a:	6003      	str	r3, [r0, #0]
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	e7e7      	b.n	8006de0 <_raise_r+0x12>
 8006e10:	2100      	movs	r1, #0
 8006e12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e16:	4620      	mov	r0, r4
 8006e18:	4798      	blx	r3
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	e7e0      	b.n	8006de0 <_raise_r+0x12>
	...

08006e20 <raise>:
 8006e20:	4b02      	ldr	r3, [pc, #8]	@ (8006e2c <raise+0xc>)
 8006e22:	4601      	mov	r1, r0
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	f7ff bfd2 	b.w	8006dce <_raise_r>
 8006e2a:	bf00      	nop
 8006e2c:	20000018 	.word	0x20000018

08006e30 <_kill_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d07      	ldr	r5, [pc, #28]	@ (8006e50 <_kill_r+0x20>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	f7fb f9a3 	bl	8002188 <_kill>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d102      	bne.n	8006e4c <_kill_r+0x1c>
 8006e46:	682b      	ldr	r3, [r5, #0]
 8006e48:	b103      	cbz	r3, 8006e4c <_kill_r+0x1c>
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000548 	.word	0x20000548

08006e54 <_getpid_r>:
 8006e54:	f7fb b990 	b.w	8002178 <_getpid>

08006e58 <_init>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	bf00      	nop
 8006e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5e:	bc08      	pop	{r3}
 8006e60:	469e      	mov	lr, r3
 8006e62:	4770      	bx	lr

08006e64 <_fini>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr
